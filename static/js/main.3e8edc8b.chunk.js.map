{"version":3,"sources":["expression/numberParser.ts","expression/NumericOperand.ts","expression/ExpressionOperand.ts","core/is.ts","shell/cmd.ts","shell/components/InputBox.tsx","shell/components/DisplayResultView.tsx","shell/components/DebugIndicators.tsx","core/hash.ts","shell/components/TopLinks.tsx","shell/components/AppRoot.tsx","shell/components/ErrorResultView.tsx","core/formatter.ts","core/components/BinaryString.tsx","networking/components/IpAddressView.tsx","networking/models.ts","networking/ip-parser.ts","core/byte.ts","networking/subnet-utils.tsx","networking/components/IpAddressBinaryString.tsx","networking/components/SubnetView.tsx","networking/module.tsx","expression/ListOfNumbersExpression.ts","expression/BitwiseOperationExpression.ts","expression/expression.ts","expression/components/BitwiseExpressionModel.ts","expression/components/BitwiseOperationExpressionView.tsx","expression/module.tsx","shell/components/AboutResultView.tsx","core/components/CommandLink.tsx","shell/components/HelpResultView.tsx","shell/components/TextResultView.tsx","shell/components/WhatsNewResultView.tsx","shell/AppState.ts","shell/appStateStore.ts","shell/startup.ts","shell/module.tsx","shell/analytics.ts","shell/components/UnknownInputResultView.tsx","index.tsx"],"names":["knownParsers","regex","radix","base","prefix","numberParser","NumberParser","parsers","Object","classCallCheck","this","input","_this","map","p","applyParser","reduce","c","n","m","match","length","parser","rawInput","test","value","parseInt","replace","globalId","NumericOperand","id","lengthInBits","isExpression","getBitLength","Math","floor","log","kind","Error","toBaseString","toString","getOtherBase","num","parsed","parse","hexVal","abs","hex","indexOf","substr","ExpressionOperand","expressionString","operand","sign","D_MyStuff_Pet_BitwiseCmd_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","isShiftExpression","isNotExpression","evaluatedOperand","evaluate","str","create","eval","getUnderlyingOperand","is","obj","Array","shell_cmd","CmdShell","debugMode","handlers","errorHandler","createClass","key","debug","concat","trim","toLowerCase","handler","findHandler","invokeHandler","e","handleError","h","cmd","createHandler","canHandle","handle","push","console","warn","JSON","stringify","arguments","filter","cmdResult","err","error","InputBox","props","possibleConstructorReturn","getPrototypeOf","call","history","historyIndex","nameInput","focus","_this2","react_default","a","createElement","type","ref","onKeyUp","onKeyDown","className","placeholder","target","keyCode","commandInput","unshift","onCommandEntered","args","newIndex","preventDefault","React","Component","DisplayResultView","title","href","window","location","pathname","inputHash","children","DebugIndicators","list","state","appState","env","localStorage","getItem","i","substring","hash","encodeHash","encodeURIComponent","decodeHash","hashValue","decodeURIComponent","getArgs","decodedHash","split","s","forEach","TopLinks","index_es","icon","faGithub","size","faTwitter","faEnvelope","AppRoot","refresh","onChange","setState","commandResults","r","DisplayResultView_DisplayResultView","view","toggleEmphasizeBytes","_this3","uiTheme","components_DebugIndicators","components_TopLinks","InputBox_InputBox","execute","data-cmd","getIndicator","emphasizeBytes","onClick","getResultViews","ErrorResultView","errorMessage","formatter","formatString","getBase","padLeft","symbol","sb","prototype","slice","join","bin","number","emBin","BinaryStringView","getChildren","index","allowFlipBits","onFlipBit","arr","binaryString","newBinaryString","$event","bits","createBits","splitIntoBytes","bitChars","css","onBitClick","bytes","splice","IpAddressView","_React$Component","apply","inherits","ipAddresses","ip","firstByte","secondByte","thirdByte","fourthByte","octetNumber","BinaryString_BinaryStringView","onFlippedBit","setOctet","forceUpdate","IpAddressWithSubnetMask","ipAddress","maskBits","IpAddress","octet","SubnetCommand","definition","spaceLengthInBits","pow","ipAddressParser","result","parseCommand","matches","getMaches","nextInput","correctInputs","incorrectInputs","ParsingError","v","parsedObjects","parseSingle","parsingErrors","command","createSubnetDefinition","startsWith","exec","invalid","first","second","third","fourth","maskPart","items","message","flipBitsToZero","byte","numberOfBits","flipBitsToOne","createSubnetMaskByte","createSubnetMaskIp","ipm","mask","getBroadCastAddress","flipSubnetMaskBits","flipper","fullByte","flip","IpAddressBinaryString","_ref","Fragment","SubnetRow","descr","components_IpAddressBinaryString","SubnetView","subnet","getAdressSpaceSize","networkingAppModule","setup","addCommandResult","components_ErrorResultView","components_SubnetView","networking_components_IpAddressView","ListOfNumbersExpression","numbers","maxBitsLength","BitwiseOperationExpression","expressions","expressionItems","ExpressionParser","factories","trimmed","canCreate","factory","l","ListOfNumbersExpressionFactory","BitwiseOperationExpressionFactory","fullRegex","lastIndex","normalizeString","operands","normalizedString","parseMatch","addFactory","BitwiseExpressionViewModel","_ref$emphasizeBytes","_ref$allowFlipBits","maxNumberOfBits","max","getLengthInBits","expressionItem","label","expression","resultNumber","getLabel","resultOperand","op","expr","config","model","addOperandRow","getNumberOfBits","ex","len","prev","eo","addExpressionOperandRow","notResult","addExpressionResultRow","addShiftExpressionResultRow","buildListOfNumbers","buildMultiple","BitwiseOperationExpressionView","rows","getRows","createModel","itm","BitwiseOperationExpressionView_ExpressionRow","onBitFlipped","ExpressionRow","_this4","_this$props","getBinaryString","flipBit","getOther","toBinaryString","getLabelString","toOtherKindString","newValue","setValue","expressionAppModule","canParse","BitwiseOperationExpressionView_BitwiseOperationExpressionView","AboutResultView","data-result-type","CommandLink","text","HelpResultView","components_CommandLink","TextResultView","WhatsnewResultView","APP_VERSION","AppState","persistData","version","changeHandlers","persistedVersion","wasOldVersion","ceil","random","Date","now","triggerChanged","theme","appStateStore","getPersistedData","json","watch","setItem","getPersistData","STARTUP_COMMAND_KEY","DEFAULT_COMMANDS","bootstrapAppData","shellModule","components_HelpResultView","clearCommandResults","setUiTheme","components_AboutResultView","components_WhatsNewResultView","components_TextResultView","uuid","toggleDebugMode","evt","bitwiseCmdAnalyticsHandler","delivered","sendAnalyticsEvent","eventCategory","eventAction","removeItem","onError","UnknownInputResultView","appData","host","setLevel","setupLogger","stateData","createAppState","startupCommands","hashArgs","loadStoredCommands","getStartupCommands","components_UnknownInputResultView","root","AppRoot_AppRoot","ReactDOM","render","document","getElementById","bind"],"mappings":"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","file":"static/js/main.3e8edc8b.chunk.js","sourcesContent":["import { NumberBase } from \"./expression-interfaces\";\r\n\r\nconst decimalRegex = /^-?\\d+$/;\r\nconst hexRegex = /^-?0x[0-9,a-f]+$/i;\r\nconst binRegex = /^-?0b[0-1]+$/i;\r\nconst operatorRegex = /^<<|>>|<<<|\\&|\\|\\^|~$/;\r\n\r\ninterface ParserConfig {\r\n    regex: RegExp,\r\n    radix: number,\r\n    base: NumberBase,\r\n    prefix: string|RegExp\r\n}\r\n\r\nexport interface ParsedNumber {\r\n    value: number;\r\n    base: NumberBase;\r\n    input: string;\r\n}\r\n\r\nvar knownParsers : ParserConfig[] = [\r\n    { regex: decimalRegex, radix: 10, base: 'dec', prefix: '^$' },\r\n    { regex: hexRegex, radix: 16, base: 'hex', prefix:/0x/i },\r\n    { regex: binRegex, radix: 2, base: 'bin', prefix:/0b/i }];\r\n\r\n\r\nclass NumberParser {\r\n\r\n    parsers: ParserConfig[];\r\n\r\n    constructor(parsers: ParserConfig[])\r\n    {\r\n        this.parsers = parsers;\r\n    }\r\n\r\n    parse (input : string) : ParsedNumber | null {\r\n        return this.parsers.map(p => this.applyParser(p, input)).reduce((c, n) => c || n);\r\n    };\r\n\r\n    parseOperator (input: string) : string | null {\r\n        var m = input.match(input);\r\n        \r\n        if(m == null || m.length == 0) {\r\n            return null;\r\n        }\r\n\r\n        return m[0];\r\n    };\r\n\r\n    applyParser(parser : ParserConfig, rawInput: string) : ParsedNumber | null {\r\n    \r\n        if(!parser.regex.test(rawInput)) {\r\n            return null;\r\n        }\r\n            \r\n        var value = parseInt(rawInput.replace(parser.prefix, ''), parser.radix);\r\n    \r\n        return  {\r\n            value: value,\r\n            base: parser.base,\r\n            input: rawInput\r\n        }    \r\n    }\r\n}\r\n\r\nconst numberParser = new NumberParser(knownParsers);\r\n\r\nexport {numberParser};","import {numberParser} from './numberParser';\r\nimport { ExpressionInputItem, NumberBase } from './expression-interfaces';\r\n\r\nvar globalId : number = 1;\r\n\r\n// Represents numeric value\r\nexport default class NumericOperand implements ExpressionInputItem {\r\n    id: number;\r\n    value: number;\r\n    base: NumberBase;\r\n    lengthInBits: number;\r\n    isExpression: boolean;\r\n\r\n    constructor(value : number, base?: NumberBase) {\r\n        this.id = globalId++;\r\n        this.value = value;\r\n        this.base = base || \"dec\";\r\n        this.lengthInBits = NumericOperand.getBitLength(this.value);\r\n        this.isExpression = false;\r\n    }\r\n            \r\n    getLengthInBits() {\r\n        if(this.value < 0) {\r\n            return 32;\r\n        }\r\n        return Math.floor(Math.log(this.value) / Math.log(2)) + 1;\r\n    };\r\n\r\n    getOtherBase(kind?: NumberBase) : NumberBase {\r\n        switch(kind || this.base) {\r\n            case 'dec': \r\n            case 'bin':\r\n                return 'hex';\r\n            case 'hex': return 'dec';\r\n            default : throw new Error(kind + \" kind doesn't have opposite kind\")\r\n        }\r\n    };\r\n\r\n    toString(base?: NumberBase) : string {\r\n        return NumericOperand.toBaseString(this.value, base || this.base);\r\n    }\r\n\r\n    toOtherKindString() : string {\r\n        return this.toString(this.getOtherBase());\r\n    }\r\n\r\n    toDecimalString() {\r\n        return this.toString('dec');\r\n    }\r\n\r\n    toHexString() {\r\n        return this.toString('hex');\r\n    }\r\n\r\n    toBinaryString() : string {\r\n        return this.toString('bin');\r\n    }\r\n\r\n    setValue(value : number) {\r\n        this.value = value;\r\n        this.lengthInBits = NumericOperand.getBitLength(value);\r\n    }\r\n\r\n    evaluate() : NumericOperand {\r\n        return this;\r\n    }\r\n\r\n    getUnderlyingOperand() : NumericOperand  {\r\n        return this\r\n    }\r\n        \r\n    static getBitLength(num : number) {\r\n        return Math.floor(Math.log(num) / Math.log(2)) + 1;\r\n    }    \r\n    \r\n    static getBase(kind : string){\r\n        switch (kind){\r\n            case 'bin': return 2;\r\n            case 'hex': return 16;\r\n            case 'dec': return 10;\r\n        }\r\n    };\r\n\r\n    static create(value : number, base? : NumberBase) {\r\n        return new NumericOperand(value, base || \"dec\");\r\n    };\r\n\r\n    static parse(input: string) : NumericOperand {\r\n                    \r\n        var parsed = numberParser.parse(input);\r\n\r\n        if(!parsed) {\r\n            throw new Error(input + \" is not a valid number\");\r\n        }\r\n\r\n        return new NumericOperand(parsed.value, parsed.base);\r\n    }\r\n\r\n    static toBaseString(value : number, base : NumberBase) : string {\r\n        switch(base) {\r\n            case 'hex':\r\n                var hexVal = Math.abs(value).toString(16);\r\n                return value >= 0 ? '0x' + hexVal : '-0x' + hexVal;\r\n            case 'bin':\r\n                return (value>>>0).toString(2);\r\n            case 'dec':\r\n                return value.toString(10);\r\n            default:\r\n                throw new Error(\"Unexpected kind: \" + base)\r\n        }\r\n    };\r\n\r\n     static toHexString (hex : string) {\r\n            return hex.indexOf('-') === 0 ? '-0x' + hex.substr(1) : '0x' + hex;\r\n     };\r\n}","import NumericOperand from './NumericOperand';\r\nimport { ExpressionInputItem } from './expression-interfaces';\r\n\r\nexport default class ExpressionOperand implements ExpressionInputItem {\r\n    expressionString: string;\r\n    operand: ExpressionInputItem;\r\n    sign: string;\r\n    isExpression: boolean;\r\n    isShiftExpression: boolean;\r\n    isNotExpression: boolean;\r\n\r\n    constructor(expressionString : string, operand : ExpressionInputItem, sign : string) {\r\n        this.expressionString = expressionString;\r\n        this.operand = operand;\r\n        this.sign = sign;\r\n        this.isExpression = true;\r\n        this.isShiftExpression = this.sign.indexOf('<') >= 0 || this.sign.indexOf('>')>= 0;\r\n        this.isNotExpression = this.sign === '~';\r\n    }\r\n        \r\n    evaluate(operand?: NumericOperand) : NumericOperand {\r\n        if (operand instanceof ExpressionOperand) {\r\n            throw new Error('value shouldnt be expression'); \r\n        }\r\n\r\n        var evaluatedOperand = this.operand.evaluate();\r\n\r\n        var str = '';\r\n        if(this.sign == '~'){\r\n            str = '~' + evaluatedOperand.value;\r\n        } else {\r\n            if(operand == null)\r\n            throw new Error(\"Other is required for expression: \" + this.expressionString)\r\n\r\n            str = operand.value + this.sign + evaluatedOperand.value;\r\n        }\r\n\r\n        return NumericOperand.create(eval(str), evaluatedOperand.base);\r\n    }\r\n\r\n    getUnderlyingOperand() : NumericOperand {\r\n        return this.operand.getUnderlyingOperand();\r\n    }\r\n\r\n    toString(): string {\r\n        return this.sign + this.operand.toString();\r\n    }\r\n}","export default {\r\n    plainObject: function(obj : any) : boolean {\r\n        return typeof obj == \"object\" && !(obj instanceof Array) && obj instanceof Object;\r\n    },\r\n\r\n    aFunction: function(obj : any) : boolean {\r\n        return typeof obj == \"function\";\r\n    },\r\n\r\n    string: function(obj : any) : boolean {\r\n        return typeof obj == \"string\";\r\n    },\r\n\r\n    array: function(obj : any) : boolean  {\r\n        return obj instanceof Array;\r\n    },\r\n\r\n    number: function(obj : any) : boolean  {\r\n        return typeof obj == \"number\" && !isNaN(obj)\r\n    }\r\n}","import is from '../core/is';\r\nimport log from 'loglevel';\r\n\r\nexport type CommandInput = {\r\n    input: string;\r\n}\r\n\r\ntype HandleFunction = (input: CommandInput) => void;\r\ntype InputErrorHandler = (input:string, error: Error) => void;\r\n\r\nexport interface ICommandHandler {\r\n    canHandle (input:string) : boolean;\r\n    handle: HandleFunction;\r\n}\r\n\r\nexport class CmdShell {\r\n    debugMode: boolean;\r\n    handlers: ICommandHandler[];\r\n    errorHandler: InputErrorHandler | null; \r\n    constructor() {\r\n        this.handlers = [];\r\n        this.debugMode = false;\r\n        this.errorHandler = null;\r\n    };\r\n\r\n    execute (rawInput: string) {\r\n\r\n        log.debug(`Executing command: ${rawInput}`)\r\n\r\n        var input = rawInput.trim().toLowerCase();\r\n        var handler = this.findHandler(input);\r\n\r\n        if(handler != null) {\r\n            if(this.debugMode) {\r\n                this.invokeHandler(input, handler);\r\n            } else {\r\n                try {\r\n                    this.invokeHandler(input, handler);\r\n                } catch (e) {\r\n                     this.handleError(input, e);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            log.debug(`Handled is not found for command: ${rawInput}`)\r\n            this.handleError(input, new Error(\"Unsupported expression: \" + input.trim()));\r\n        }\r\n    };\r\n\r\n    onError(h: InputErrorHandler) {\r\n        this.errorHandler = h;\r\n    }\r\n   \r\n    command (cmd : string | object, handler? : any) {\r\n        var h = this.createHandler(cmd, handler);\r\n        if(h == null){\r\n            console.warn('unexpected set of arguments: ', JSON.stringify(arguments));\r\n            return;\r\n        }\r\n\r\n        if(!is.aFunction(h.canHandle)) {\r\n            console.warn('handler is missing \"canHandle\" function. registration denied.');\r\n            return;\r\n        }\r\n\r\n        if(!is.aFunction(h.handle)) {\r\n            console.warn('handler is missing \"handle\" function. registration denied.');\r\n            return;\r\n        }\r\n\r\n        this.handlers.push(h);\r\n    };\r\n\r\n    createHandler (cmd : string | object, handler : HandleFunction) : ICommandHandler | null {\r\n        if(is.plainObject(cmd)) {\r\n            return cmd as ICommandHandler;\r\n        }\r\n\r\n        if(is.string(cmd)) {\r\n            return { canHandle: function (input) { return input === cmd; }, handle: handler };\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    findHandler (input: string) : ICommandHandler | null {\r\n        return this.handlers.filter(h => h.canHandle(input))[0];\r\n    };\r\n\r\n    invokeHandler (input : string, handler : ICommandHandler) {\r\n\r\n        var cmdResult = handler.handle({ input: input});\r\n        if(cmdResult != null) {\r\n            log.debug(cmdResult);\r\n        }\r\n    };\r\n\r\n    handleError (input: string, err: Error) {\r\n        if(this.debugMode)\r\n            console.error(input, err);\r\n\r\n        if(this.errorHandler != null)\r\n            this.errorHandler(input, err);\r\n    }\r\n}\r\n\r\nexport default new CmdShell();","import React from 'react';\r\nimport log from 'loglevel';\r\n\r\nexport interface IInputBoxProps\r\n{\r\n    onCommandEntered: (input :string) => void;\r\n}\r\n\r\nexport default class InputBox extends React.Component<IInputBoxProps> {\r\n    history: string[];\r\n    historyIndex: number;\r\n    nameInput:  HTMLInputElement | null;\r\n\r\n    constructor(props: IInputBoxProps) {\r\n        super(props);\r\n        this.nameInput = null;\r\n        this.history = [];\r\n        this.historyIndex = -1;\r\n    }\r\n\r\n    componentDidMount(){\r\n        if(this.nameInput != null)\r\n            this.nameInput.focus();\r\n    }\r\n\r\n    render() {\r\n        return <input id=\"in\" type=\"text\"\r\n                      ref={(input) => { this.nameInput = input; }} \r\n                      onKeyUp={e => this.onKeyUp(e)}\r\n                      onKeyDown={e => this.onKeyDown(e)}\r\n                      className=\"expressionInput mono\"\r\n                      placeholder=\"type expression like '1>>2' or 'help' \"/>;\r\n    }\r\n\r\n    onKeyUp(e: any) {\r\n        var input = e.target;\r\n        if (e.keyCode != 13 || input.value.trim().length == 0) {\r\n            return;\r\n        }\r\n        \r\n        var commandInput = input.value;\r\n        this.history.unshift(commandInput);\r\n        this.historyIndex = -1;\r\n\r\n        input.value = '';        \r\n        this.props.onCommandEntered(commandInput);\r\n    }\r\n\r\n    onKeyDown(args: any) {\r\n\r\n        if(args.keyCode == 38) {\r\n            var newIndex = this.historyIndex+1;\r\n\r\n            if (this.history.length > newIndex) { // up\r\n                args.target.value = this.history[newIndex];\r\n                this.historyIndex = newIndex;\r\n            }\r\n\r\n            args.preventDefault();\r\n            return;\r\n        }\r\n\r\n        if(args.keyCode == 40) {\r\n            if(this.historyIndex > 0) { // down\r\n                args.target.value = this.history[--this.historyIndex];\r\n            }\r\n\r\n            args.preventDefault();\r\n        }\r\n    }\r\n}","import React from 'react';\r\nimport AppState from '../AppState';\r\n\r\n\r\ntype DisplayResultProps = {\r\n    appState: AppState,\r\n    inputHash: string,\r\n    input: string,\r\n    key: number,\r\n    onRemove?: (i: number) => void;\r\n}\r\n\r\nexport default class DisplayResultView extends React.Component<DisplayResultProps> {\r\n    render() {\r\n\r\n        return <div className=\"result\">\r\n                        <div className=\"input mono\">\r\n                                <span className=\"cur\">\r\n                                    &gt;</span>{this.props.input}\r\n                                    <a className=\"hashLink\" title=\"Link for this expression\" href={window.location.pathname + '#' + this.props.inputHash}>#</a>\r\n                            </div>\r\n                        <div className=\"content\">\r\n                            {this.props.children}\r\n                        </div>\r\n                    </div>;\r\n    }\r\n}\r\n\r\n","import AppState from \"../AppState\";\r\nimport React from \"react\";\r\nimport './DebugIndicators.css';\r\n\r\nfunction DebugIndicators(props:  {appState: AppState}) {\r\n\r\n    const list = [];\r\n    const state = props.appState;\r\n\r\n    if(props.appState.env != 'prod') {\r\n        list.push(state.env);\r\n    }\r\n\r\n    if(props.appState.debugMode) {\r\n        list.push(\"debug\");\r\n    }\r\n\r\n    if(localStorage.getItem('TrackAnalytics') === 'false') {\r\n        list.push(\"notrack\");\r\n    }\r\n\r\n    if(list.length == 0)\r\n        return null;\r\n\r\n    return <div className=\"debug-indicators\">\r\n            {list.map(i => <span title={i}>[{i.substring(0,1)}]&nbsp;</span>)}\r\n        </div>\r\n}\r\n\r\nexport default DebugIndicators;","export default {\r\n    encodeHash: function(input:string):string {\r\n        return encodeURIComponent(input.trim().replace(/\\s/g,','));\r\n    },\r\n    decodeHash: function(hashValue:string):string {\r\n        return decodeURIComponent(hashValue.replace(/^\\#/, '')).replace(/,/g,' ');\r\n    },\r\n    getArgs: function (hashValue:string) : string[] {\r\n\r\n        var decodedHash = this.decodeHash(hashValue);\r\n        var args : string[] = [];\r\n\r\n        splitHashList(decodedHash).forEach(function(value) {\r\n            args.push(value);\r\n        });\r\n\r\n        return args;\r\n    }\r\n};\r\n\r\nfunction splitHashList(str: string) : string[] {\r\n\r\n    return str.split('||').filter(s => s.length > 0);\r\n}","import React from 'react';\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport { faEnvelope } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faTwitter, faGithub} from \"@fortawesome/free-brands-svg-icons\";\r\nimport './TopLinks.css';\r\n\r\nfunction TopLinks() {\r\n    return <ul className=\"top-links\">                \r\n                <li>\r\n                    <a href=\"https://github.com/BorisLevitskiy/BitwiseCmd\"><FontAwesomeIcon className=\"icon\" icon={faGithub} size=\"lg\" />Project on GitHub</a>\r\n                </li>\r\n                <li>\r\n                    <a href=\"https://twitter.com/BitwiseCmd\"><FontAwesomeIcon className=\"icon\" icon={faTwitter} size=\"lg\" /><span className=\"link-text\">Twitter</span></a>\r\n                </li>\r\n                <li>\r\n                    <a href=\"mailto:&#098;&#105;&#116;&#119;&#105;&#115;&#101;&#099;&#109;&#100;&#064;&#103;&#109;&#097;&#105;&#108;&#046;&#099;&#111;&#109;?subject=Feedback\"><FontAwesomeIcon className=\"icon\" icon={faEnvelope} size=\"lg\" /><span className=\"link-text\">Send Feedback</span></a>\r\n                </li>\r\n    </ul>;\r\n}\r\n\r\nexport default TopLinks;","import React from 'react';\r\nimport InputBox from './InputBox';\r\nimport DisplayResultView from './DisplayResultView';\r\nimport AppState, { CommandResultView } from '../AppState';\r\nimport cmd from '../cmd';\r\nimport log from 'loglevel';\r\nimport DebugIndicators from './DebugIndicators';\r\nimport hash from '../../core/hash';\r\nimport TopLinks from './TopLinks';\r\n\r\n\r\ntype AppRootProps = {\r\n    appState: AppState,    \r\n};\r\n\r\ntype AppRootState = {\r\n    uiTheme: string,\r\n    emphasizeBytes: boolean,\r\n    commandResults: CommandResultView[]\r\n}\r\n\r\nexport default class AppRoot extends React.Component<AppRootProps, AppRootState> {\r\n    \r\n    componentWillMount() {\r\n        this.refresh();\r\n        this.props.appState.onChange(() => this.refresh());\r\n    }\r\n\r\n    refresh() {\r\n        this.setState(this.props.appState);\r\n    }\r\n    \r\n    getIndicator(value : boolean) {\r\n        return value ? 'on' : 'off';\r\n    }\r\n\r\n    getResultViews() : JSX.Element[] {\r\n\r\n        var results = this.state.commandResults.map((r, i) => \r\n            <DisplayResultView key={r.key}  input={r.input} inputHash={hash.encodeHash(r.input)} appState={this.props.appState}>\r\n                {r.view}\r\n            </DisplayResultView>);\r\n        return results;\r\n    }\r\n\r\n    toggleEmphasizeBytes() {\r\n        this.props.appState.toggleEmphasizeBytes();\r\n    }\r\n\r\n    render() {\r\n        return <div className={`app-root ${this.state.uiTheme}`}>\r\n                    <DebugIndicators appState={this.props.appState} />\r\n                    <div className=\"header\">\r\n                        <h1>Bitwise<span className=\"header-cmd\">Cmd</span>\r\n                        </h1>\r\n                       <TopLinks />\r\n                    </div>\r\n\r\n                    <div className=\"expressionInput-container\">\r\n                        <InputBox onCommandEntered={(input) => cmd.execute(input)} />\r\n\r\n                        <span className=\"configPnl\">\r\n                            <span id=\"emphasizeBytes\" data-cmd=\"em\" className={\"indicator \" + this.getIndicator(this.state.emphasizeBytes)} title=\"Toggle Emphasize Bytes\" onClick={() => this.toggleEmphasizeBytes()}>[em]</span>\r\n                        </span>\r\n                    </div>\r\n\r\n                    <div id=\"output\">\r\n                    {this.getResultViews()}\r\n                    </div>\r\n                </div>;\r\n    }\r\n}","import React from 'react';\r\n\r\nfunction ErrorResultView(props : {errorMessage:string}) {\r\n    \r\n    return <div className=\"result\">\r\n                <div className=\"error\">{props.errorMessage}</div>\r\n        </div>;\r\n}\r\n\r\nexport default ErrorResultView;\r\n","const formatter = {\r\n    formatString: function(num: number, kind: string) : string {\r\n        return num.toString(getBase(kind || \"bin\"));\r\n    },\r\n    padLeft: function (str: string, length: number, symbol: string) : string {\r\n        var sb = Array.prototype.slice.call(str), symbol = symbol || \"0\";\r\n\r\n        if(length == null) {\r\n            return str;\r\n        }\r\n\r\n        while(length > sb.length) {\r\n            sb.unshift(symbol);\r\n        }\r\n\r\n        return sb.join('');\r\n    },\r\n    bin(number: number) {\r\n        return this.formatString(number, 'bin');\r\n    },\r\n    emBin(number: number) {\r\n        return this.padLeft(this.bin(number), 8, '0');\r\n    }\r\n};\r\n\r\nfunction getBase(kind:string) : number {\r\n    switch (kind){\r\n        case 'bin': return 2;\r\n        case 'hex': return 16;\r\n        case 'dec': return 10;\r\n    }\r\n\r\n    throw new Error(\"Unsupported kind: \" + kind);\r\n}\r\n\r\nexport default formatter;\r\nconst emBin = formatter.emBin;\r\nexport {emBin};","import React from 'react';\r\n\r\nexport type BinaryStringViewProps = {\r\n    allowFlipBits?: boolean;\r\n    binaryString: string;\r\n    onFlipBit?: (input: FlipBitEventArg) => void;\r\n    emphasizeBytes?: boolean;\r\n    className?:string\r\n};\r\n\r\nexport type FlipBitEventArg = {\r\n    index: number;\r\n    binaryString: string;\r\n    $event: any;\r\n    newBinaryString: string,    \r\n};\r\n\r\nexport default class BinaryStringView extends React.Component<BinaryStringViewProps> {\r\n    render() {\r\n        return <span className={this.props.className}>{this.getChildren()}</span>\r\n    }\r\n\r\n    onBitClick(index: number, e : any) {\r\n        if(!this.props.allowFlipBits || !this.props.onFlipBit) {\r\n            return;\r\n        }\r\n\r\n        if(!this.props.onFlipBit) {\r\n            \r\n        }\r\n\r\n        const arr = this.props.binaryString.split('');\r\n        arr[index] = arr[index] == '0' ? '1' : '0';\r\n        const newBinaryString = arr.join('');\r\n\r\n        this.props.onFlipBit({ index: index, binaryString: this.props.binaryString, $event: e, newBinaryString });        \r\n    }\r\n\r\n    getChildren() {\r\n        var bits = this.createBits(this.props.binaryString.split(''));\r\n        \r\n        if(this.props.emphasizeBytes) {\r\n            return this.splitIntoBytes(bits);\r\n        }\r\n\r\n        return bits;\r\n    }\r\n\r\n    createBits(bitChars:string[]) : JSX.Element[] {\r\n        const allowFlipBits = this.props.allowFlipBits || false;\r\n        const css = allowFlipBits ? ' flipable' : ''\r\n\r\n        return bitChars.map((c, i) => {\r\n            var className = c == '1' ? `one${css}` : `zero${css}`;\r\n            return <span className={className} key={i} onClick={e => this.onBitClick(i, e)}>{c}</span>\r\n        });\r\n    }\r\n\r\n    splitIntoBytes(bits: JSX.Element[]) {\r\n        const bytes = [];\r\n\r\n        var key = 0;\r\n        while(bits.length > 0) {\r\n            bytes.push(<span key={key++} className=\"byte\">{bits.splice(0, 8)}</span>);\r\n        }\r\n        \r\n        return bytes;\r\n    }\r\n}","import React from 'react';\r\nimport formatter from '../../core/formatter'\r\nimport BinaryStringView from '../../core/components/BinaryString';\r\nimport './IpAddressView.css';\r\nimport { IpAddress, OctetNumber } from '../models';\r\n\r\ntype IpAddressViewProps = {\r\n    ipAddresses: IpAddress[]\r\n};\r\n\r\nexport class IpAddressView extends React.Component<IpAddressViewProps> \r\n{\r\n    \r\n    render() {        \r\n        return <table className=\"expression\">\r\n            <tbody>\r\n                {this.props.ipAddresses.map((ip, i) => <tr key={i}>\r\n                        <td className=\"label\"><strong>{ip.toString()}</strong></td>\r\n                        <td className=\"bin\">\r\n                            {this.bin(ip.firstByte, 1, ip)}<span className=\"soft\">.</span>\r\n                            {this.bin(ip.secondByte, 2, ip)}<span className=\"soft\">.</span>\r\n                            {this.bin(ip.thirdByte, 3, ip)}<span className=\"soft\">.</span>\r\n                            {this.bin(ip.fourthByte, 4, ip)}\r\n                        </td>\r\n                    </tr>)}\r\n            </tbody>\r\n        </table>;\r\n    }\r\n\r\n    bin(value: number, octetNumber: OctetNumber, ip: IpAddress) {\r\n        return <BinaryStringView \r\n            binaryString={fmt(value)} \r\n            key={octetNumber} \r\n            emphasizeBytes={false} \r\n            allowFlipBits={true}\r\n            className={`octet-${octetNumber}`}\r\n            onFlipBit={e => this.onFlippedBit(e.newBinaryString, octetNumber, ip)} />;\r\n    }\r\n    \r\n    onFlippedBit(binaryString: string, number: OctetNumber, ip : IpAddress) {\r\n        ip.setOctet(number, parseInt(binaryString, 2));\r\n        this.forceUpdate();\r\n    }\r\n};\r\n\r\nfunction fmt(num: number) : string {\r\n    return formatter.padLeft(formatter.formatString(num, 'bin'), 8, '0');\r\n}\r\n\r\nexport default IpAddressView;","import {emBin} from \"../core/formatter\";\r\n\r\nexport type OctetNumber = 1 | 2 | 3 | 4;\r\nexport type NetworkClass = 'a' | 'b' | 'c' | 'd' | 'e';\r\n\r\nexport class IpAddressWithSubnetMask {\r\n    maskBits: number;\r\n    ipAddress: IpAddress;\r\n\r\n    constructor(ipAddress: IpAddress, maskBits: number) {\r\n        this.ipAddress = ipAddress;\r\n        this.maskBits = maskBits;\r\n    }\r\n\r\n    toString() {\r\n        return `${this.ipAddress.toString()}/${this.maskBits}`;\r\n    }\r\n}\r\n\r\nexport class IpAddress {\r\n\r\n    firstByte: number;\r\n    secondByte: number;\r\n    thirdByte: number;\r\n    fourthByte: number;\r\n\r\n    constructor(firstByte: number, secondByte: number, thirdByte: number, fourthByte: number) {\r\n        this.firstByte = firstByte;\r\n        this.secondByte = secondByte;\r\n        this.thirdByte = thirdByte;\r\n        this.fourthByte = fourthByte;\r\n    }\r\n\r\n    toString(): string {\r\n        return `${this.firstByte}.${this.secondByte}.${this.thirdByte}.${this.fourthByte}`;\r\n    }\r\n\r\n    toBinaryString() {\r\n        \r\n        return `${emBin(this.firstByte)}).${emBin(this.secondByte)}.${emBin(this.thirdByte)}.${emBin(this.fourthByte)}`;\r\n    }\r\n\r\n    clone(): IpAddress {\r\n        return new IpAddress(this.firstByte, this.secondByte, this.thirdByte, this.fourthByte);\r\n    }\r\n\r\n    setOctet(octet: OctetNumber, value: number) {\r\n        switch (octet) {\r\n            case 1:\r\n                this.firstByte = value;\r\n                break;\r\n            case 2:\r\n                this.secondByte = value;\r\n                break;\r\n            case 3:\r\n                this.thirdByte = value;\r\n                break;\r\n            case 4:\r\n                this.fourthByte = value;\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\nexport class SubnetCommand {\r\n    input: IpAddressWithSubnetMask;\r\n    constructor(definition: IpAddressWithSubnetMask) {\r\n        this.input = definition;\r\n    }\r\n\r\n    getAdressSpaceSize(): number {\r\n        const spaceLengthInBits = 32 - this.input.maskBits;\r\n        return Math.pow(2, spaceLengthInBits) - 2; // 0 - network address, 1 - multicast address\r\n    }\r\n\r\n    toString() {\r\n        return this.input.toString();\r\n    }\r\n}\r\n\r\n","import { IpAddress, IpAddressWithSubnetMask, SubnetCommand } from './models';\r\n\r\nexport type ParsedIpObject = IpAddress | IpAddressWithSubnetMask;\r\n\r\n\r\nconst ipAddressParser = {\r\n    parse: function(input: string) : ParsedIpObject[] | SubnetCommand | ParsingError | null {\r\n\r\n        const result = this.parseCommand(input);\r\n\r\n        const matches = this.getMaches(result.nextInput);\r\n        const correctInputs = matches.filter(m => m.matches != null);\r\n        const incorrectInputs = matches.filter(m => m.matches == null);\r\n        \r\n        if(correctInputs.length == 0)\r\n            return null;\r\n\r\n        if(incorrectInputs.length > 0) {\r\n                return new ParsingError(`Value(s) ${incorrectInputs.map(v => v.input).join(',')} was not recognized as valid ip address or ip address with a subnet mask`);\r\n        }\r\n\r\n        const parsedObjects = matches.map(m => this.parseSingle(m.matches!, m.input));\r\n        const parsingErrors = parsedObjects.filter(p => p instanceof ParsingError);\r\n\r\n        if(parsingErrors.length > 0) {\r\n            return parsingErrors[0] as ParsingError;\r\n        }\r\n\r\n        if(result.command != null) {\r\n            const result = this.createSubnetDefinition(parsedObjects as ParsedIpObject[]);\r\n            \r\n            if(result instanceof ParsingError)\r\n                return result;\r\n\r\n            return  result;\r\n        } \r\n\r\n        return parsedObjects as ParsedIpObject[];\r\n    },\r\n\r\n    parseCommand(input : string) : { command: null | string, nextInput: string } {\r\n\r\n        const command = 'subnet';\r\n        if(input.startsWith(command)) \r\n            return { command, nextInput: input.substring(command.length)}\r\n\r\n        return { command: null, nextInput: input };\r\n    },\r\n\r\n    getMaches(input : string) : { matches: RegExpExecArray | null, input: string }[] {\r\n\r\n        return input.\r\n            replace(/[\\t\\s]+/g, ' ')\r\n                .split(' ')\r\n                .filter(s => s.length>0)\r\n                .map(s => {\r\n                    const ipV4Regex = /^([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})(\\/\\d+)?$/;\r\n                    const matches = ipV4Regex.exec(s);\r\n                    \r\n                    if(matches == null || matches.length === 0)\r\n                        return {matches: null, input: s};\r\n                    \r\n                    return {matches, input: s};\r\n                });\r\n    },\r\n\r\n    parseSingle(matches : RegExpExecArray, input: string) : ParsedIpObject | ParsingError {\r\n        const invalid = (n: number) => n < 0 || n > 255;\r\n    \r\n        const first = parseInt(matches[1]);\r\n        const second = parseInt(matches[2]);\r\n        const third = parseInt(matches[3]);\r\n        const fourth = parseInt(matches[4]);\r\n\r\n        if(invalid(first) || invalid(second) || invalid(third) || invalid(fourth))\r\n            return new ParsingError(`${input} value doesn't fall within the valid range of the IP address space`);\r\n\r\n        const ipAddress = new IpAddress(first, second, third, fourth);\r\n\r\n        if(matches[5]) {\r\n            const maskPart = matches[5].substr(1);\r\n            const maskBits = parseInt(maskPart);\r\n\r\n            if(maskBits > 32) {\r\n                return new ParsingError(`Subnet mask value in ${input} is out of range`);\r\n            }\r\n\r\n            return new IpAddressWithSubnetMask(ipAddress, maskBits);\r\n        }\r\n\r\n        return ipAddress;\r\n    },\r\n\r\n    createSubnetDefinition(items: ParsedIpObject[]) : SubnetCommand | ParsingError {\r\n        if(items.length != 1)\r\n            return new ParsingError(\"Incorrect network definition\");\r\n        \r\n        const first = items[0];\r\n        if(first instanceof IpAddressWithSubnetMask) {\r\n            return new SubnetCommand(first);\r\n        }\r\n\r\n        return new ParsingError(\"Network definition requires subnet mask\");\r\n    }\r\n}\r\n\r\nexport class ParsingError {\r\n    errorMessage: string;\r\n    constructor(message: string) {\r\n        this.errorMessage = message;\r\n    }\r\n}\r\n\r\n\r\nexport default ipAddressParser;","function flipBitsToZero(byte: number, numberOfBits : number) : number {\r\n    if(numberOfBits == 0)\r\n        return byte;\r\n    \r\n    const zerouOutMask = Math.pow(2, 8-numberOfBits)-1<<numberOfBits; // E.g. 11111000 for flipping first three bits\r\n    const result = byte & zerouOutMask; \r\n\r\n    return result;\r\n}\r\n\r\n// TODO: continue here to implement getting broadcast address\r\n\r\nfunction flipBitsToOne(byte : number, numberOfBits : number) : number {\r\n    if(numberOfBits == 0) return byte;\r\n\r\n    const zerouOutMask = Math.pow(2, numberOfBits)-1; // E.g. 00000111 for flipping first three bits\r\n    const result = byte | zerouOutMask; \r\n\r\n    return result;\r\n}\r\n\r\nfunction createSubnetMaskByte(numberOfBits: number) {\r\n    return 255<<(8-numberOfBits)&255;;\r\n}\r\n\r\nexport {flipBitsToZero, createSubnetMaskByte, flipBitsToOne};","import { createSubnetMaskByte } from \"../core/byte\";\r\nimport { flipBitsToOne, flipBitsToZero } from '../core/byte';\r\nimport { IpAddress, IpAddressWithSubnetMask, NetworkClass } from \"./models\";\r\n\r\nfunction createSubnetMaskIp(ipm: IpAddressWithSubnetMask) : IpAddress {\r\n\r\n    const mask = createSubnetMaskByte;\r\n    const maskBits = ipm.maskBits;\r\n\r\n    if (maskBits <= 8) {\r\n        return new IpAddress(mask(maskBits), 0, 0, 0);\r\n    }\r\n    else if (maskBits <= 16) {\r\n        return new IpAddress(255, mask(maskBits - 8), 0, 0);\r\n    }\r\n    else if (maskBits <= 24) {\r\n        return new IpAddress(255, 255, mask(maskBits - 16), 0);\r\n    }\r\n    else {\r\n        return new IpAddress(255, 255, 255, mask(maskBits - 24));\r\n    }\r\n}\r\n\r\nfunction getNetworkAddress(ipm: IpAddressWithSubnetMask) : IpAddress {\r\n    return flipSubnetMaskBits(ipm, flipBitsToZero, 0);\r\n}\r\n\r\nfunction getBroadCastAddress(ipm: IpAddressWithSubnetMask) : IpAddress {\r\n    return flipSubnetMaskBits(ipm, flipBitsToOne, 255);\r\n}\r\n\r\nfunction flipSubnetMaskBits(ipm: IpAddressWithSubnetMask, flipper : FlipFunction, fullByte: number) {\r\n    // Cannot treat ip address as a single number operation because 244 << 24 results in a negative number in JS\r\n    const flip = (maskBits: number, byte: number) => flipper(byte, 8 - maskBits);\r\n\r\n    const ip = ipm.ipAddress;\r\n    const maskBits = ipm.maskBits;\r\n\r\n    if (maskBits <= 8) {\r\n        return new IpAddress(flip(maskBits, ip.firstByte), fullByte, fullByte, fullByte);\r\n    }\r\n    else if (maskBits <= 16) {\r\n        return new IpAddress(ip.firstByte, flip(maskBits - 8, ip.secondByte), fullByte, fullByte);\r\n    }\r\n    else if (maskBits <= 24) {\r\n        return new IpAddress(ip.firstByte, ip.secondByte, flip(maskBits - 16, ip.thirdByte), fullByte);\r\n    }\r\n\r\n    else\r\n        return new IpAddress(ip.firstByte, ip.secondByte, ip.thirdByte, flip(maskBits - 24, ip.fourthByte));\r\n}\r\n\r\nfunction getNetworkClass (ipAddress: IpAddress) : NetworkClass {\r\n    const byte = ipAddress.firstByte;\r\n\r\n    const firstBitOne = (byte & 128) === 128;\r\n    const firstBitZero = (byte & 128) === 0;\r\n    const secondBitOne = (byte & 64) === 64;\r\n\r\n    const thirdBitOne = (byte & 32) === 32;\r\n    const thirdBitZero = (byte & 32) === 0;\r\n\r\n    const forthBitZero = (byte & 16) === 0;\r\n    const forthBitOne = (byte & 16) === 16;\r\n\r\n    // e: 1111\r\n\r\n    if(firstBitOne && secondBitOne && thirdBitOne && forthBitOne)\r\n        return 'e';\r\n\r\n    if(firstBitOne && secondBitOne && thirdBitOne && forthBitZero) // Start bits: 1110;\r\n        return 'd';\r\n\r\n    if(firstBitOne && secondBitOne && thirdBitZero) // Start bits: 110;\r\n        return 'c';\r\n   \r\n    return firstBitOne ? 'b' : 'a';\r\n};\r\n\r\n\r\ntype FlipFunction = (byte: number, numberOfBits: number) => number; \r\n\r\nexport {createSubnetMaskIp, getBroadCastAddress, getNetworkAddress, getNetworkClass};","import React from 'react';\r\nimport BinaryStringView from '../../core/components/BinaryString';\r\nimport formatter from '../../core/formatter';\r\nimport { IpAddress } from '../models';\r\n\r\nfunction IpAddressBinaryString({ip}: {ip:IpAddress}) {\r\n\r\n   return <React.Fragment>\r\n        <BinaryStringView binaryString={formatter.emBin(ip.firstByte)} />\r\n                    <span className=\"soft\">.</span>\r\n                    <BinaryStringView binaryString={formatter.emBin(ip.secondByte)} />\r\n                    <span className=\"soft\">.</span>\r\n                    <BinaryStringView binaryString={formatter.emBin(ip.thirdByte)} />\r\n                    <span className=\"soft\">.</span>\r\n                    <BinaryStringView binaryString={formatter.emBin(ip.fourthByte)} />\r\n   </React.Fragment>;\r\n}\r\n\r\nexport default IpAddressBinaryString;","import React from 'react';\r\nimport BinaryStringView from '../../core/components/BinaryString';\r\nimport './SubnetView.css';\r\nimport { getNetworkAddress, getBroadCastAddress, createSubnetMaskIp } from '../subnet-utils';\r\nimport { chunkifyString } from '../../core/utils';\r\nimport IpAddressBinaryString from './IpAddressBinaryString';\r\nimport { IpAddress, SubnetCommand } from '../models';\r\n\r\nfunction SubnetView({subnet} : {subnet : SubnetCommand}) {\r\n\r\n    return <React.Fragment>\r\n        <table className=\"expression subnet-view\">\r\n            <tbody>\r\n                    <SubnetRow ip={subnet.input.ipAddress} descr=\"Address\"/>\r\n                    <SubnetRow ip={getNetworkAddress(subnet.input)} descr=\"Network\"/>\r\n                    <SubnetRow ip={createSubnetMaskIp(subnet.input)} descr=\"Net Mask\"/>\r\n                    <SubnetRow ip={getBroadCastAddress(subnet.input)} descr=\"Broadcast\"/>                  \r\n                    <tr>\r\n                        <td className=\"description soft\">\r\n                            <span>Network Size</span>\r\n                        </td>\r\n                        <td>\r\n                            {subnet.getAdressSpaceSize()}\r\n                        </td>\r\n                    </tr>\r\n            </tbody>\r\n        </table>\r\n        <div>\r\n    </div>\r\n    </React.Fragment>;\r\n}\r\n\r\nfunction SubnetRow(props: { ip: IpAddress, descr: string}) {\r\n\r\n    const {ip, descr} = props;\r\n\r\n    return <tr>\r\n            <td className=\"description soft\">{descr}</td>\r\n                <td className=\"ip\">\r\n                   {ip.toString()}\r\n                </td>\r\n                <td className=\"class-part\">\r\n                    <IpAddressBinaryString ip={ip} />\r\n            </td>\r\n        </tr>;\r\n\r\n    function addDots(bin: string) {\r\n        return chunkifyString(bin, 8).map((s, i) => <BinaryStringView binaryString={s} key={i} />)\r\n    }\r\n}\r\n\r\nexport default SubnetView;","import React from 'react';\r\nimport AppState from '../shell/AppState';\r\nimport { CmdShell, CommandInput } from '../shell/cmd';\r\nimport ErrorResultView from '../shell/components/ErrorResultView';\r\nimport IpAddressView from './components/IpAddressView';\r\nimport ipAddressParser, {ParsingError, ParsedIpObject} from './ip-parser';\r\nimport { IpAddress, IpAddressWithSubnetMask, SubnetCommand } from \"./models\";\r\nimport log from 'loglevel';\r\nimport SubnetView from './components/SubnetView';\r\nimport { createSubnetMaskIp } from './subnet-utils';\r\n\r\nconst networkingAppModule = {\r\n    setup: function(appState: AppState, cmd: CmdShell) {\r\n        \r\n        // Add Ip Address commands\r\n        cmd.command({\r\n            canHandle: (input:string) => ipAddressParser.parse(input) != null,\r\n            handle: function(c: CommandInput) {\r\n                var result = ipAddressParser.parse(c.input);\r\n\r\n                if(result == null)\r\n                    return;\r\n\r\n                if(result instanceof ParsingError) {\r\n                    appState.addCommandResult(c.input, <ErrorResultView errorMessage={result.errorMessage} />);\r\n                    return;\r\n                }\r\n\r\n                if(result instanceof SubnetCommand) {\r\n                    appState.addCommandResult(c.input, <SubnetView subnet={result} />);\r\n                    return;\r\n                }\r\n\r\n                const ipAddresses : IpAddress[] = [];\r\n                \r\n                (result as ParsedIpObject[]).forEach(r => {\r\n                    if(r instanceof IpAddressWithSubnetMask)\r\n                    {\r\n                        ipAddresses.push(r.ipAddress);\r\n                        ipAddresses.push(createSubnetMaskIp(r));\r\n                    }\r\n                    else if(r instanceof IpAddress) {\r\n                        ipAddresses.push(r);\r\n                    }\r\n                });\r\n            \r\n                appState.addCommandResult(c.input, <IpAddressView ipAddresses={ipAddresses} />);\r\n            }\r\n        });\r\n\r\n        log.debug();\r\n    }\r\n}\r\n\r\nexport default networkingAppModule;","import NumericOperand from \"./NumericOperand\";\r\nimport { ExpressionInput, ExpressionInputItem } from \"./expression-interfaces\";\r\n\r\nexport default class ListOfNumbersExpression implements ExpressionInput {\r\n    numbers: NumericOperand[];\r\n    expressionString: string;\r\n    maxBitsLength: number;\r\n\r\n    constructor(expressionString: string, numbers: NumericOperand[]) {\r\n        this.expressionString = expressionString;\r\n        this.numbers = numbers;\r\n        this.maxBitsLength = numbers.map(n => n.lengthInBits).reduce((n , c) => n >= c ? n : c, 0);\r\n    }\r\n\r\n    toString() {\r\n        return this.numbers.map(n => n.value.toString()).join(' ');\r\n    }\r\n}","import { ExpressionInput, ExpressionInputItem } from \"./expression-interfaces\";\r\n\r\nexport default class BitwiseOperationExpression implements ExpressionInput {\r\n    \r\n    expressionString: string;\r\n    expressionItems: ExpressionInputItem[];\r\n\r\n    constructor(expressionString: string, expressions: ExpressionInputItem[]) {\r\n        this.expressionString = expressionString;\r\n        this.expressionItems = expressions;\r\n    }\r\n}","import NumericOperand from './NumericOperand';\r\nimport ExpressionOperand from './ExpressionOperand'\r\nimport ListOfNumbersExpression from './ListOfNumbersExpression';\r\nimport BitwiseOperationExpression from './BitwiseOperationExpression';\r\nimport { ExpressionInput, ExpressionInputItem, NumberBase } from './expression-interfaces';\r\n\r\nexport { default as NumericOperand } from './NumericOperand';\r\nexport { default as ExpressionOperand } from './ExpressionOperand';\r\nexport { default as ListOfNumbersExpression } from './ListOfNumbersExpression';\r\nexport { default as BitwiseOperationExpression } from './BitwiseOperationExpression';\r\n\r\ninterface IExpressionParserFactory {\r\n    canCreate: (input: string) => boolean;\r\n    create: (input: string) => ExpressionInput;\r\n};\r\n\r\nclass ExpressionParser {\r\n    factories: IExpressionParserFactory[];\r\n    constructor() {\r\n        this.factories = [];\r\n    };\r\n\r\n    canParse (input: string) : boolean {\r\n        var trimmed = input.replace(/^\\s+|\\s+$/, '');\r\n        var i = this.factories.length-1;\r\n        for(;i>=0;i--) {\r\n            if(this.factories[i].canCreate(trimmed) === true){\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n\r\n    parse (input: string) : ExpressionInput | null {\r\n        var trimmed = input.replace(/^\\s+|\\s+$/, '');\r\n        var i = 0, l = this.factories.length, factory;\r\n\r\n        for(;i<l;i++) {\r\n            factory = this.factories[i];\r\n\r\n            if(factory.canCreate(trimmed) == true){\r\n                return factory.create(trimmed);\r\n            }\r\n        }\r\n\r\n        return null;\r\n    };\r\n    \r\n    parseOperand (input : string) : NumericOperand {\r\n        return NumericOperand.parse(input);\r\n    };\r\n\r\n    createOperand (number : number, base : NumberBase) : NumericOperand {\r\n        return NumericOperand.create(number, base);\r\n    };\r\n\r\n    addFactory (factory: IExpressionParserFactory) {\r\n      this.factories.push(factory);\r\n    }\r\n}\r\n\r\nclass ListOfNumbersExpressionFactory implements IExpressionParserFactory\r\n{\r\n    regex: RegExp;\r\n\r\n    constructor() {\r\n        this.regex = /^(-?(?:\\d+|0x[\\d,a-f]+|0b[0-1])\\s?)+$/;\r\n    }\r\n\r\n    canCreate (input: string): boolean {\r\n        return this.regex.test(input);\r\n    };\r\n\r\n    create (input : string) : ExpressionInput {\r\n        var matches = this.regex.exec(input) as RegExpExecArray;\r\n        var numbers = [] as NumericOperand[];\r\n        var input = matches.input;\r\n\r\n        input.split(' ').forEach((n: string) => {\r\n            if(n.trim().length > 0) {\r\n                numbers.push(NumericOperand.parse(n.trim()));\r\n            }\r\n        });\r\n\r\n        return new ListOfNumbersExpression(input, numbers);\r\n    }\r\n}\r\n\r\nclass BitwiseOperationExpressionFactory implements IExpressionParserFactory {\r\n    fullRegex: RegExp;\r\n    regex: RegExp;\r\n\r\n    constructor() {\r\n        this.fullRegex = /^((<<|>>|>>>|\\||\\&|\\^)?(~?-?([b,x,a-f,0-9]+)))+$/;\r\n        this.regex = /(<<|>>|>>>|\\||\\&|\\^)?(~?-?(?:[b,x,a-f,0-9]+))/g;\r\n    }\r\n\r\n    canCreate (input: string) : boolean {\r\n        this.fullRegex.lastIndex = 0;\r\n        return this.fullRegex.test(this.normalizeString(input));\r\n    };\r\n\r\n    create (input: string) : ExpressionInput {\r\n        var m, operands : ExpressionInputItem[] = [],\r\n            normalizedString = this.normalizeString(input);\r\n\r\n        while ((m = this.regex.exec(normalizedString)) != null) {\r\n            operands.push(this.parseMatch(m));\r\n        }\r\n\r\n        return new BitwiseOperationExpression(normalizedString, operands)\r\n    };\r\n\r\n    parseMatch (m:any): ExpressionInputItem {\r\n        var input = m[0],\r\n            sign = m[1],\r\n            num = m[2];\r\n\r\n        var parsed = null;\r\n        if(num.indexOf('~') == 0) {\r\n            parsed = new ExpressionOperand(num, NumericOperand.parse(num.substring(1)), '~');\r\n        }\r\n        else {\r\n            parsed = NumericOperand.parse(num);\r\n        }\r\n\r\n        if(sign == null) {\r\n            return parsed as ExpressionOperand;\r\n        } else {\r\n            return new ExpressionOperand(input, parsed as NumericOperand, sign);\r\n        }\r\n    };\r\n\r\n    normalizeString (input : string): string {\r\n        return input.replace(/\\s+/g,'');\r\n    };\r\n}\r\n\r\nvar parser = new ExpressionParser();\r\nparser.addFactory(new ListOfNumbersExpressionFactory());\r\nparser.addFactory(new BitwiseOperationExpressionFactory());\r\n\r\nexport {parser};\r\n","import { NumericOperand, ListOfNumbersExpression, BitwiseOperationExpression, ExpressionOperand } from '../expression';\r\nimport { ExpressionInputItem, ExpressionInput } from '../expression-interfaces';\r\n\r\ntype Config = {\r\n    emphasizeBytes: boolean;\r\n    allowFlipBits: boolean;\r\n}\r\n\r\ntype ExpressionItemModel = {\r\n    sign: string;\r\n    css: string;\r\n    expressionItem: ExpressionInputItem;\r\n    allowFlipBits: boolean;\r\n    label: string;\r\n}\r\n\r\nexport default class BitwiseExpressionViewModel {\r\n\r\n    emphasizeBytes: boolean;\r\n    items: ExpressionItemModel[];\r\n    maxNumberOfBits: number;\r\n    allowFlipBits: boolean;\r\n\r\n    constructor({ emphasizeBytes = false, allowFlipBits = false} : Config) {\r\n        this.emphasizeBytes = emphasizeBytes;\r\n        this.items = [];\r\n        this.maxNumberOfBits = 0;\r\n        this.allowFlipBits = allowFlipBits === true;\r\n    }\r\n\r\n    static buildListOfNumbers(expr : ListOfNumbersExpression, config : Config) {\r\n        var model = new BitwiseExpressionViewModel(config);\r\n        expr.numbers.forEach(op => model.addOperandRow(op));\r\n        model.maxNumberOfBits = BitwiseExpressionViewModel.getNumberOfBits(model.maxNumberOfBits, model.emphasizeBytes);\r\n        return model;\r\n    }\r\n\r\n    static buildMultiple (expr : BitwiseOperationExpression, config : Config) {\r\n\r\n        var op = expr.expressionItems[0],\r\n            i = 0, len = expr.expressionItems.length,\r\n            ex, m = new BitwiseExpressionViewModel(config);\r\n\r\n        var prev : NumericOperand | null = null;\r\n\r\n        for (;i<len;i++) {\r\n            ex = expr.expressionItems[i];\r\n            if(ex instanceof NumericOperand) {\r\n                m.addOperandRow(ex);\r\n                prev = ex;\r\n                continue;\r\n            }\r\n\r\n            var eo = ex as ExpressionOperand;\r\n\r\n            // If it a single NOT expression\r\n            if(eo.isNotExpression) {\r\n                m.addExpressionOperandRow(eo);\r\n                var notResult = eo.evaluate();\r\n                m.addExpressionResultRow(notResult);\r\n                prev = notResult;\r\n            }\r\n            else if(eo.isShiftExpression){\r\n                prev = eo.evaluate(prev as NumericOperand);\r\n                m.addShiftExpressionResultRow(eo, prev);\r\n            } else {\r\n\r\n                prev = eo.evaluate(prev as NumericOperand);\r\n                m.addExpressionOperandRow(eo);\r\n                m.addExpressionResultRow(prev);\r\n            }\r\n        }\r\n\r\n        m.maxNumberOfBits = BitwiseExpressionViewModel.getNumberOfBits(m.maxNumberOfBits, m.emphasizeBytes);\r\n        return m;\r\n    };\r\n\r\n    static buildNot (expression: ExpressionOperand, config : Config) {\r\n        \r\n        var m = new BitwiseExpressionViewModel(config);\r\n        m.addExpressionOperandRow(expression);\r\n        m.addExpressionResultRow(expression.evaluate());\r\n        m.maxNumberOfBits = BitwiseExpressionViewModel.getNumberOfBits(m.maxNumberOfBits, m.emphasizeBytes);\r\n        return m;\r\n    };\r\n\r\n    addOperandRow(operand: NumericOperand) {\r\n        this.maxNumberOfBits = Math.max(operand.getLengthInBits(), this.maxNumberOfBits);\r\n        this.items.push({ \r\n            sign:'', \r\n            css: '',\r\n            expressionItem: operand,\r\n            allowFlipBits: this.allowFlipBits,\r\n            label: ''\r\n        });\r\n    };\r\n\r\n    addExpressionOperandRow(expression: ExpressionOperand) {\r\n        const resultNumber = expression.isNotExpression ? expression.evaluate() : expression.getUnderlyingOperand();\r\n        this.maxNumberOfBits = Math.max(resultNumber.getLengthInBits(), this.maxNumberOfBits);\r\n        \r\n        this.items.push({ \r\n            sign: expression.sign, \r\n            css: '',\r\n            label: this.getLabel(resultNumber),\r\n            expressionItem: expression.operand,\r\n            allowFlipBits: this.allowFlipBits\r\n        });\r\n    };\r\n\r\n    addShiftExpressionResultRow(expression : ExpressionOperand, resultOperand : NumericOperand) {\r\n        this.maxNumberOfBits = Math.max(resultOperand.getLengthInBits(), this.maxNumberOfBits);\r\n        this.items.push({\r\n            sign: expression.sign + expression.operand.toString(),\r\n            css: 'expression-result',\r\n            expressionItem: resultOperand,\r\n            allowFlipBits: false,\r\n            label: ''\r\n        });\r\n    };\r\n\r\n    addExpressionResultRow(operand : NumericOperand) {\r\n        this.maxNumberOfBits = Math.max(operand.getLengthInBits(), this.maxNumberOfBits);\r\n        this.items.push({ \r\n            sign:'=', \r\n            css: 'expression-result',\r\n            expressionItem: operand, \r\n            allowFlipBits: false,\r\n            label: '',\r\n        });\r\n    };\r\n\r\n    getLabel (op: NumericOperand) : string {\r\n        \r\n        if(op.base == 'bin') {\r\n            return op.toString(\"dec\");\r\n        }\r\n\r\n        return op.toString();\r\n    }\r\n\r\n    // TODO: move this method elsewhere. It is also used in LisOfNumbersExpressionView.js\r\n    static getNumberOfBits = function (bits : number, emphasizeBytes : boolean) : number {\r\n        if(emphasizeBytes && bits % 8 != 0) {\r\n             if(bits < 8) {\r\n                 return 8;\r\n             }\r\n\r\n             var n = bits - (bits % 8);\r\n             return n + 8;\r\n        }\r\n\r\n        return bits;\r\n    };\r\n\r\n    static createModel(expr : ExpressionInput, emphasizeBytes: boolean) : BitwiseExpressionViewModel {\r\n        if(expr instanceof ListOfNumbersExpression) {\r\n            return BitwiseExpressionViewModel.buildListOfNumbers(expr, { \r\n                emphasizeBytes: emphasizeBytes, \r\n                allowFlipBits: true \r\n            });\r\n        }\r\n\r\n        if(expr instanceof BitwiseOperationExpression) {\r\n            return BitwiseExpressionViewModel.buildMultiple(expr, { \r\n                emphasizeBytes: emphasizeBytes,\r\n                allowFlipBits: false \r\n            });\r\n        }\r\n\r\n        throw new Error(\"Cannot build BitwiseExpressionViewModel out of expression \" + expr);\r\n    }\r\n}","import React from 'react';\r\nimport formatter from '../../core/formatter';\r\nimport BinaryStringView, { FlipBitEventArg } from '../../core/components/BinaryString';\r\nimport BitwiseExpressionViewModel from './BitwiseExpressionModel';\r\nimport { ExpressionInput, ExpressionInputItem } from '../expression-interfaces';\r\nimport { ExpressionOperand, NumericOperand } from '../expression';\r\n\r\ntype BitwiseOperationExpressionViewProps = {\r\n    expression: ExpressionInput;\r\n    emphasizeBytes: boolean;\r\n}\r\n\r\ntype BitwiseOperationExpressionViewState = {\r\n\r\n}\r\n\r\nexport default class BitwiseOperationExpressionView extends React.Component<BitwiseOperationExpressionViewProps, BitwiseOperationExpressionViewState>  {\r\n    constructor(props: BitwiseOperationExpressionViewProps) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n    render() {\r\n        var rows = this.getRows();\r\n        if(!rows) {\r\n            return null;\r\n        }\r\n\r\n        return <table className=\"expression\">\r\n                    <tbody>\r\n                            {rows}\r\n                    </tbody>\r\n                </table>\r\n    }\r\n\r\n    getRows() : JSX.Element[] | null {\r\n        var model = BitwiseExpressionViewModel.createModel(this.props.expression, this.props.emphasizeBytes);\r\n\r\n        return model.items.map((itm, i) => \r\n            <ExpressionRow \r\n                key={i} \r\n                sign={itm.sign}\r\n                css={itm.css}\r\n                allowFlipBits={itm.allowFlipBits}\r\n                expressionItem={itm.expressionItem}\r\n                emphasizeBytes={this.props.emphasizeBytes} \r\n                maxNumberOfBits={model.maxNumberOfBits} \r\n                onBitFlipped={() => this.onBitFlipped()} />);\r\n    }\r\n\r\n    onBitFlipped() {\r\n        this.forceUpdate();\r\n        //this.setState({d:new Date()});\r\n    }\r\n}\r\n\r\ntype ExpressionRowProps = {\r\n    sign: string, \r\n    css: string, \r\n    maxNumberOfBits: number, \r\n    emphasizeBytes: boolean, \r\n    allowFlipBits: boolean, \r\n    expressionItem: ExpressionInputItem,\r\n    onBitFlipped: any\r\n}\r\n\r\nclass ExpressionRow extends React.Component<ExpressionRowProps> {\r\n    constructor(props: ExpressionRowProps) {\r\n       super(props);\r\n       this.state = { operand: null };\r\n   }\r\n    render() {\r\n        const { sign, css, maxNumberOfBits, emphasizeBytes, allowFlipBits } = this.props;\r\n        \r\n        return <tr className={css}>\r\n                    <td className=\"sign\">{sign}</td>\r\n                    <td className=\"label\">{this.getLabel()}</td>\r\n                    <td className=\"bin\">\r\n                        <BinaryStringView\r\n                            emphasizeBytes={emphasizeBytes} \r\n                            binaryString={formatter.padLeft(this.getBinaryString(), maxNumberOfBits, '0')} \r\n                            allowFlipBits={allowFlipBits} \r\n                            onFlipBit={args => this.flipBit(args)}/>\r\n                    </td>\r\n                    <td className=\"other\">{this.getOther()}</td>\r\n                </tr>;;\r\n    }\r\n\r\n    getBinaryString() : string {            \r\n        return this.props.expressionItem.evaluate().toBinaryString();\r\n    }\r\n\r\n    getLabel(): string {\r\n\r\n        // For expressions like |~2 \r\n        // TODO: find a better way...\r\n        if(this.props.expressionItem.isExpression) {\r\n            const ex = this.props.expressionItem as ExpressionOperand;\r\n            return ex.sign + this.getLabelString(ex.getUnderlyingOperand());\r\n        }\r\n\r\n        return this.getLabelString(this.props.expressionItem.getUnderlyingOperand());         \r\n    }\r\n\r\n    getOther() {\r\n\r\n        if(this.props.expressionItem.isExpression) {\r\n            const ex = this.props.expressionItem as ExpressionOperand;\r\n            const op = ex.evaluate();\r\n\r\n            return op.toString();\r\n        }\r\n\r\n        return this.props.expressionItem.evaluate().toOtherKindString();\r\n    }\r\n\r\n    getLabelString (op: NumericOperand) : string {\r\n        return op.toString(op.base == 'bin' ? 'dec' : op.base);\r\n    }\r\n\r\n     flipBit(args: FlipBitEventArg) {    \r\n\r\n        const op  = this.props.expressionItem.getUnderlyingOperand();\r\n        const { index, binaryString } = args;\r\n\r\n        var arr = binaryString.split('');\r\n        arr[index] = arr[index] == '0' ? '1' : '0';\r\n        var bin = arr.join('');\r\n\r\n        var newValue = parseInt(bin, 2);\r\n        op.setValue(newValue);\r\n\r\n        this.props.onBitFlipped();\r\n    }\r\n}","import React from 'react';\r\nimport AppState from '../shell/AppState';\r\nimport { CmdShell, CommandInput } from '../shell/cmd';\r\nimport BitwiseOperationExpressionView from './components/BitwiseOperationExpressionView';\r\nimport {parser} from './expression';\r\n\r\nconst expressionAppModule = {\r\n    setup: function(appState: AppState, cmd: CmdShell) {\r\n        \r\n          // Bitwise Expressions\r\n          cmd.command({\r\n            canHandle: (input:string) => parser.canParse(input),\r\n            handle: function(c: CommandInput) {\r\n                var expr = parser.parse(c.input);\r\n                appState.addCommandResult(c.input, <BitwiseOperationExpressionView expression={expr!} emphasizeBytes={appState.emphasizeBytes} />);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport default expressionAppModule;","import React from 'react'\r\n\r\nfunction AboutResultView() {\r\n\r\n        return   <div className=\"aboutTpl\" data-result-type=\"help\">\r\n                        <p> Created by <a href=\"http://boryslevytskyi.github.io/\">Borys Levytskyi</a>. Please give it a like if BitwiseCmd has helped you in your work.</p>\r\n                        <p>If you have an idea, suggestion or you've spotted a bug here, please send it to <a href=\"mailto:&#098;&#105;&#116;&#119;&#105;&#115;&#101;&#099;&#109;&#100;&#064;&#103;&#109;&#097;&#105;&#108;&#046;&#099;&#111;&#109;?subject=Feedback\">&#098;&#105;&#116;&#119;&#105;&#115;&#101;&#099;&#109;&#100;&#064;&#103;&#109;&#097;&#105;&#108;&#046;&#099;&#111;&#109;</a> or tweet on <a href=\"http://twitter.com/BitwiseCmd\">@BitwiseCmd</a>. Your feedback is greatly appreciated.</p>\r\n                        <p><a href=\"https://github.com/BorisLevitskiy/BitwiseCmd\">Project on <strong>GitHub</strong></a></p>\r\n                    </div>;\r\n};\r\n\r\nexport default AboutResultView;","import React from 'react';\r\nimport cmd from '../../shell/cmd';\r\n\r\ntype CommandLinkProps = {\r\n    command?:string;\r\n    text:string;\r\n}\r\n\r\nfunction CommandLink(props: CommandLinkProps) {\r\n    return <a href=\"javascript:void(0)\" onClick={e => cmd.execute(props.command || props.text)}>{props.text}</a>\r\n}\r\n\r\nexport default CommandLink;","import React from 'react';\r\nimport CommandLink from '../../core/components/CommandLink';\r\nimport './HelpResultView.css';\r\n\r\nfunction HelpResultView() {\r\n    \r\n        return <div className=\"help helpResultTpl\">\r\n                        <div className=\"panel-container\">\r\n                            <div className=\"left-panel\">\r\n                                <div className=\"section\">\r\n                                    <strong className=\"section-title soft\">Bitiwse Calculation Commands</strong>\r\n                                <ul>\r\n                                    <li><code><CommandLink text=\"23 | 34\" /></code> — type bitwise expression to see result in binary (only positive integers are supported now)</li>\r\n                                    <li><code><CommandLink text=\"23 34\" /></code> — type one or more numbers to see their binary representations</li>\r\n                                </ul>\r\n                                </div>\r\n                                <div className=\"section\">\r\n                                    <strong className=\"section-title  soft\">IP Address Commands</strong>\r\n                                <ul>\r\n                                    <li><code><CommandLink text=\"127.0.0.1\" /></code> — enter single or multiple ip addresses (separated by space) to see their binary represenation</li>\r\n                                    <li><code><CommandLink text=\"192.168.0.1/8\" /></code> — subnet mask notiations are support as well</li>\r\n                                    <li><code><CommandLink text=\"subnet 192.168.24.1/14\" /></code> — display information about subnet (network address, broadcast address, etc.)</li>\r\n                                </ul>\r\n                                </div>\r\n                                <div className=\"section\">\r\n                                    <strong className=\"section-title  soft\">Color Theme Commands</strong>\r\n                                <ul>\r\n                                    <li><code><CommandLink text=\"light\" /></code> — set Light color theme</li>\r\n                                    <li><code><CommandLink text=\"dark\" /></code> — set Dark color theme</li>\r\n                                    <li><code><CommandLink text=\"midnight\" /></code> — set Midnight color theme</li>\r\n                                </ul>\r\n                                </div>\r\n                                <div className=\"section\">\r\n                                    <strong className=\"section-title  soft\">Other Commands</strong>\r\n                                <ul>\r\n                                    <li><code><CommandLink text=\"clear\" /></code> — clear output pane</li>\r\n                                    <li><code><CommandLink text=\"help\" /></code> — display this help</li>\r\n                                    <li><code><CommandLink text=\"whatsnew\" /></code> — display changelog</li>\r\n                                    <li><code><CommandLink text=\"em\" /></code> — turn On/Off Emphasize Bytes</li>\r\n                                    <li><code><CommandLink text=\"about\" /></code> — about the app</li>\r\n                                    <li><code><CommandLink text=\"guid\" /></code> — generate <a href=\"https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_.28random.29\">v4</a> GUID</li>\r\n                                </ul>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"right-panel\">\r\n                                <div className=\"section\">\r\n                                    <strong className=\"section-title soft\">Supported Bitwise Operations</strong><br/>\r\n                                    <small>\r\n                                        <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators\">\r\n                                            as implemented in JavaScript engine of your browser\r\n                                        </a>\r\n                                    </small>\r\n                                    <ul>\r\n                                        <li><code>&amp;</code> — bitwise AND</li>\r\n                                        <li><code>|</code> — bitwise inclusive OR</li>\r\n                                        <li><code>^</code> — bitwise exclusive XOR</li>\r\n                                        <li><code>~</code> — bitwise NOT</li>\r\n                                        <li><code>&lt;&lt;</code> — left shift</li>\r\n                                        <li><code>&gt;&gt;</code> — sign propagating right shift</li>\r\n                                        <li><code>&gt;&gt;&gt;</code> — zero-fill right shift</li>\r\n                                    </ul>\r\n                                </div>\r\n                                <div className=\"section\">\r\n                                    <strong className=\"section-title  soft\">Tip</strong>\r\n                                    <p>\r\n                                        You can click on bits to flip them in number inputs (e.g. <CommandLink text=\"2 4\" />) or IP addresses (e.g. <CommandLink text=\"192.168.0.0/8\"/>)\r\n                                    </p>\r\n                                </div>\r\n                          </div>\r\n                     </div>\r\n                 </div>;\r\n}\r\n\r\nexport default HelpResultView;\r\n","import React from 'react';\r\n\r\nfunction TextResultView(props : { text: string }) {\r\n    return <p>{props.text}</p>;\r\n}\r\n\r\nexport default TextResultView;","import React from 'react';\r\nimport CommandLink from '../../core/components/CommandLink';\r\nimport './WhatsNewResultView.css';\r\n\r\nfunction WhatsnewResultView() {\r\n    \r\n        return <div className=\"changelog\">\r\n                    <h3>Changelog</h3>\r\n                    <div className=\"item item-new\">\r\n                        <p><span className=\"soft date\">Jun 16th, 2021</span> <br/>\r\n                            Added support of <code>subnet</code> command to display information about subnet ip adress such. Try it out: <CommandLink text=\"subnet 192.168.24.1/14\" />\r\n                        </p>                       \r\n                    </div>\r\n                    <div className=\"item\">\r\n                        <p><span className=\"soft date\">Jun 14th, 2021</span> <br/>\r\n                        Added support of ip addresses and subnet masks notatioans. Try them out: \r\n                        </p>\r\n                        <ul>\r\n                            <li>Single IP address <CommandLink text=\"127.0.0.1\" /></li>\r\n                            <li>Multiple IP addresses and subnet mask notations <CommandLink text=\"127.0.0.1 192.168.0.0/24\" /></li>\r\n                        </ul>\r\n                        \r\n                    </div>\r\n                    <div className=\"item\">\r\n                        <p><span className=\"soft date\">Jun 6th, 2017</span> <br/>\r\n                        Added <code><CommandLink text=\"guid\" /></code> command. Use it for generating v4 GUIDs </p>\r\n                    </div>\r\n                    <div className=\"item\">\r\n                        <p><span className=\"soft date\">May 27th, 2017</span> <br/>\r\n                        Added support of binary number notation (e.g. <code><CommandLink text=\"0b10101\" /></code>). </p>\r\n                    </div>  \r\n                    <div className=\"item\">\r\n                        <p><span className=\"soft\">May 20th, 2017</span> <br/>\r\n                        New <CommandLink text=\"Midnight\" /> theme added. </p>\r\n                    </div>  \r\n                    <div className=\"item\">\r\n                        <p><span className=\"soft\">May 16th, 2017</span> <br/>\r\n                        Complete rewrite using React. Old implementation is available at <a href=\"http://bitwisecmd.com/old\">http://bitwisecmd.com/old</a>. Please let me know if you have problems with this release by <a href=\"https://github.com/BorysLevytskyi/BitwiseCmd/issues\">creating issue</a> in Github Repo.</p>\r\n                    </div>  \r\n              </div>;\r\n}\r\n\r\nexport default WhatsnewResultView;","import log from 'loglevel';\r\n\r\nconst APP_VERSION = 6;\r\n\r\nexport type PersistedAppData = {\r\n    emphasizeBytes: boolean;\r\n    uiTheme: string;\r\n    version: number;\r\n    debugMode: boolean | null;\r\n}\r\n\r\nexport type CommandResultView = {\r\n    key: number,\r\n    input: string,\r\n    view: JSX.Element\r\n};\r\n\r\nexport type AppStateChangeHandler = (state: AppState) => void;\r\n\r\nexport default class AppState {\r\n\r\n    version: number = APP_VERSION;\r\n    emphasizeBytes: boolean;\r\n    debugMode: boolean = false;\r\n    uiTheme: string;\r\n    changeHandlers: AppStateChangeHandler[];\r\n    commandResults: CommandResultView[];\r\n    persistedVersion: number;\r\n    wasOldVersion: boolean;\r\n    env: string;    \r\n\r\n    constructor(persistData : PersistedAppData, env: string) {\r\n        this.commandResults = [];\r\n        this.changeHandlers = [];\r\n        this.uiTheme = persistData.uiTheme || 'midnight';\r\n        this.env = env;\r\n\r\n        this.emphasizeBytes = persistData.emphasizeBytes || true;\r\n        this.persistedVersion = persistData.version || 0.1;\r\n        this.wasOldVersion = persistData.version != null && this.version > this.persistedVersion;\r\n        this.debugMode = env !== 'prod' || persistData.debugMode === true;\r\n    }\r\n\r\n    addCommandResult(input : string, view : JSX.Element) {\r\n        const key = generateKey();\r\n        this.commandResults.unshift({key, input, view});\r\n        log.debug(`command result added: ${input}`);\r\n        this.triggerChanged();\r\n    }\r\n\r\n    clearCommandResults() {\r\n        this.commandResults = [];\r\n        this.triggerChanged();\r\n    }\r\n\r\n    toggleEmphasizeBytes() {\r\n        this.emphasizeBytes = !this.emphasizeBytes;\r\n        this.triggerChanged();\r\n    }\r\n\r\n    onChange(handler : AppStateChangeHandler) {\r\n        this.changeHandlers.push(handler);\r\n    }\r\n\r\n    triggerChanged() {\r\n        this.changeHandlers.forEach(h => h(this));\r\n    }\r\n\r\n    setUiTheme(theme: string) {\r\n         this.uiTheme = theme;\r\n         this.triggerChanged();    \r\n    }\r\n\r\n    toggleDebugMode() {\r\n        this.debugMode = !this.debugMode;\r\n        this.triggerChanged();\r\n    }\r\n\r\n    getPersistData() : PersistedAppData {\r\n        return {\r\n            emphasizeBytes: this.emphasizeBytes,\r\n            uiTheme: this.uiTheme,\r\n            version: this.version,\r\n            debugMode: this.debugMode\r\n        }\r\n    }\r\n};\r\n\r\nfunction generateKey() : number {\r\n    return Math.ceil(Math.random()*10000000) ^ Date.now(); // Because why the hell not...\r\n}","import AppState, { PersistedAppData } from \"./AppState\";\r\n\r\nconst storeKey = 'AppState';\r\n\r\nexport default {\r\n    getPersistedData() : PersistedAppData {\r\n        var json = window.localStorage.getItem(storeKey);\r\n        if(!json) {\r\n            return {} as PersistedAppData;\r\n        }\r\n\r\n        try {\r\n            return JSON.parse(json) as PersistedAppData;\r\n        }\r\n        catch(ex) {\r\n            console.error('Failed to parse AppState json. Json Value: \\n' + json, ex);\r\n            return {} as PersistedAppData;;\r\n        }\r\n    },\r\n\r\n    watch (appState: AppState) {\r\n        appState.onChange(() => this.persistData(appState));\r\n    },\r\n\r\n    persistData(appState: AppState) {\r\n        localStorage.setItem(storeKey, JSON.stringify(appState.getPersistData()));\r\n    }\r\n}","import log from 'loglevel';\r\nimport hash from '../core/hash';\r\nimport AppState from './AppState';\r\nimport { Env } from './interfaces';\r\nimport appStateStore from './appStateStore';\r\nimport CommandLink from '../core/components/CommandLink';\r\n\r\nexport type StartupAppData = {\r\n    appState: AppState,\r\n    startupCommands: string[]\r\n}\r\n\r\nconst STARTUP_COMMAND_KEY = 'StartupCommand';\r\nconst DEFAULT_COMMANDS = ['help', '127.0.0.1 192.168.0.0/8', '1|2&6','4 0b1000000 0x80'];\r\n\r\nfunction bootstrapAppData() : StartupAppData {\r\n    const env = window.location.host === \"bitwisecmd.com\" ? 'prod' : 'stage';\r\n\r\n    setupLogger(env);\r\n\r\n    const appState = createAppState(env);\r\n    const startupCommands = getStartupCommands(appState);\r\n\r\n    return {\r\n        appState,\r\n        startupCommands\r\n    }\r\n}\r\n\r\n\r\nfunction createAppState(env:string) {\r\n    var stateData = appStateStore.getPersistedData();\r\n    const appState = new AppState(stateData, env);\r\n    appStateStore.watch(appState);\r\n    log.debug(\"appState initialized\", appState);\r\n    return appState;\r\n}\r\n\r\nfunction getStartupCommands(appState : AppState) : string[] {\r\n    var hashArgs = hash.getArgs(window.location.hash);\r\n\r\n    var startupCommands = loadStoredCommands();\r\n\r\n    if(startupCommands.length == 0) \r\n        startupCommands = DEFAULT_COMMANDS;\r\n\r\n    if(appState.wasOldVersion) {\r\n        startupCommands = [\"whatsnew\"];\r\n    }\r\n\r\n    if(hashArgs.length > 0) {\r\n        startupCommands = hashArgs;\r\n    }\r\n\r\n    log.debug('Executing startup commands', startupCommands);\r\n\r\n    return startupCommands;\r\n}\r\n\r\nfunction loadStoredCommands() : string[] {\r\n    const json = localStorage.getItem(STARTUP_COMMAND_KEY);\r\n    return json != null ? [json] : []; \r\n}\r\n\r\nfunction setupLogger(env: Env) {\r\n    if(env != 'prod'){\r\n        log.setLevel(\"debug\");\r\n        log.debug(`Log level is set to debug. Env: ${env}`)\r\n    } else {\r\n        log.setLevel(\"warn\");\r\n    }\r\n}\r\n\r\nexport {STARTUP_COMMAND_KEY};\r\nexport default bootstrapAppData;","import React from 'react';\r\nimport uuid from 'uuid';\r\nimport { sendAnalyticsEvent } from './analytics';\r\nimport AppState from './AppState';\r\nimport { CmdShell, CommandInput } from './cmd';\r\nimport AboutResultView from './components/AboutResultView';\r\nimport ErrorResultView from './components/ErrorResultView';\r\nimport HelpResultView from './components/HelpResultView';\r\nimport TextResultView from './components/TextResultView';\r\nimport WhatsnewResultView from './components/WhatsNewResultView';\r\nimport {STARTUP_COMMAND_KEY} from './startup';\r\n\r\nconst shellModule = {\r\n    setup: function(appState: AppState, cmd: CmdShell) {\r\n        \r\n        cmd.debugMode = appState.debugMode;\r\n        appState.onChange(() => cmd.debugMode = appState.debugMode);\r\n        \r\n        cmd.command(\"help\", (c: CommandInput) => appState.addCommandResult(c.input, <HelpResultView />));\r\n        cmd.command(\"clear\", () => appState.clearCommandResults());\r\n        cmd.command(\"em\", () => appState.toggleEmphasizeBytes());\r\n        cmd.command(\"dark\", () => appState.setUiTheme('dark'));\r\n        cmd.command(\"light\", () => appState.setUiTheme('light'));\r\n        cmd.command(\"midnight\", () => appState.setUiTheme('midnight'));\r\n        cmd.command(\"about\", (c: CommandInput) => appState.addCommandResult(c.input, <AboutResultView />));\r\n        cmd.command(\"whatsnew\", (c: CommandInput) => appState.addCommandResult(c.input, <WhatsnewResultView />));\r\n        cmd.command(\"guid\", (c: CommandInput) => appState.addCommandResult(c.input, <TextResultView text={uuid()} />));\r\n        cmd.command(\"-notrack\", () => {});\r\n        cmd.command(\"-debug\", (c: CommandInput) => {\r\n            appState.toggleDebugMode();\r\n            appState.addCommandResult(c.input, <TextResultView text={`Debug Mode: ${appState.debugMode}`}/>);\r\n        }); \r\n\r\n        cmd.command(\"track\", (c:CommandInput) => {\r\n            sendAnalyticsEvent({\r\n                eventCategory: 'General',\r\n                eventAction: 'AnalyticsTest'\r\n            });\r\n        });\r\n\r\n        if(appState.env !== 'prod') {\r\n            \r\n            // Default command for development purposes\r\n            cmd.command({\r\n                canHandle: (s: string) => s.indexOf('default') === 0,\r\n                handle: (s: CommandInput) => {\r\n\r\n                    const executeCommand = (c: string) => {\r\n                        console.log(c);\r\n\r\n                        if(c.length === 0) {\r\n                            return \"Default comand: \" + localStorage.getItem(STARTUP_COMMAND_KEY);\r\n                        }\r\n                        else if(c === 'clear') {\r\n                            localStorage.removeItem(STARTUP_COMMAND_KEY);\r\n                            return \"Default startup command cleared\";\r\n                        }\r\n                        \r\n                        localStorage.setItem(STARTUP_COMMAND_KEY, c);\r\n                        return `Default startup command saved: ${c}`;\r\n                    };\r\n\r\n                    const command = s.input.substring(7).trim();\r\n                    const result = executeCommand(command);\r\n                    appState.addCommandResult(s.input, <TextResultView text={result} />);\r\n                } \r\n            });\r\n        };\r\n\r\n        cmd.onError((input: string, err: Error) => appState.addCommandResult(input, <ErrorResultView errorMessage={err.toString()} />));\r\n    }\r\n}\r\n\r\nexport default shellModule;","import log from 'loglevel';\r\n\r\nexport type AnalyticsEvent = {\r\n    eventCategory: string,\r\n    eventAction: string,\r\n    eventLabel?: string\r\n};\r\n\r\nexport type AnalyticsHandler = (evt: AnalyticsEvent) => boolean;\r\n\r\nfunction sendAnalyticsEvent(evt : AnalyticsEvent) {\r\n    const handler = (window as any).bitwiseCmdAnalyticsHandler;\r\n    if(handler == null) {\r\n        log.debug('ERROR!!!: Analytics event was not sent. Handler not found');\r\n    }\r\n\r\n    const delivered = (handler as AnalyticsHandler)(evt);\r\n    log.debug('Analytics event sent. Delivery response: ' + delivered, evt)\r\n}\r\n\r\nexport {sendAnalyticsEvent};\r\n","import React from 'react';\r\n\r\nfunction UnknownInputResultView(props : {input:string}) {\r\n    \r\n    return <div className=\"result\">\r\n                        <div className=\"error\">¯\\_(ツ)_/¯ Sorry, i don&prime;t know what <strong>{props.input}</strong> is</div>\r\n                </div>;\r\n}\r\n\r\nexport default UnknownInputResultView;\r\n","import cmd, { CommandInput } from './shell/cmd';\r\nimport AppRoot from './shell/components/AppRoot';\r\nimport log from 'loglevel';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport networkingAppModule from './networking/module';\r\nimport expressionAppModule from './expression/module';\r\nimport shellModule from './shell/module';\r\nimport bootstrapAppData from './shell/startup';\r\nimport UnknownInputResultView from './shell/components/UnknownInputResultView';\r\n\r\nconst appData = bootstrapAppData();\r\n\r\ninitializeModules();\r\n\r\nvar root = <AppRoot appState={appData.appState} />;\r\nReactDOM.render(root, document.getElementById('root'));\r\n\r\nexecuteStartupCommands();\r\n\r\nlog.debug(\"started\");\r\n\r\nfunction executeStartupCommands() {\r\n    log.debug(\"Executing startup commands\", appData.startupCommands);\r\n    appData.startupCommands.forEach(cmd.execute.bind(cmd));\r\n}\r\n\r\nfunction  initializeModules() {\r\n    shellModule.setup(appData.appState, cmd);\r\n    networkingAppModule.setup(appData.appState, cmd);\r\n    expressionAppModule.setup(appData.appState, cmd);\r\n\r\n    // Last command handler reports that input is unknown\r\n    cmd.command({\r\n        canHandle: () => true,\r\n        handle: (c: CommandInput) => appData.appState.addCommandResult(c.input, <UnknownInputResultView input={c.input}/>)\r\n    });\r\n}\r\n\r\n\r\n\r\n"],"sourceRoot":""}