{"version":3,"sources":["core/AppState.ts","core/appStateStore.ts","core/is.ts","core/cmd.ts","models/CommandResult.ts","models/HelpResult.ts","models/AboutResult.ts","models/UnknownCommandResult.ts","models/ExpressionResult.ts","models/ErrorResult.ts","models/WhatsnewResult.ts","models/StringResult.ts","expression/ListOfNumbersExpression.ts","expression/BitwiseOperationExpression.ts","expression/expression.ts","commands.ts","components/InputBox.tsx","components/CommandLink.tsx","components/results/HelpResultView.tsx","components/results/AboutResultView.tsx","core/formatter.ts","components/results/BinaryString.tsx","components/results/expressions/BitwiseExpressionModel.ts","components/results/expressions/BitwiseOperationExpressionView.tsx","components/results/WhatsNewResultView.tsx","components/DisplayResultView.tsx","components/Indicators.tsx","AppRoot.tsx","core/hash.ts","index.tsx","expression/numberParser.ts","expression/NumericOperand.ts","expression/ExpressionOperand.ts"],"names":["AppState","persistData","env","Object","classCallCheck","this","version","emphasizeBytes","debugMode","uiTheme","handlers","commandResults","persistedVersion","wasOldVersion","result","unshift","log","debug","triggerChanged","handler","push","_this","forEach","h","theme","appStateStore","getPersistedData","json","window","localStorage","getItem","JSON","parse","ex","console","error","watch","appState","onChange","setItem","stringify","getPersistData","is","obj","Array","core_cmd","CmdShell","errorHandler","createClass","key","value","rawInput","concat","input","trim","toLowerCase","findHandler","invokeHandler","e","handleError","Error","cmd","createHandler","canHandle","handle","warn","arguments","filter","cmdResult","err","CommandResult","inputHash","encodeHash","encodeURI","replace","HelpResult","possibleConstructorReturn","getPrototypeOf","call","AboutResult","UnknownCommandResult","message","ExpressionResult","expression","ErrorResult","WhatsnewResult","StringResult","ListOfNumbersExpression","expressionString","numbers","maxBitsLength","map","n","lengthInBits","reduce","c","toString","join","BitwiseOperationExpression","expressions","expressionItems","ExpressionParser","factories","trimmed","i","length","canCreate","factory","l","create","NumericOperand","number","base","ListOfNumbersExpressionFactory","regex","test","matches","exec","split","BitwiseOperationExpressionFactory","fullRegex","lastIndex","normalizeString","m","operands","normalizedString","parseMatch","sign","num","parsed","indexOf","ExpressionOperand","substring","parser","addFactory","commands","command","addCommandResult","clearCommandResults","toggleEmphasizeBytes","setUiTheme","WahtsnewResult","uuid","toggleDebugMode","canParse","expr","onError","InputBox","props","history","historyIndex","nameInput","focus","_this2","react_default","a","createElement","id","type","ref","onKeyUp","onKeyDown","className","placeholder","target","keyCode","commandInput","onCommandEntered","args","newIndex","preventDefault","React","Component","CommandLink","href","onClick","execute","text","HelpResultView","style","overflow","float","marginRight","components_CommandLink","AboutResultView","data-result-type","formatter","str","symbol","sb","prototype","slice","BinaryStringView","getChildren","index","allowFlipBits","onFlipBit","binaryString","$event","bits","createBits","splitIntoBytes","bitChars","css","onBitClick","bytes","splice","BitwiseExpressionViewModel","_ref","_ref$emphasizeBytes","_ref$allowFlipBits","items","maxNumberOfBits","operand","Math","max","getLengthInBits","expressionItem","label","resultNumber","isNotExpression","evaluate","getUnderlyingOperand","getLabel","resultOperand","op","config","model","addOperandRow","getNumberOfBits","len","prev","eo","addExpressionOperandRow","notResult","addExpressionResultRow","isShiftExpression","addShiftExpressionResultRow","buildListOfNumbers","buildMultiple","BitwiseOperationExpressionView","state","rows","getRows","createModel","itm","BitwiseOperationExpressionView_ExpressionRow","onBitFlipped","forceUpdate","ExpressionRow","_this3","_this4","_this$props","BinaryString_BinaryStringView","getBinaryString","flipBit","getOther","toBinaryString","isExpression","getLabelString","toOtherKindString","arr","bin","newValue","parseInt","setValue","WhatsnewResultView","DisplayResult","content","title","location","pathname","findResultComponent","results_HelpResultView","results_AboutResultView","BitwiseOperationExpressionView_BitwiseOperationExpressionView","WhatsNewResultView","Indicators","list","AppRoot","refresh","setState","r","DisplayResultView_DisplayResult","components_Indicators","InputBox_InputBox","data-cmd","getIndicator","getResultViews","hash","decodeHash","hashValue","decodeURI","getArgs","decodedHash","values","v","splitHashList","host","setLevel","stateData","createAppState","hashArgs","startupCommands","bind","executeStartupCommands","root","AppRoot_AppRoot","ReactDOM","render","document","getElementById","knownParsers","radix","prefix","numberParser","NumberParser","parsers","p","applyParser","match","globalId","getBitLength","floor","kind","toBaseString","getOtherBase","hexVal","abs","hex","substr","D_MyStuff_Pet_BitwiseCmd_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","evaluatedOperand","eval"],"mappings":"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","file":"static/js/main.ff2608fb.chunk.js","sourcesContent":["import log from 'loglevel';\r\n\r\nexport type PersistedAppData = {\r\n    emphasizeBytes: boolean;\r\n    uiTheme: string;\r\n    version: number;\r\n    debugMode: boolean | null;\r\n}\r\n\r\nexport type AppStateChangeHandler = (state: AppState) => void;\r\n\r\nexport default class AppState {\r\n\r\n    version: number = 4;\r\n    emphasizeBytes: boolean;\r\n    debugMode: boolean = false;\r\n    uiTheme: string;\r\n    handlers: AppStateChangeHandler[];\r\n    commandResults: any[];\r\n    persistedVersion: number;\r\n    wasOldVersion: boolean;\r\n    env: string;    \r\n\r\n    constructor(persistData : PersistedAppData, env: string) {\r\n        this.commandResults = [];\r\n        this.handlers = [];\r\n        this.uiTheme = persistData.uiTheme || 'midnight';\r\n        this.env = env;\r\n\r\n        this.emphasizeBytes = persistData.emphasizeBytes || true;\r\n        this.persistedVersion = persistData.version || 0.1;\r\n        this.wasOldVersion = persistData.version != null && this.version > this.persistedVersion;\r\n        this.debugMode = env !== 'prod' || persistData.debugMode === true;\r\n    }\r\n\r\n    addCommandResult(result : any) {\r\n        this.commandResults.unshift(result);\r\n        log.debug(\"result added\", result);\r\n        this.triggerChanged();\r\n    }\r\n\r\n    clearCommandResults() {\r\n        this.commandResults = [];\r\n        this.triggerChanged();\r\n    }\r\n\r\n    toggleEmphasizeBytes() {\r\n        this.emphasizeBytes = !this.emphasizeBytes;\r\n        this.triggerChanged();\r\n    }\r\n\r\n    onChange(handler : AppStateChangeHandler) {\r\n        this.handlers.push(handler);\r\n    }\r\n\r\n    triggerChanged() {\r\n        this.handlers.forEach(h => h(this));\r\n    }\r\n\r\n    setUiTheme(theme: string) {\r\n         this.uiTheme = theme;\r\n         this.triggerChanged();    \r\n    }\r\n\r\n    toggleDebugMode() {\r\n        this.debugMode = !this.debugMode;\r\n        this.triggerChanged();\r\n    }\r\n\r\n    getPersistData() : PersistedAppData {\r\n        return {\r\n            emphasizeBytes: this.emphasizeBytes,\r\n            uiTheme: this.uiTheme,\r\n            version: this.version,\r\n            debugMode: this.debugMode\r\n        }\r\n    }\r\n};","import AppState, { PersistedAppData } from \"./AppState\";\r\n\r\nconst storeKey = 'AppState';\r\n\r\nexport default {\r\n    getPersistedData() : PersistedAppData {\r\n        var json = window.localStorage.getItem(storeKey);\r\n        if(!json) {\r\n            return {} as PersistedAppData;\r\n        }\r\n\r\n        try {\r\n            return JSON.parse(json) as PersistedAppData;\r\n        }\r\n        catch(ex) {\r\n            console.error('Failed to parse AppState json. Json Value: \\n' + json, ex);\r\n            return {} as PersistedAppData;;\r\n        }\r\n    },\r\n\r\n    watch (appState: AppState) {\r\n        appState.onChange(() => this.persistData(appState));\r\n    },\r\n\r\n    persistData(appState: AppState) {\r\n        localStorage.setItem(storeKey, JSON.stringify(appState.getPersistData()));\r\n    }\r\n}","export default {\r\n    plainObject: function(obj : any) : boolean {\r\n        return typeof obj == \"object\" && !(obj instanceof Array) && obj instanceof Object;\r\n    },\r\n\r\n    aFunction: function(obj : any) : boolean {\r\n        return typeof obj == \"function\";\r\n    },\r\n\r\n    string: function(obj : any) : boolean {\r\n        return typeof obj == \"string\";\r\n    },\r\n\r\n    array: function(obj : any) : boolean  {\r\n        return obj instanceof Array;\r\n    },\r\n\r\n    number: function(obj : any) : boolean  {\r\n        return typeof obj == \"number\" && !isNaN(obj)\r\n    }\r\n}","import is from './is';\r\nimport log from 'loglevel';\r\n\r\nexport type CommandInput = {\r\n    input: string;\r\n}\r\n\r\ntype HandleFunction = (input: CommandInput) => void;\r\ntype InputErrorHandler = (input:string, error: Error) => void;\r\n\r\nexport interface ICommandHandler {\r\n    canHandle (input:string) : boolean;\r\n    handle: HandleFunction;\r\n}\r\n\r\nexport class CmdShell {\r\n    debugMode: boolean;\r\n    handlers: ICommandHandler[];\r\n    errorHandler: InputErrorHandler | null; \r\n    constructor() {\r\n        this.handlers = [];\r\n        this.debugMode = false;\r\n        this.errorHandler = null;\r\n    };\r\n\r\n    execute (rawInput: string) {\r\n\r\n        log.debug(`Executing command: ${rawInput}`)\r\n\r\n        var input = rawInput.trim().toLowerCase();\r\n        var handler = this.findHandler(input);\r\n\r\n        if(handler != null) {\r\n            if(this.debugMode) {\r\n                this.invokeHandler(input, handler);\r\n            } else {\r\n                try {\r\n                    this.invokeHandler(input, handler);\r\n                } catch (e) {\r\n                     this.handleError(input, e);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            log.debug(`Handled is not found for command: ${rawInput}`)\r\n            this.handleError(input, new Error(\"Unsupported expression: \" + input.trim()));\r\n        }\r\n    };\r\n\r\n    onError(h: InputErrorHandler) {\r\n        this.errorHandler = h;\r\n    }\r\n   \r\n    command (cmd : string | object, handler? : any) {\r\n        var h = this.createHandler(cmd, handler);\r\n        if(h == null){\r\n            console.warn('unexpected set of arguments: ', JSON.stringify(arguments));\r\n            return;\r\n        }\r\n\r\n        if(!is.aFunction(h.canHandle)) {\r\n            console.warn('handler is missing \"canHandle\" function. registration denied.');\r\n            return;\r\n        }\r\n\r\n        if(!is.aFunction(h.handle)) {\r\n            console.warn('handler is missing \"handle\" function. registration denied.');\r\n            return;\r\n        }\r\n\r\n        this.handlers.push(h);\r\n    };\r\n\r\n    createHandler (cmd : string | object, handler : HandleFunction) : ICommandHandler | null {\r\n        if(is.plainObject(cmd)) {\r\n            return cmd as ICommandHandler;\r\n        }\r\n\r\n        if(is.string(cmd)) {\r\n            return { canHandle: function (input) { return input === cmd; }, handle: handler };\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    findHandler (input: string) : ICommandHandler | null {\r\n        return this.handlers.filter(h => h.canHandle(input))[0];\r\n    };\r\n\r\n    invokeHandler (input : string, handler : ICommandHandler) {\r\n\r\n        var cmdResult = handler.handle({ input: input});\r\n        if(cmdResult != null) {\r\n            log.debug(cmdResult);\r\n        }\r\n    };\r\n\r\n    handleError (input: string, err: Error) {\r\n        if(this.debugMode)\r\n            console.error(input, err);\r\n\r\n        if(this.errorHandler != null)\r\n            this.errorHandler(input, err);\r\n    }\r\n}\r\n\r\nexport default new CmdShell();","export default class CommandResult {\r\n    input: string;\r\n    inputHash: string;\r\n\r\n    constructor(input: string) {\r\n        this.input = input;\r\n        this.inputHash = this.encodeHash(input);\r\n    }\r\n\r\n    encodeHash (input: string) {\r\n        return encodeURI(input.trim().replace(/\\s/g,','));\r\n    }\r\n}","import CommandResult from './CommandResult';\r\n\r\nexport default class HelpResult extends CommandResult {\r\n    constructor(input: string) {\r\n        super(input);\r\n    }\r\n}","import CommandResult from './CommandResult';\r\n\r\nexport default class AboutResult extends CommandResult {\r\n    constructor(input:string) {\r\n        super(input);\r\n    }\r\n}","import CommandResult from './CommandResult';\r\n\r\nexport default class UnknownCommandResult extends CommandResult {\r\n    message:string;\r\n    constructor(input : string) {\r\n        super(input);\r\n        this.message = `Sorry, i don''t know what ${input} is :(`;\r\n    }\r\n}","import CommandResult from './CommandResult';\r\nimport { ExpressionInput } from '../expression/expression-interfaces';\r\n\r\nexport default class ExpressionResult extends CommandResult {\r\n    expression: ExpressionInput;\r\n    constructor(input: string, expression: ExpressionInput) {\r\n        super(input);\r\n        this.expression = expression;\r\n    }\r\n}","import CommandResult from './CommandResult';\r\n\r\nexport default class ErrorResult extends CommandResult {\r\n    error: Error;\r\n    constructor(input: string, error : Error) {\r\n        super(input);\r\n        this.error = error;\r\n    }\r\n}","import CommandResult from './CommandResult';\r\n\r\nexport default class WhatsnewResult extends CommandResult {\r\n    constructor(input: string) {\r\n        super(input);\r\n    }\r\n}","import CommandResult from './CommandResult';\r\n\r\nexport default class StringResult extends CommandResult {\r\n    value:string;\r\n    constructor(input: string, value : string) {\r\n        super(input);\r\n        this.value = value;\r\n    }\r\n}","import NumericOperand from \"./NumericOperand\";\r\nimport { ExpressionInput, ExpressionInputItem } from \"./expression-interfaces\";\r\n\r\nexport default class ListOfNumbersExpression implements ExpressionInput {\r\n    numbers: NumericOperand[];\r\n    expressionString: string;\r\n    maxBitsLength: number;\r\n\r\n    constructor(expressionString: string, numbers: NumericOperand[]) {\r\n        this.expressionString = expressionString;\r\n        this.numbers = numbers;\r\n        this.maxBitsLength = numbers.map(n => n.lengthInBits).reduce((n , c) => n >= c ? n : c, 0);\r\n    }\r\n\r\n    toString() {\r\n        return this.numbers.map(n => n.value.toString()).join(' ');\r\n    }\r\n}","import { ExpressionInput, ExpressionInputItem } from \"./expression-interfaces\";\r\n\r\nexport default class BitwiseOperationExpression implements ExpressionInput {\r\n    \r\n    expressionString: string;\r\n    expressionItems: ExpressionInputItem[];\r\n\r\n    constructor(expressionString: string, expressions: ExpressionInputItem[]) {\r\n        this.expressionString = expressionString;\r\n        this.expressionItems = expressions;\r\n    }\r\n}","import NumericOperand from './NumericOperand';\r\nimport ExpressionOperand from './ExpressionOperand'\r\nimport ListOfNumbersExpression from './ListOfNumbersExpression';\r\nimport BitwiseOperationExpression from './BitwiseOperationExpression';\r\nimport { ExpressionInput, ExpressionInputItem, NumberBase } from './expression-interfaces';\r\n\r\nexport { default as NumericOperand } from './NumericOperand';\r\nexport { default as ExpressionOperand } from './ExpressionOperand';\r\nexport { default as ListOfNumbersExpression } from './ListOfNumbersExpression';\r\nexport { default as BitwiseOperationExpression } from './BitwiseOperationExpression';\r\n\r\ninterface IExpressionParserFactory {\r\n    canCreate: (input: string) => boolean;\r\n    create: (input: string) => ExpressionInput;\r\n};\r\n\r\nclass ExpressionParser {\r\n    factories: IExpressionParserFactory[];\r\n    constructor() {\r\n        this.factories = [];\r\n    };\r\n\r\n    canParse (input: string) : boolean {\r\n        var trimmed = input.replace(/^\\s+|\\s+$/, '');\r\n        var i = this.factories.length-1;\r\n        for(;i>=0;i--) {\r\n            if(this.factories[i].canCreate(trimmed) === true){\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n\r\n    parse (input: string) : ExpressionInput | null {\r\n        var trimmed = input.replace(/^\\s+|\\s+$/, '');\r\n        var i = 0, l = this.factories.length, factory;\r\n\r\n        for(;i<l;i++) {\r\n            factory = this.factories[i];\r\n\r\n            if(factory.canCreate(trimmed) == true){\r\n                return factory.create(trimmed);\r\n            }\r\n        }\r\n\r\n        return null;\r\n    };\r\n    \r\n    parseOperand (input : string) : NumericOperand {\r\n        return NumericOperand.parse(input);\r\n    };\r\n\r\n    createOperand (number : number, base : NumberBase) : NumericOperand {\r\n        return NumericOperand.create(number, base);\r\n    };\r\n\r\n    addFactory (factory: IExpressionParserFactory) {\r\n      this.factories.push(factory);\r\n    }\r\n}\r\n\r\nclass ListOfNumbersExpressionFactory implements IExpressionParserFactory\r\n{\r\n    regex: RegExp;\r\n\r\n    constructor() {\r\n        this.regex = /^(-?(?:\\d+|0x[\\d,a-f]+|0b[0-1])\\s?)+$/;\r\n    }\r\n\r\n    canCreate (input: string): boolean {\r\n        return this.regex.test(input);\r\n    };\r\n\r\n    create (input : string) : ExpressionInput {\r\n        var matches = this.regex.exec(input) as RegExpExecArray;\r\n        var numbers = [] as NumericOperand[];\r\n        var input = matches.input;\r\n\r\n        input.split(' ').forEach((n: string) => {\r\n            if(n.trim().length > 0) {\r\n                numbers.push(NumericOperand.parse(n.trim()));\r\n            }\r\n        });\r\n\r\n        return new ListOfNumbersExpression(input, numbers);\r\n    }\r\n}\r\n\r\nclass BitwiseOperationExpressionFactory implements IExpressionParserFactory {\r\n    fullRegex: RegExp;\r\n    regex: RegExp;\r\n\r\n    constructor() {\r\n        this.fullRegex = /^((<<|>>|>>>|\\||\\&|\\^)?(~?-?([b,x,a-f,0-9]+)))+$/;\r\n        this.regex = /(<<|>>|>>>|\\||\\&|\\^)?(~?-?(?:[b,x,a-f,0-9]+))/g;\r\n    }\r\n\r\n    canCreate (input: string) : boolean {\r\n        this.fullRegex.lastIndex = 0;\r\n        return this.fullRegex.test(this.normalizeString(input));\r\n    };\r\n\r\n    create (input: string) : ExpressionInput {\r\n        var m, operands : ExpressionInputItem[] = [],\r\n            normalizedString = this.normalizeString(input);\r\n\r\n        while ((m = this.regex.exec(normalizedString)) != null) {\r\n            operands.push(this.parseMatch(m));\r\n        }\r\n\r\n        return new BitwiseOperationExpression(normalizedString, operands)\r\n    };\r\n\r\n    parseMatch (m:any): ExpressionInputItem {\r\n        var input = m[0],\r\n            sign = m[1],\r\n            num = m[2];\r\n\r\n        var parsed = null;\r\n        if(num.indexOf('~') == 0) {\r\n            parsed = new ExpressionOperand(num, NumericOperand.parse(num.substring(1)), '~');\r\n        }\r\n        else {\r\n            parsed = NumericOperand.parse(num);\r\n        }\r\n\r\n        if(sign == null) {\r\n            return parsed as ExpressionOperand;\r\n        } else {\r\n            return new ExpressionOperand(input, parsed as NumericOperand, sign);\r\n        }\r\n    };\r\n\r\n    normalizeString (input : string): string {\r\n        return input.replace(/\\s+/g,'');\r\n    };\r\n}\r\n\r\nvar parser = new ExpressionParser();\r\nparser.addFactory(new ListOfNumbersExpressionFactory());\r\nparser.addFactory(new BitwiseOperationExpressionFactory());\r\n\r\nexport {parser};\r\n","import HelpResult from './models/HelpResult';\r\nimport AboutResult from './models/AboutResult';\r\nimport UnknownCommandResult from './models/UnknownCommandResult';\r\nimport ExpressionResult from './models/ExpressionResult';\r\nimport ErrorResult from './models/ErrorResult';\r\nimport WahtsnewResult from './models/WhatsnewResult';\r\nimport StringResult from './models/StringResult';\r\nimport * as expression from './expression/expression';\r\nimport uuid from 'uuid/v4';\r\nimport { CommandInput, CmdShell } from './core/cmd';\r\nimport { ExpressionInput } from './expression/expression-interfaces';\r\nimport AppState from './core/AppState';\r\n\r\nexport default {\r\n    initialize (cmd: CmdShell, appState: AppState) {\r\n\r\n        cmd.debugMode = appState.debugMode;\r\n        appState.onChange(() => cmd.debugMode = appState.debugMode);\r\n\r\n        cmd.command(\"help\", (c: CommandInput) => appState.addCommandResult(new HelpResult(c.input)));\r\n        cmd.command(\"clear\", (c: CommandInput) => appState.clearCommandResults());\r\n        cmd.command(\"em\", (c: CommandInput) => appState.toggleEmphasizeBytes());\r\n        cmd.command(\"dark\", (c: CommandInput) => appState.setUiTheme('dark'));\r\n        cmd.command(\"light\", (c: CommandInput) => appState.setUiTheme('light'));\r\n        cmd.command(\"midnight\", (c: CommandInput) => appState.setUiTheme('midnight'));\r\n        cmd.command(\"about\", (c: CommandInput) => appState.addCommandResult(new AboutResult(c.input)));\r\n        cmd.command(\"whatsnew\", (c: CommandInput) => appState.addCommandResult(new WahtsnewResult(c.input)));\r\n        cmd.command(\"guid\", (c: CommandInput) => appState.addCommandResult(new StringResult(c.input, uuid())));\r\n        cmd.command(\"-notrack\", (c: CommandInput) => {});\r\n        cmd.command(\"-debug\", (c: CommandInput) => {\r\n            appState.toggleDebugMode();\r\n            appState.addCommandResult(new StringResult(c.input, `Debug Mode: ${appState.debugMode}`))\r\n        });            \r\n\r\n        cmd.command({\r\n            canHandle: (input:string) => expression.parser.canParse(input),\r\n            handle: function(c: CommandInput) {\r\n                var expr = expression.parser.parse(c.input);\r\n                appState.toggleDebugMode();\r\n                appState.addCommandResult(new ExpressionResult(c.input, expr as ExpressionInput));\r\n            }         \r\n        })\r\n\r\n        // Last command handler reports that input is unknown\r\n        cmd.command({\r\n            canHandle: () => true,\r\n            handle: (c: CommandInput) => appState.addCommandResult(new UnknownCommandResult(c.input))\r\n        });\r\n\r\n        cmd.onError((input: string, err: Error) => appState.addCommandResult(new ErrorResult(input, err)));\r\n    }\r\n }","import React from 'react';\r\nimport log from 'loglevel';\r\n\r\nexport interface IInputBoxProps\r\n{\r\n    onCommandEntered: (input :string) => void;\r\n}\r\n\r\nexport default class InputBox extends React.Component<IInputBoxProps> {\r\n    history: string[];\r\n    historyIndex: number;\r\n    nameInput:  HTMLInputElement | null;\r\n\r\n    constructor(props: IInputBoxProps) {\r\n        super(props);\r\n        this.nameInput = null;\r\n        this.history = [];\r\n        this.historyIndex = -1;\r\n    }\r\n\r\n    componentDidMount(){\r\n        if(this.nameInput != null)\r\n            this.nameInput.focus();\r\n    }\r\n\r\n    render() {\r\n        return <input id=\"in\" type=\"text\"\r\n                      ref={(input) => { this.nameInput = input; }} \r\n                      onKeyUp={e => this.onKeyUp(e)}\r\n                      onKeyDown={e => this.onKeyDown(e)}\r\n                      className=\"expressionInput mono\"\r\n                      placeholder=\"type expression like '1>>2' or 'help' \"/>;\r\n    }\r\n\r\n    onKeyUp(e: any) {\r\n        var input = e.target;\r\n        if (e.keyCode != 13 || input.value.trim().length == 0) {\r\n            return;\r\n        }\r\n        \r\n        var commandInput = input.value;\r\n        this.history.unshift(commandInput);\r\n        this.historyIndex = -1;\r\n\r\n        input.value = '';        \r\n        this.props.onCommandEntered(commandInput);\r\n    }\r\n\r\n    onKeyDown(args: any) {\r\n\r\n        if(args.keyCode == 38) {\r\n            var newIndex = this.historyIndex+1;\r\n\r\n            if (this.history.length > newIndex) { // up\r\n                args.target.value = this.history[newIndex];\r\n                this.historyIndex = newIndex;\r\n            }\r\n\r\n            args.preventDefault();\r\n            return;\r\n        }\r\n\r\n        if(args.keyCode == 40) {\r\n            if(this.historyIndex > 0) { // down\r\n                args.target.value = this.history[--this.historyIndex];\r\n            }\r\n\r\n            args.preventDefault();\r\n        }\r\n    }\r\n}","import React from 'react';\r\nimport cmd from '../core/cmd';\r\n\r\ntype CommandLinkProps = {\r\n    command?:string;\r\n    text:string;\r\n}\r\n\r\nfunction CommandLink(props: CommandLinkProps) {\r\n    return <a href=\"javascript:void(0)\" onClick={e => cmd.execute(props.command || props.text)}>{props.text}</a>\r\n}\r\n\r\nexport default CommandLink;","import React from 'react';\r\nimport CommandLink from '../CommandLink';\r\n\r\nfunction HelpResultView() {\r\n    \r\n        return <div className=\"help helpResultTpl\">\r\n                        <div style={{overflow: \"hidden\"}}>\r\n                            <div style={{float: \"left\", \"marginRight\": \"20px\"}}>\r\n                                <div className=\"section\">\r\n                                    <strong>Supported Commands</strong>\r\n                                <ul>\r\n                                    <li><code><CommandLink text=\"23 | 34\" /></code> — type bitwise expression to see result in binary (only positive integers are supported now)</li>\r\n                                    <li><code><CommandLink text=\"23 34\" /></code> — type one or more numbers to see their binary representations</li>\r\n                                    <li><code><CommandLink text=\"clear\" /></code> — clear output pane</li>\r\n                                    <li><code><CommandLink text=\"help\" /></code> — display this help</li>\r\n                                    <li><code><CommandLink text=\"whatsnew\" /></code> — display changelog</li>\r\n                                    <li><code><CommandLink text=\"em\" /></code> — turn On/Off Emphasize Bytes</li>\r\n                                    <li><code><CommandLink text=\"light\" /></code> — set Light theme</li>\r\n                                    <li><code><CommandLink text=\"dark\" /></code> — set Dark theme</li>\r\n                                    <li><code><CommandLink text=\"midnight\" /></code> — set Midnight theme</li>\r\n                                    <li><code><CommandLink text=\"about\" /></code> — about the app</li>\r\n                                    <li><code><CommandLink text=\"guid\" /></code> — generate <a href=\"https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_.28random.29\">v4</a> GUID</li>\r\n                                </ul>\r\n                                </div>\r\n                            </div>\r\n                            <div style={{\"float\":\"left\"}}>\r\n                                <div className=\"section\">\r\n                                    <strong>Supported Bitwise Operations</strong><br/>\r\n                                    <small>\r\n                                        <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators\">\r\n                                            as implemented in JavaScript engine\r\n                                        </a>\r\n                                    </small>\r\n                                    <ul>\r\n                                        <li><code>&amp;</code> — bitwise AND</li>\r\n                                        <li><code>|</code> — bitwise inclusive OR</li>\r\n                                        <li><code>^</code> — bitwise exclusive XOR</li>\r\n                                        <li><code>~</code> — bitwise NOT</li>\r\n                                        <li><code>&lt;&lt;</code> — left shift</li>\r\n                                        <li><code>&gt;&gt;</code> — sign propagating right shift</li>\r\n                                        <li><code>&gt;&gt;&gt;</code> — zero-fill right shift</li>\r\n                                    </ul>\r\n                                </div>\r\n                          </div>\r\n                     </div>\r\n                 </div>;\r\n}\r\n\r\nexport default HelpResultView;\r\n","import React from 'react'\r\n\r\nfunction AboutResultView() {\r\n\r\n        return   <div className=\"aboutTpl\" data-result-type=\"help\">\r\n                        <p> Created by <a href=\"http://boryslevytskyi.github.io/\">Borys Levytskyi</a>. Please give it a like if BitwiseCmd has helped you in your work.</p>\r\n                        <p>If you have an idea, suggestion or you've spotted a bug here, please send it to <a href=\"mailto:&#098;&#105;&#116;&#119;&#105;&#115;&#101;&#099;&#109;&#100;&#064;&#103;&#109;&#097;&#105;&#108;&#046;&#099;&#111;&#109;?subject=Feedback\">&#098;&#105;&#116;&#119;&#105;&#115;&#101;&#099;&#109;&#100;&#064;&#103;&#109;&#097;&#105;&#108;&#046;&#099;&#111;&#109;</a> or tweet on <a href=\"http://twitter.com/BitwiseCmd\">@BitwiseCmd</a>. Your feedback is greatly appreciated.</p>\r\n                        <p><a href=\"https://github.com/BorisLevitskiy/BitwiseCmd\">Project on <strong>GitHub</strong></a></p>\r\n                    </div>;\r\n};\r\n\r\nexport default AboutResultView;","export default {\r\n    formatString: function(num: number, kind: string) : string {\r\n        return num.toString(getBase(kind || \"bin\"));\r\n    },\r\n    padLeft: function (str: string, length: number, symbol: string) : string {\r\n        var sb = Array.prototype.slice.call(str), symbol = symbol || \"0\";\r\n\r\n        if(length == null) {\r\n            return str;\r\n        }\r\n\r\n        while(length > sb.length) {\r\n            sb.unshift(symbol);\r\n        }\r\n\r\n        return sb.join('');\r\n    }\r\n};\r\n\r\nfunction getBase(kind:string) : number {\r\n    switch (kind){\r\n        case 'bin': return 2;\r\n        case 'hex': return 16;\r\n        case 'dec': return 10;\r\n    }\r\n\r\n    throw new Error(\"Unsupported kind: \" + kind);\r\n}","import React from 'react';\r\n\r\nexport type BinaryStringViewProps = {\r\n    allowFlipBits: boolean;\r\n    binaryString: string;\r\n    onFlipBit: (input: FlipBitEventArg) => void;\r\n    emphasizeBytes: boolean;\r\n};\r\n\r\nexport type FlipBitEventArg = {\r\n    index: number;\r\n    binaryString: string;\r\n    $event: any;\r\n};\r\n\r\nexport default class BinaryStringView extends React.Component<BinaryStringViewProps> {\r\n    render() {\r\n        return <span>{this.getChildren()}</span>\r\n    }\r\n\r\n    onBitClick(index: number, e : any) {\r\n        if(!this.props.allowFlipBits) {\r\n            return;\r\n        }\r\n\r\n        if(this.props.onFlipBit) {\r\n            this.props.onFlipBit({ index: index, binaryString: this.props.binaryString, $event: e });\r\n        }\r\n    }\r\n\r\n    getChildren() {\r\n        var bits = this.createBits(this.props.binaryString.split(''));\r\n        \r\n        if(this.props.emphasizeBytes) {\r\n            return this.splitIntoBytes(bits);\r\n        }\r\n\r\n        return bits;\r\n    }\r\n\r\n    createBits(bitChars:string[]) : JSX.Element[] {\r\n        const allowFlipBits = this.props.allowFlipBits || false;\r\n        const css = allowFlipBits ? ' flipable' : ''\r\n\r\n        return bitChars.map((c, i) => {\r\n            var className = c == '0' ? `zero${css}` : `one${css}`;\r\n            return <span className={className} key={i} onClick={e => this.onBitClick(i, e)}>{c}</span>\r\n        });\r\n    }\r\n\r\n    splitIntoBytes(bits: JSX.Element[]) {\r\n        const bytes = [];\r\n\r\n        var key = 0;\r\n        while(bits.length > 0) {\r\n            bytes.push(<span key={key++} className=\"byte\">{bits.splice(0, 8)}</span>);\r\n        }\r\n        \r\n        return bytes;\r\n    }\r\n}","import { NumericOperand, ListOfNumbersExpression, BitwiseOperationExpression, ExpressionOperand } from '../../../expression/expression';\r\nimport { ExpressionInputItem, ExpressionInput } from '../../../expression/expression-interfaces';\r\n\r\ntype Config = {\r\n    emphasizeBytes: boolean;\r\n    allowFlipBits: boolean;\r\n}\r\n\r\ntype ExpressionItemModel = {\r\n    sign: string;\r\n    css: string;\r\n    expressionItem: ExpressionInputItem;\r\n    allowFlipBits: boolean;\r\n    label: string;\r\n}\r\n\r\nexport default class BitwiseExpressionViewModel {\r\n\r\n    emphasizeBytes: boolean;\r\n    items: ExpressionItemModel[];\r\n    maxNumberOfBits: number;\r\n    allowFlipBits: boolean;\r\n\r\n    constructor({ emphasizeBytes = false, allowFlipBits = false} : Config) {\r\n        this.emphasizeBytes = emphasizeBytes;\r\n        this.items = [];\r\n        this.maxNumberOfBits = 0;\r\n        this.allowFlipBits = allowFlipBits === true;\r\n    }\r\n\r\n    static buildListOfNumbers(expr : ListOfNumbersExpression, config : Config) {\r\n        var model = new BitwiseExpressionViewModel(config);\r\n        expr.numbers.forEach(op => model.addOperandRow(op));\r\n        model.maxNumberOfBits = BitwiseExpressionViewModel.getNumberOfBits(model.maxNumberOfBits, model.emphasizeBytes);\r\n        return model;\r\n    }\r\n\r\n    static buildMultiple (expr : BitwiseOperationExpression, config : Config) {\r\n\r\n        var op = expr.expressionItems[0],\r\n            i = 0, len = expr.expressionItems.length,\r\n            ex, m = new BitwiseExpressionViewModel(config);\r\n\r\n        var prev : NumericOperand | null = null;\r\n\r\n        for (;i<len;i++) {\r\n            ex = expr.expressionItems[i];\r\n            if(ex instanceof NumericOperand) {\r\n                m.addOperandRow(ex);\r\n                prev = ex;\r\n                continue;\r\n            }\r\n\r\n            var eo = ex as ExpressionOperand;\r\n\r\n            // If it a single NOT expression\r\n            if(eo.isNotExpression) {\r\n                m.addExpressionOperandRow(eo);\r\n                var notResult = eo.evaluate();\r\n                m.addExpressionResultRow(notResult);\r\n                prev = notResult;\r\n            }\r\n            else if(eo.isShiftExpression){\r\n                prev = eo.evaluate(prev as NumericOperand);\r\n                m.addShiftExpressionResultRow(eo, prev);\r\n            } else {\r\n\r\n                prev = eo.evaluate(prev as NumericOperand);\r\n                m.addExpressionOperandRow(eo);\r\n                m.addExpressionResultRow(prev);\r\n            }\r\n        }\r\n\r\n        m.maxNumberOfBits = BitwiseExpressionViewModel.getNumberOfBits(m.maxNumberOfBits, m.emphasizeBytes);\r\n        return m;\r\n    };\r\n\r\n    static buildNot (expression: ExpressionOperand, config : Config) {\r\n        \r\n        var m = new BitwiseExpressionViewModel(config);\r\n        m.addExpressionOperandRow(expression);\r\n        m.addExpressionResultRow(expression.evaluate());\r\n        m.maxNumberOfBits = BitwiseExpressionViewModel.getNumberOfBits(m.maxNumberOfBits, m.emphasizeBytes);\r\n        return m;\r\n    };\r\n\r\n    addOperandRow(operand: NumericOperand) {\r\n        this.maxNumberOfBits = Math.max(operand.getLengthInBits(), this.maxNumberOfBits);\r\n        this.items.push({ \r\n            sign:'', \r\n            css: '',\r\n            expressionItem: operand,\r\n            allowFlipBits: this.allowFlipBits,\r\n            label: ''\r\n        });\r\n    };\r\n\r\n    addExpressionOperandRow(expression: ExpressionOperand) {\r\n        const resultNumber = expression.isNotExpression ? expression.evaluate() : expression.getUnderlyingOperand();\r\n        this.maxNumberOfBits = Math.max(resultNumber.getLengthInBits(), this.maxNumberOfBits);\r\n        \r\n        this.items.push({ \r\n            sign: expression.sign, \r\n            css: '',\r\n            label: this.getLabel(resultNumber),\r\n            expressionItem: expression.operand,\r\n            allowFlipBits: this.allowFlipBits\r\n        });\r\n    };\r\n\r\n    addShiftExpressionResultRow(expression : ExpressionOperand, resultOperand : NumericOperand) {\r\n        this.maxNumberOfBits = Math.max(resultOperand.getLengthInBits(), this.maxNumberOfBits);\r\n        this.items.push({\r\n            sign: expression.sign + expression.operand.toString(),\r\n            css: 'expression-result',\r\n            expressionItem: resultOperand,\r\n            allowFlipBits: false,\r\n            label: ''\r\n        });\r\n    };\r\n\r\n    addExpressionResultRow(operand : NumericOperand) {\r\n        this.maxNumberOfBits = Math.max(operand.getLengthInBits(), this.maxNumberOfBits);\r\n        this.items.push({ \r\n            sign:'=', \r\n            css: 'expression-result',\r\n            expressionItem: operand, \r\n            allowFlipBits: false,\r\n            label: '',\r\n        });\r\n    };\r\n\r\n    getLabel (op: NumericOperand) : string {\r\n        \r\n        if(op.base == 'bin') {\r\n            return op.toString(\"dec\");\r\n        }\r\n\r\n        return op.toString();\r\n    }\r\n\r\n    // TODO: move this method elsewhere. It is also used in LisOfNumbersExpressionView.js\r\n    static getNumberOfBits = function (bits : number, emphasizeBytes : boolean) : number {\r\n        if(emphasizeBytes && bits % 8 != 0) {\r\n             if(bits < 8) {\r\n                 return 8;\r\n             }\r\n\r\n             var n = bits - (bits % 8);\r\n             return n + 8;\r\n        }\r\n\r\n        return bits;\r\n    };\r\n\r\n    static createModel(expr : ExpressionInput, emphasizeBytes: boolean) : BitwiseExpressionViewModel {\r\n        if(expr instanceof ListOfNumbersExpression) {\r\n            return BitwiseExpressionViewModel.buildListOfNumbers(expr, { \r\n                emphasizeBytes: emphasizeBytes, \r\n                allowFlipBits: true \r\n            });\r\n        }\r\n\r\n        if(expr instanceof BitwiseOperationExpression) {\r\n            return BitwiseExpressionViewModel.buildMultiple(expr, { \r\n                emphasizeBytes: emphasizeBytes,\r\n                allowFlipBits: false \r\n            });\r\n        }\r\n\r\n        throw new Error(\"Cannot build BitwiseExpressionViewModel out of expression \" + expr);\r\n    }\r\n}","import React from 'react';\r\nimport formatter from '../../../core/formatter';\r\nimport BinaryStringView, { FlipBitEventArg } from '../BinaryString';\r\nimport BitwiseExpressionViewModel from './BitwiseExpressionModel';\r\nimport { ExpressionInput, ExpressionInputItem } from '../../../expression/expression-interfaces';\r\nimport { ExpressionOperand, NumericOperand } from '../../../expression/expression';\r\n\r\ntype BitwiseOperationExpressionViewProps = {\r\n    expression: ExpressionInput;\r\n    emphasizeBytes: boolean;\r\n}\r\n\r\ntype BitwiseOperationExpressionViewState = {\r\n\r\n}\r\n\r\nexport default class BitwiseOperationExpressionView extends React.Component<BitwiseOperationExpressionViewProps, BitwiseOperationExpressionViewState>  {\r\n    constructor(props: BitwiseOperationExpressionViewProps) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n    render() {\r\n        var rows = this.getRows();\r\n        if(!rows) {\r\n            return null;\r\n        }\r\n\r\n        return <table className=\"expression\">\r\n                    <tbody>\r\n                            {rows}\r\n                    </tbody>\r\n                </table>\r\n    }\r\n\r\n    getRows() : JSX.Element[] | null {\r\n        var model = BitwiseExpressionViewModel.createModel(this.props.expression, this.props.emphasizeBytes);\r\n\r\n        return model.items.map((itm, i) => \r\n            <ExpressionRow \r\n                key={i} \r\n                sign={itm.sign}\r\n                css={itm.css}\r\n                allowFlipBits={itm.allowFlipBits}\r\n                expressionItem={itm.expressionItem}\r\n                emphasizeBytes={this.props.emphasizeBytes} \r\n                maxNumberOfBits={model.maxNumberOfBits} \r\n                onBitFlipped={() => this.onBitFlipped()} />);\r\n    }\r\n\r\n    onBitFlipped() {\r\n        this.forceUpdate();\r\n        //this.setState({d:new Date()});\r\n    }\r\n}\r\n\r\ntype ExpressionRowProps = {\r\n    sign: string, \r\n    css: string, \r\n    maxNumberOfBits: number, \r\n    emphasizeBytes: boolean, \r\n    allowFlipBits: boolean, \r\n    expressionItem: ExpressionInputItem,\r\n    onBitFlipped: any\r\n}\r\n\r\nclass ExpressionRow extends React.Component<ExpressionRowProps> {\r\n    constructor(props: ExpressionRowProps) {\r\n       super(props);\r\n       this.state = { operand: null };\r\n   }\r\n    render() {\r\n        const { sign, css, maxNumberOfBits, emphasizeBytes, allowFlipBits } = this.props;\r\n        \r\n        return <tr className={css}>\r\n                    <td className=\"sign\">{sign}</td>\r\n                    <td className=\"label\">{this.getLabel()}</td>\r\n                    <td className=\"bin\">\r\n                        <BinaryStringView\r\n                            emphasizeBytes={emphasizeBytes} \r\n                            binaryString={formatter.padLeft(this.getBinaryString(), maxNumberOfBits, '0')} \r\n                            allowFlipBits={allowFlipBits} \r\n                            onFlipBit={args => this.flipBit(args)}/>\r\n                    </td>\r\n                    <td className=\"other\">{this.getOther()}</td>\r\n                </tr>;;\r\n    }\r\n\r\n    getBinaryString() : string {            \r\n        return this.props.expressionItem.evaluate().toBinaryString();\r\n    }\r\n\r\n    getLabel(): string {\r\n\r\n        // For expressions like |~2 \r\n        // TODO: find a better way...\r\n        if(this.props.expressionItem.isExpression) {\r\n            const ex = this.props.expressionItem as ExpressionOperand;\r\n            return ex.sign + this.getLabelString(ex.getUnderlyingOperand());\r\n        }\r\n\r\n        return this.getLabelString(this.props.expressionItem.getUnderlyingOperand());         \r\n    }\r\n\r\n    getOther() {\r\n\r\n        if(this.props.expressionItem.isExpression) {\r\n            const ex = this.props.expressionItem as ExpressionOperand;\r\n            const op = ex.evaluate();\r\n\r\n            return op.toString();\r\n        }\r\n\r\n        return this.props.expressionItem.evaluate().toOtherKindString();\r\n    }\r\n\r\n    getLabelString (op: NumericOperand) : string {\r\n        return op.toString(op.base == 'bin' ? 'dec' : op.base);\r\n    }\r\n\r\n     flipBit(args: FlipBitEventArg) {    \r\n\r\n        const op  = this.props.expressionItem.getUnderlyingOperand();\r\n        const { index, binaryString } = args;\r\n\r\n        var arr = binaryString.split('');\r\n        arr[index] = arr[index] == '0' ? '1' : '0';\r\n        var bin = arr.join('');\r\n\r\n        var newValue = parseInt(bin, 2);\r\n        op.setValue(newValue);\r\n\r\n        this.props.onBitFlipped();\r\n    }\r\n}","import React from 'react'\r\nimport CommandLink from '../CommandLink'\r\n\r\nfunction WhatsnewResultView() {\r\n    \r\n        return <div className=\"changelog\">\r\n                    <h3>Changelog</h3>\r\n                    <div className=\"item item-new\">\r\n                        <p><span className=\"soft date\">Jun 6th, 2017</span> <br/>\r\n                        Added <code><CommandLink text=\"guid\" /></code> command. Use it for generating v4 GUIDs </p>\r\n                    </div>\r\n                    <div className=\"item\">\r\n                        <p><span className=\"soft date\">May 27th, 2017</span> <br/>\r\n                        Added support of binary number notation (e.g. <code><CommandLink text=\"0b10101\" /></code>). </p>\r\n                    </div>  \r\n                    <div className=\"item\">\r\n                        <p><span className=\"soft\">May 20th, 2017</span> <br/>\r\n                        New <CommandLink text=\"Midnight\" /> theme added. </p>\r\n                    </div>  \r\n                    <div className=\"item\">\r\n                        <p><span className=\"soft\">May 16th, 2017</span> <br/>\r\n                        Complete rewrite using React. Old implementation is available at <a href=\"http://bitwisecmd.com/old\">http://bitwisecmd.com/old</a>. Please let me know if you have problems with this release by <a href=\"https://github.com/BorysLevytskyi/BitwiseCmd/issues\">creating issue</a> in Github Repo.</p>\r\n                    </div>  \r\n              </div>;\r\n}\r\n\r\nexport default WhatsnewResultView;","import React from 'react';\r\nimport HelpResult from '../models/HelpResult';\r\nimport AboutResult from '../models/AboutResult';\r\nimport HelpResultView from './results/HelpResultView';\r\nimport AboutResultView from './results/AboutResultView';\r\nimport ExpressionResult from '../models/ExpressionResult';\r\nimport BitwiseOperationExpressionView from './results/expressions/BitwiseOperationExpressionView';\r\nimport WhatsnewResult from '../models/WhatsnewResult';\r\nimport WhatsnewResultView from './results/WhatsNewResultView';\r\nimport ErrorResult from '../models/ErrorResult';\r\nimport StringResult from '../models/StringResult';\r\n\r\nimport CommandResult from '../models/CommandResult';\r\nimport AppState from '../core/AppState';\r\n\r\ntype DisplayResultProps = {\r\n    content : CommandResult,\r\n    appState: AppState,\r\n    inputHash: string,\r\n    input: string,\r\n    key: number\r\n}\r\n\r\nexport default class DisplayResult extends React.Component<DisplayResultProps> {\r\n    render() {\r\n\r\n        return <div className=\"result\">\r\n                        <div className=\"input mono\"><span className=\"cur\">&gt;</span>{this.props.content.input}<a className=\"hashLink\" title=\"Link for this expression\" href={window.location.pathname + '#' + this.props.inputHash}>#</a></div>\r\n                        <div className=\"content\">\r\n                            {this.findResultComponent(this.props.content)}\r\n                        </div>\r\n                    </div>;\r\n    }\r\n\r\n    findResultComponent(result: CommandResult) : JSX.Element  {\r\n\r\n        if(result instanceof HelpResult) {\r\n            return <HelpResultView  />\r\n        }\r\n\r\n        if(result instanceof AboutResult) {\r\n            return <AboutResultView />\r\n        }\r\n\r\n        if(result instanceof ExpressionResult) {\r\n            return <BitwiseOperationExpressionView expression={result.expression} emphasizeBytes={this.props.appState.emphasizeBytes} /> \r\n        }\r\n\r\n        if(result instanceof WhatsnewResult) {\r\n            return <WhatsnewResultView />\r\n        }\r\n\r\n        if(result instanceof StringResult) {\r\n            return <p>{result.value}</p>\r\n        }\r\n\r\n        if (result instanceof ErrorResult) {\r\n            return <div className=\"result\">\r\n                    <div className=\"error\">(X_X) Ooops.. Something ain' right: <strong>{result.error.message}</strong></div>\r\n               </div>\r\n        }\r\n\r\n        return <div className=\"result\">\r\n                    <div className=\"error\">¯\\_(ツ)_/¯ Sorry, i don&prime;t know what <strong>{this.props.content.input}</strong> is</div>\r\n               </div>\r\n    }\r\n}","import AppState from \"../core/AppState\";\r\nimport React from \"react\";\r\n\r\ntype IndicatorsProps = {\r\n    appState: AppState\r\n};\r\n\r\nfunction Indicators(props:  IndicatorsProps) {\r\n\r\n    const list = [];\r\n    const state = props.appState;\r\n\r\n    if(props.appState.env != 'prod') {\r\n        list.push(state.env);\r\n    }\r\n\r\n    if(props.appState.debugMode) {\r\n        list.push(\"debug\");\r\n    }\r\n\r\n    if(localStorage.getItem('TrackAnalytics') === 'false') {\r\n        list.push(\"notrack\");\r\n    }\r\n\r\n    if(list.length == 0)\r\n        return null;\r\n\r\n    return <div>\r\n            {list.map(i => <span>{i}&nbsp;</span>)}\r\n        </div>\r\n}\r\n\r\nexport default Indicators;","import React from 'react';\r\nimport InputBox from './components/InputBox';\r\nimport DisplayResultView from './components/DisplayResultView';\r\nimport AppState from './core/AppState';\r\nimport cmd from './core/cmd';\r\nimport CommandResult from './models/CommandResult';\r\nimport log from 'loglevel';\r\nimport Indicators from './components/Indicators';\r\n\r\ntype AppRootProps = {\r\n    appState: AppState,    \r\n};\r\n\r\ntype AppRootState = {\r\n    uiTheme: string,\r\n    emphasizeBytes: boolean,\r\n    commandResults: CommandResult[]\r\n}\r\n\r\nexport default class AppRoot extends React.Component<AppRootProps, AppRootState> {\r\n    \r\n    componentWillMount() {\r\n        this.refresh();\r\n        this.props.appState.onChange(() => this.refresh());\r\n    }\r\n\r\n    refresh() {\r\n        this.setState(this.props.appState);\r\n    }\r\n    \r\n    getIndicator(value : boolean) {\r\n        return value ? 'on' : 'off';\r\n    }\r\n\r\n    getResultViews() : JSX.Element[] {\r\n        log.debug('getting result views')\r\n        var results = this.state.commandResults.map((r, i) => <DisplayResultView key={i} content={r} input={r.input} inputHash={r.inputHash} appState={this.props.appState} />);\r\n        return results;\r\n    }\r\n\r\n    toggleEmphasizeBytes() {\r\n        this.props.appState.toggleEmphasizeBytes();\r\n    }\r\n\r\n    render() {\r\n        return <div className={`app-root ${this.state.uiTheme}`}>\r\n                    <Indicators appState={this.props.appState} />\r\n                    <div className=\"header\">\r\n                        <h1>Bitwise<span className=\"header-cmd\">Cmd</span>\r\n                        </h1>\r\n                        <ul className=\"top-links\">\r\n                            <li>\r\n                                <a href=\"https://github.com/BorisLevitskiy/BitwiseCmd\"><i className=\"icon github\">&nbsp;</i><span className=\"link-text\">Project on GitHub</span></a>\r\n                            </li>\r\n                            <li>\r\n                                <a href=\"https://twitter.com/BitwiseCmd\"><i className=\"icon twitter\">&nbsp;</i><span className=\"link-text\">Twitter</span></a>\r\n                            </li>\r\n                            <li>\r\n                                <a href=\"mailto:&#098;&#105;&#116;&#119;&#105;&#115;&#101;&#099;&#109;&#100;&#064;&#103;&#109;&#097;&#105;&#108;&#046;&#099;&#111;&#109;?subject=Feedback\"><i className=\"icon feedback\">&nbsp;</i><span className=\"link-text\">Send Feedback</span></a>\r\n                            </li>\r\n                        </ul>\r\n                    </div>\r\n\r\n                    <div className=\"expressionInput-container\">\r\n                        <InputBox onCommandEntered={(input) => cmd.execute(input)} />\r\n\r\n                        <span className=\"configPnl\">\r\n                            <span id=\"emphasizeBytes\" data-cmd=\"em\" className={\"indicator \" + this.getIndicator(this.state.emphasizeBytes)} title=\"Toggle Emphasize Bytes\" onClick={e => this.toggleEmphasizeBytes()}>[em]</span>\r\n                        </span>\r\n                    </div>\r\n\r\n                    <div id=\"output\">\r\n                    {this.getResultViews()}\r\n                    </div>\r\n                </div>;\r\n    }\r\n}","export default {\r\n    encodeHash: function(input:string):string {\r\n        return encodeURI(input.trim().replace(/\\s/g,','));\r\n    },\r\n    decodeHash: function(hashValue:string):string {\r\n        return decodeURI(hashValue).replace(/^\\#/, '').replace(/,/g,' ');\r\n    },\r\n    getArgs: function (hashValue:string) : string[] {\r\n\r\n        var decodedHash = this.decodeHash(hashValue);\r\n        var args : string[] = [];\r\n\r\n        splitHashList(decodedHash).forEach(function(value) {\r\n            args.push(value);\r\n        });\r\n\r\n        return args;\r\n    }\r\n};\r\n\r\nfunction splitHashList(str: string) : string[] {\r\n    var values = [];\r\n\r\n    if(str.indexOf('||')) {\r\n    str.split('||').forEach(function (v) {\r\n        if (v.length > 0) {\r\n            values.push(v);\r\n        }\r\n    });\r\n    } else {\r\n        values.push(str);\r\n    }\r\n\r\n    return values;\r\n}","import AppState from './core/AppState';\r\nimport appStateStore from './core/appStateStore';\r\nimport cmd from './core/cmd';\r\nimport commands from './commands';\r\nimport AppRoot from './AppRoot';\r\nimport hash from './core/hash';\r\nimport log from 'loglevel';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nconst env = window.location.host === \"bitwisecmd.com\" ? 'prod' : 'stage';\r\nsetupLogger(env);\r\n\r\nconst appState = createAppState(env);\r\n\r\ncommands.initialize(cmd, appState);\r\n\r\nexecuteStartupCommands();\r\n\r\nvar root = <AppRoot appState={appState} />;\r\nReactDOM.render(root, document.getElementById('root'));\r\n\r\nlog.debug(\"started\");\r\n\r\nfunction createAppState(env:string) {\r\n    var stateData = appStateStore.getPersistedData();\r\n    const appState = new AppState(stateData, env);\r\n    appStateStore.watch(appState);\r\n    log.debug(\"appState initialized\", appState);\r\n    return appState;\r\n}\r\n\r\nfunction setupLogger(env: Env) {\r\n    if(env != 'prod'){\r\n        log.setLevel(\"debug\");\r\n        log.debug(`Log level is set to debug. Env: ${env}`)\r\n    } else {\r\n        log.setLevel(\"warn\");\r\n    }\r\n}\r\n\r\nfunction executeStartupCommands() {\r\n    var hashArgs = hash.getArgs(window.location.hash);\r\n\r\n    var startupCommands = ['help', '1|2&6','1 2 4 8 16 32 0b1000000 0x80'];\r\n\r\n    if(appState.wasOldVersion) {\r\n        startupCommands = [\"whatsnew\"];\r\n    }\r\n\r\n    if(hashArgs.length > 0) {\r\n        startupCommands = hashArgs;\r\n    }\r\n\r\n    startupCommands.forEach(cmd.execute.bind(cmd));\r\n}\r\n\r\ntype Env = 'prod' | 'stage';\r\n","import { NumberBase } from \"./expression-interfaces\";\r\n\r\nconst decimalRegex = /^-?\\d+$/;\r\nconst hexRegex = /^-?0x[0-9,a-f]+$/i;\r\nconst binRegex = /^-?0b[0-1]+$/i;\r\nconst operatorRegex = /^<<|>>|<<<|\\&|\\|\\^|~$/;\r\n\r\ninterface ParserConfig {\r\n    regex: RegExp,\r\n    radix: number,\r\n    base: NumberBase,\r\n    prefix: string|RegExp\r\n}\r\n\r\nexport interface ParsedNumber {\r\n    value: number;\r\n    base: NumberBase;\r\n    input: string;\r\n}\r\n\r\nvar knownParsers : ParserConfig[] = [\r\n    { regex: decimalRegex, radix: 10, base: 'dec', prefix: '^$' },\r\n    { regex: hexRegex, radix: 16, base: 'hex', prefix:/0x/i },\r\n    { regex: binRegex, radix: 2, base: 'bin', prefix:/0b/i }];\r\n\r\n\r\nclass NumberParser {\r\n\r\n    parsers: ParserConfig[];\r\n\r\n    constructor(parsers: ParserConfig[])\r\n    {\r\n        this.parsers = parsers;\r\n    }\r\n\r\n    parse (input : string) : ParsedNumber | null {\r\n        return this.parsers.map(p => this.applyParser(p, input)).reduce((c, n) => c || n);\r\n    };\r\n\r\n    parseOperator (input: string) : string | null {\r\n        var m = input.match(input);\r\n        \r\n        if(m == null || m.length == 0) {\r\n            return null;\r\n        }\r\n\r\n        return m[0];\r\n    };\r\n\r\n    applyParser(parser : ParserConfig, rawInput: string) : ParsedNumber | null {\r\n    \r\n        if(!parser.regex.test(rawInput)) {\r\n            return null;\r\n        }\r\n            \r\n        var value = parseInt(rawInput.replace(parser.prefix, ''), parser.radix);\r\n    \r\n        return  {\r\n            value: value,\r\n            base: parser.base,\r\n            input: rawInput\r\n        }    \r\n    }\r\n}\r\n\r\nconst numberParser = new NumberParser(knownParsers);\r\n\r\nexport {numberParser};","import {numberParser} from './numberParser';\r\nimport { ExpressionInputItem, NumberBase } from './expression-interfaces';\r\n\r\nvar globalId : number = 1;\r\n\r\n// Represents numeric value\r\nexport default class NumericOperand implements ExpressionInputItem {\r\n    id: number;\r\n    value: number;\r\n    base: NumberBase;\r\n    lengthInBits: number;\r\n    isExpression: boolean;\r\n\r\n    constructor(value : number, base?: NumberBase) {\r\n        this.id = globalId++;\r\n        this.value = value;\r\n        this.base = base || \"dec\";\r\n        this.lengthInBits = NumericOperand.getBitLength(this.value);\r\n        this.isExpression = false;\r\n    }\r\n            \r\n    getLengthInBits() {\r\n        if(this.value < 0) {\r\n            return 32;\r\n        }\r\n        return Math.floor(Math.log(this.value) / Math.log(2)) + 1;\r\n    };\r\n\r\n    getOtherBase(kind?: NumberBase) : NumberBase {\r\n        switch(kind || this.base) {\r\n            case 'dec': \r\n            case 'bin':\r\n                return 'hex';\r\n            case 'hex': return 'dec';\r\n            default : throw new Error(kind + \" kind doesn't have opposite kind\")\r\n        }\r\n    };\r\n\r\n    toString(base?: NumberBase) : string {\r\n        return NumericOperand.toBaseString(this.value, base || this.base);\r\n    }\r\n\r\n    toOtherKindString() : string {\r\n        return this.toString(this.getOtherBase());\r\n    }\r\n\r\n    toDecimalString() {\r\n        return this.toString('dec');\r\n    }\r\n\r\n    toHexString() {\r\n        return this.toString('hex');\r\n    }\r\n\r\n    toBinaryString() : string {\r\n        return this.toString('bin');\r\n    }\r\n\r\n    setValue(value : number) {\r\n        this.value = value;\r\n        this.lengthInBits = NumericOperand.getBitLength(value);\r\n    }\r\n\r\n    evaluate() : NumericOperand {\r\n        return this;\r\n    }\r\n\r\n    getUnderlyingOperand() : NumericOperand  {\r\n        return this\r\n    }\r\n        \r\n    static getBitLength(num : number) {\r\n        return Math.floor(Math.log(num) / Math.log(2)) + 1;\r\n    }    \r\n    \r\n    static getBase(kind : string){\r\n        switch (kind){\r\n            case 'bin': return 2;\r\n            case 'hex': return 16;\r\n            case 'dec': return 10;\r\n        }\r\n    };\r\n\r\n    static create(value : number, base? : NumberBase) {\r\n        return new NumericOperand(value, base || \"dec\");\r\n    };\r\n\r\n    static parse(input: string) : NumericOperand {\r\n                    \r\n        var parsed = numberParser.parse(input);\r\n\r\n        if(!parsed) {\r\n            throw new Error(input + \" is not a valid number\");\r\n        }\r\n\r\n        return new NumericOperand(parsed.value, parsed.base);\r\n    }\r\n\r\n    static toBaseString(value : number, base : NumberBase) : string {\r\n        switch(base) {\r\n            case 'hex':\r\n                var hexVal = Math.abs(value).toString(16);\r\n                return value >= 0 ? '0x' + hexVal : '-0x' + hexVal;\r\n            case 'bin':\r\n                return (value>>>0).toString(2);\r\n            case 'dec':\r\n                return value.toString(10);\r\n            default:\r\n                throw new Error(\"Unexpected kind: \" + base)\r\n        }\r\n    };\r\n\r\n     static toHexString (hex : string) {\r\n            return hex.indexOf('-') === 0 ? '-0x' + hex.substr(1) : '0x' + hex;\r\n     };\r\n}","import NumericOperand from './NumericOperand';\r\nimport { ExpressionInputItem } from './expression-interfaces';\r\n\r\nexport default class ExpressionOperand implements ExpressionInputItem {\r\n    expressionString: string;\r\n    operand: ExpressionInputItem;\r\n    sign: string;\r\n    isExpression: boolean;\r\n    isShiftExpression: boolean;\r\n    isNotExpression: boolean;\r\n\r\n    constructor(expressionString : string, operand : ExpressionInputItem, sign : string) {\r\n        this.expressionString = expressionString;\r\n        this.operand = operand;\r\n        this.sign = sign;\r\n        this.isExpression = true;\r\n        this.isShiftExpression = this.sign.indexOf('<') >= 0 || this.sign.indexOf('>')>= 0;\r\n        this.isNotExpression = this.sign === '~';\r\n    }\r\n        \r\n    evaluate(operand?: NumericOperand) : NumericOperand {\r\n        if (operand instanceof ExpressionOperand) {\r\n            throw new Error('value shouldnt be expression'); \r\n        }\r\n\r\n        var evaluatedOperand = this.operand.evaluate();\r\n\r\n        var str = '';\r\n        if(this.sign == '~'){\r\n            str = '~' + evaluatedOperand.value;\r\n        } else {\r\n            if(operand == null)\r\n            throw new Error(\"Other is required for expression: \" + this.expressionString)\r\n\r\n            str = operand.value + this.sign + evaluatedOperand.value;\r\n        }\r\n\r\n        return NumericOperand.create(eval(str), evaluatedOperand.base);\r\n    }\r\n\r\n    getUnderlyingOperand() : NumericOperand {\r\n        return this.operand.getUnderlyingOperand();\r\n    }\r\n\r\n    toString(): string {\r\n        return this.sign + this.operand.toString();\r\n    }\r\n}"],"sourceRoot":""}