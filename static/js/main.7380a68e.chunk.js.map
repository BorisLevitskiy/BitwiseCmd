{"version":3,"sources":["expression/numberParser.ts","expression/NumericOperand.ts","expression/ExpressionOperand.ts","core/AppState.ts","core/appStateStore.ts","core/is.ts","core/cmd.ts","models/CommandResult.ts","models/HelpResult.ts","models/AboutResult.ts","models/UnknownCommandResult.ts","models/ExpressionResult.ts","models/ErrorResults.ts","models/WhatsnewResult.ts","models/StringResult.ts","expression/ListOfNumbersExpression.ts","expression/BitwiseOperationExpression.ts","expression/expression.ts","core/formatter.ts","ipaddress/ip.ts","models/IpAddressResult.ts","commands.ts","components/InputBox.tsx","components/CommandLink.tsx","components/results/HelpResultView.tsx","components/results/AboutResultView.tsx","components/results/BinaryString.tsx","components/results/expressions/BitwiseExpressionModel.ts","components/results/expressions/BitwiseOperationExpressionView.tsx","components/results/WhatsNewResultView.tsx","components/results/IpAddressView.tsx","components/DisplayResultView.tsx","components/Indicators.tsx","AppRoot.tsx","core/hash.ts","index.tsx"],"names":["knownParsers","regex","radix","base","prefix","numberParser","NumberParser","parsers","Object","classCallCheck","this","input","_this","map","p","applyParser","reduce","c","n","m","match","length","parser","rawInput","test","value","parseInt","replace","globalId","NumericOperand","id","lengthInBits","isExpression","getBitLength","Math","floor","log","kind","Error","toBaseString","toString","getOtherBase","num","parsed","parse","hexVal","abs","hex","indexOf","substr","ExpressionOperand","expressionString","operand","sign","D_MyStuff_Pet_BitwiseCmd_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","isShiftExpression","isNotExpression","evaluatedOperand","evaluate","str","create","eval","getUnderlyingOperand","APP_VERSION","AppState","persistData","env","version","emphasizeBytes","debugMode","uiTheme","handlers","commandResults","persistedVersion","wasOldVersion","result","unshift","debug","triggerChanged","handler","push","forEach","h","theme","appStateStore","getPersistedData","json","window","localStorage","getItem","JSON","ex","console","error","watch","appState","onChange","setItem","stringify","getPersistData","is","obj","Array","core_cmd","CmdShell","errorHandler","createClass","key","concat","trim","toLowerCase","findHandler","invokeHandler","e","handleError","cmd","createHandler","canHandle","handle","warn","arguments","filter","cmdResult","err","CommandResult","inputHash","encodeHash","encodeURI","HelpResult","possibleConstructorReturn","getPrototypeOf","call","AboutResult","UnknownCommandResult","message","ExpressionResult","expression","UnhandledErrorResult","_CommandResult","inherits","ErrorResult","_CommandResult2","errorMessage","_this2","WhatsnewResult","StringResult","ListOfNumbersExpression","numbers","maxBitsLength","join","BitwiseOperationExpression","expressions","expressionItems","ExpressionParser","factories","trimmed","i","canCreate","factory","l","number","ListOfNumbersExpressionFactory","matches","exec","split","BitwiseOperationExpressionFactory","fullRegex","lastIndex","normalizeString","operands","normalizedString","parseMatch","substring","addFactory","formatter","formatString","getBase","padLeft","symbol","sb","prototype","slice","ipAddressParser","getMaches","correctInputs","incorrectInputs","ParsingError","v","parsedObjects","parseSingle","parsingErrors","s","invalid","first","second","third","fourth","ipAddress","IpAddress","maskPart","maskBits","IpAddressWithSubnetMask","mask","bits","firstByte","secondByte","thirdByte","fourthByte","octet","IpAddressResult","ipAddresses","commands","command","addCommandResult","clearCommandResults","toggleEmphasizeBytes","setUiTheme","WahtsnewResult","uuid","toggleDebugMode","r","createSubnetMaskIp","canParse","expr","onError","InputBox","props","history","historyIndex","nameInput","focus","react_default","a","createElement","type","ref","onKeyUp","onKeyDown","className","placeholder","target","keyCode","commandInput","onCommandEntered","args","newIndex","preventDefault","React","Component","CommandLink","href","onClick","execute","text","HelpResultView","components_CommandLink","AboutResultView","data-result-type","BinaryStringView","getChildren","index","allowFlipBits","onFlipBit","arr","binaryString","newBinaryString","$event","createBits","splitIntoBytes","bitChars","css","onBitClick","bytes","splice","BitwiseExpressionViewModel","_ref","_ref$emphasizeBytes","_ref$allowFlipBits","items","maxNumberOfBits","max","getLengthInBits","expressionItem","label","resultNumber","getLabel","resultOperand","op","config","model","addOperandRow","getNumberOfBits","len","prev","eo","addExpressionOperandRow","notResult","addExpressionResultRow","addShiftExpressionResultRow","buildListOfNumbers","buildMultiple","BitwiseOperationExpressionView","state","rows","getRows","createModel","itm","BitwiseOperationExpressionView_ExpressionRow","onBitFlipped","forceUpdate","ExpressionRow","_this3","_this4","_this$props","BinaryString_BinaryStringView","getBinaryString","flipBit","getOther","toBinaryString","getLabelString","toOtherKindString","bin","newValue","setValue","WhatsnewResultView","IpAddressView","_React$Component","apply","renderSingleIp","renderMultipleIps","ip","colSpan","byte","firstBitOne","secondBitOne","thirdBitOne","getNetworkClass","toUpperCase","octetNumber","onFlippedBit","setOctet","DisplayResult","content","title","location","pathname","findResultComponent","results_HelpResultView","results_AboutResultView","BitwiseOperationExpressionView_BitwiseOperationExpressionView","results_WhatsNewResultView","ipResult","components_results_IpAddressView","Indicators","list","AppRoot","refresh","setState","DisplayResultView_DisplayResult","components_Indicators","InputBox_InputBox","data-cmd","getIndicator","getResultViews","hash","decodeHash","hashValue","decodeURI","getArgs","decodedHash","values","splitHashList","host","setLevel","stateData","createAppState","hashArgs","startupCommands","bind","executeStartupCommands","root","AppRoot_AppRoot","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7380a68e.chunk.js","sourcesContent":["import { NumberBase } from \"./expression-interfaces\";\r\n\r\nconst decimalRegex = /^-?\\d+$/;\r\nconst hexRegex = /^-?0x[0-9,a-f]+$/i;\r\nconst binRegex = /^-?0b[0-1]+$/i;\r\nconst operatorRegex = /^<<|>>|<<<|\\&|\\|\\^|~$/;\r\n\r\ninterface ParserConfig {\r\n    regex: RegExp,\r\n    radix: number,\r\n    base: NumberBase,\r\n    prefix: string|RegExp\r\n}\r\n\r\nexport interface ParsedNumber {\r\n    value: number;\r\n    base: NumberBase;\r\n    input: string;\r\n}\r\n\r\nvar knownParsers : ParserConfig[] = [\r\n    { regex: decimalRegex, radix: 10, base: 'dec', prefix: '^$' },\r\n    { regex: hexRegex, radix: 16, base: 'hex', prefix:/0x/i },\r\n    { regex: binRegex, radix: 2, base: 'bin', prefix:/0b/i }];\r\n\r\n\r\nclass NumberParser {\r\n\r\n    parsers: ParserConfig[];\r\n\r\n    constructor(parsers: ParserConfig[])\r\n    {\r\n        this.parsers = parsers;\r\n    }\r\n\r\n    parse (input : string) : ParsedNumber | null {\r\n        return this.parsers.map(p => this.applyParser(p, input)).reduce((c, n) => c || n);\r\n    };\r\n\r\n    parseOperator (input: string) : string | null {\r\n        var m = input.match(input);\r\n        \r\n        if(m == null || m.length == 0) {\r\n            return null;\r\n        }\r\n\r\n        return m[0];\r\n    };\r\n\r\n    applyParser(parser : ParserConfig, rawInput: string) : ParsedNumber | null {\r\n    \r\n        if(!parser.regex.test(rawInput)) {\r\n            return null;\r\n        }\r\n            \r\n        var value = parseInt(rawInput.replace(parser.prefix, ''), parser.radix);\r\n    \r\n        return  {\r\n            value: value,\r\n            base: parser.base,\r\n            input: rawInput\r\n        }    \r\n    }\r\n}\r\n\r\nconst numberParser = new NumberParser(knownParsers);\r\n\r\nexport {numberParser};","import {numberParser} from './numberParser';\r\nimport { ExpressionInputItem, NumberBase } from './expression-interfaces';\r\n\r\nvar globalId : number = 1;\r\n\r\n// Represents numeric value\r\nexport default class NumericOperand implements ExpressionInputItem {\r\n    id: number;\r\n    value: number;\r\n    base: NumberBase;\r\n    lengthInBits: number;\r\n    isExpression: boolean;\r\n\r\n    constructor(value : number, base?: NumberBase) {\r\n        this.id = globalId++;\r\n        this.value = value;\r\n        this.base = base || \"dec\";\r\n        this.lengthInBits = NumericOperand.getBitLength(this.value);\r\n        this.isExpression = false;\r\n    }\r\n            \r\n    getLengthInBits() {\r\n        if(this.value < 0) {\r\n            return 32;\r\n        }\r\n        return Math.floor(Math.log(this.value) / Math.log(2)) + 1;\r\n    };\r\n\r\n    getOtherBase(kind?: NumberBase) : NumberBase {\r\n        switch(kind || this.base) {\r\n            case 'dec': \r\n            case 'bin':\r\n                return 'hex';\r\n            case 'hex': return 'dec';\r\n            default : throw new Error(kind + \" kind doesn't have opposite kind\")\r\n        }\r\n    };\r\n\r\n    toString(base?: NumberBase) : string {\r\n        return NumericOperand.toBaseString(this.value, base || this.base);\r\n    }\r\n\r\n    toOtherKindString() : string {\r\n        return this.toString(this.getOtherBase());\r\n    }\r\n\r\n    toDecimalString() {\r\n        return this.toString('dec');\r\n    }\r\n\r\n    toHexString() {\r\n        return this.toString('hex');\r\n    }\r\n\r\n    toBinaryString() : string {\r\n        return this.toString('bin');\r\n    }\r\n\r\n    setValue(value : number) {\r\n        this.value = value;\r\n        this.lengthInBits = NumericOperand.getBitLength(value);\r\n    }\r\n\r\n    evaluate() : NumericOperand {\r\n        return this;\r\n    }\r\n\r\n    getUnderlyingOperand() : NumericOperand  {\r\n        return this\r\n    }\r\n        \r\n    static getBitLength(num : number) {\r\n        return Math.floor(Math.log(num) / Math.log(2)) + 1;\r\n    }    \r\n    \r\n    static getBase(kind : string){\r\n        switch (kind){\r\n            case 'bin': return 2;\r\n            case 'hex': return 16;\r\n            case 'dec': return 10;\r\n        }\r\n    };\r\n\r\n    static create(value : number, base? : NumberBase) {\r\n        return new NumericOperand(value, base || \"dec\");\r\n    };\r\n\r\n    static parse(input: string) : NumericOperand {\r\n                    \r\n        var parsed = numberParser.parse(input);\r\n\r\n        if(!parsed) {\r\n            throw new Error(input + \" is not a valid number\");\r\n        }\r\n\r\n        return new NumericOperand(parsed.value, parsed.base);\r\n    }\r\n\r\n    static toBaseString(value : number, base : NumberBase) : string {\r\n        switch(base) {\r\n            case 'hex':\r\n                var hexVal = Math.abs(value).toString(16);\r\n                return value >= 0 ? '0x' + hexVal : '-0x' + hexVal;\r\n            case 'bin':\r\n                return (value>>>0).toString(2);\r\n            case 'dec':\r\n                return value.toString(10);\r\n            default:\r\n                throw new Error(\"Unexpected kind: \" + base)\r\n        }\r\n    };\r\n\r\n     static toHexString (hex : string) {\r\n            return hex.indexOf('-') === 0 ? '-0x' + hex.substr(1) : '0x' + hex;\r\n     };\r\n}","import NumericOperand from './NumericOperand';\r\nimport { ExpressionInputItem } from './expression-interfaces';\r\n\r\nexport default class ExpressionOperand implements ExpressionInputItem {\r\n    expressionString: string;\r\n    operand: ExpressionInputItem;\r\n    sign: string;\r\n    isExpression: boolean;\r\n    isShiftExpression: boolean;\r\n    isNotExpression: boolean;\r\n\r\n    constructor(expressionString : string, operand : ExpressionInputItem, sign : string) {\r\n        this.expressionString = expressionString;\r\n        this.operand = operand;\r\n        this.sign = sign;\r\n        this.isExpression = true;\r\n        this.isShiftExpression = this.sign.indexOf('<') >= 0 || this.sign.indexOf('>')>= 0;\r\n        this.isNotExpression = this.sign === '~';\r\n    }\r\n        \r\n    evaluate(operand?: NumericOperand) : NumericOperand {\r\n        if (operand instanceof ExpressionOperand) {\r\n            throw new Error('value shouldnt be expression'); \r\n        }\r\n\r\n        var evaluatedOperand = this.operand.evaluate();\r\n\r\n        var str = '';\r\n        if(this.sign == '~'){\r\n            str = '~' + evaluatedOperand.value;\r\n        } else {\r\n            if(operand == null)\r\n            throw new Error(\"Other is required for expression: \" + this.expressionString)\r\n\r\n            str = operand.value + this.sign + evaluatedOperand.value;\r\n        }\r\n\r\n        return NumericOperand.create(eval(str), evaluatedOperand.base);\r\n    }\r\n\r\n    getUnderlyingOperand() : NumericOperand {\r\n        return this.operand.getUnderlyingOperand();\r\n    }\r\n\r\n    toString(): string {\r\n        return this.sign + this.operand.toString();\r\n    }\r\n}","import log from 'loglevel';\r\n\r\nconst APP_VERSION = 5;\r\n\r\nexport type PersistedAppData = {\r\n    emphasizeBytes: boolean;\r\n    uiTheme: string;\r\n    version: number;\r\n    debugMode: boolean | null;\r\n}\r\n\r\nexport type AppStateChangeHandler = (state: AppState) => void;\r\n\r\nexport default class AppState {\r\n\r\n    version: number = APP_VERSION;\r\n    emphasizeBytes: boolean;\r\n    debugMode: boolean = false;\r\n    uiTheme: string;\r\n    handlers: AppStateChangeHandler[];\r\n    commandResults: any[];\r\n    persistedVersion: number;\r\n    wasOldVersion: boolean;\r\n    env: string;    \r\n\r\n    constructor(persistData : PersistedAppData, env: string) {\r\n        this.commandResults = [];\r\n        this.handlers = [];\r\n        this.uiTheme = persistData.uiTheme || 'midnight';\r\n        this.env = env;\r\n\r\n        this.emphasizeBytes = persistData.emphasizeBytes || true;\r\n        this.persistedVersion = persistData.version || 0.1;\r\n        this.wasOldVersion = persistData.version != null && this.version > this.persistedVersion;\r\n        this.debugMode = env !== 'prod' || persistData.debugMode === true;\r\n    }\r\n\r\n    addCommandResult(result : any) {\r\n        this.commandResults.unshift(result);\r\n        log.debug(\"result added\", result);\r\n        this.triggerChanged();\r\n    }\r\n\r\n    clearCommandResults() {\r\n        this.commandResults = [];\r\n        this.triggerChanged();\r\n    }\r\n\r\n    toggleEmphasizeBytes() {\r\n        this.emphasizeBytes = !this.emphasizeBytes;\r\n        this.triggerChanged();\r\n    }\r\n\r\n    onChange(handler : AppStateChangeHandler) {\r\n        this.handlers.push(handler);\r\n    }\r\n\r\n    triggerChanged() {\r\n        this.handlers.forEach(h => h(this));\r\n    }\r\n\r\n    setUiTheme(theme: string) {\r\n         this.uiTheme = theme;\r\n         this.triggerChanged();    \r\n    }\r\n\r\n    toggleDebugMode() {\r\n        this.debugMode = !this.debugMode;\r\n        this.triggerChanged();\r\n    }\r\n\r\n    getPersistData() : PersistedAppData {\r\n        return {\r\n            emphasizeBytes: this.emphasizeBytes,\r\n            uiTheme: this.uiTheme,\r\n            version: this.version,\r\n            debugMode: this.debugMode\r\n        }\r\n    }\r\n};","import AppState, { PersistedAppData } from \"./AppState\";\r\n\r\nconst storeKey = 'AppState';\r\n\r\nexport default {\r\n    getPersistedData() : PersistedAppData {\r\n        var json = window.localStorage.getItem(storeKey);\r\n        if(!json) {\r\n            return {} as PersistedAppData;\r\n        }\r\n\r\n        try {\r\n            return JSON.parse(json) as PersistedAppData;\r\n        }\r\n        catch(ex) {\r\n            console.error('Failed to parse AppState json. Json Value: \\n' + json, ex);\r\n            return {} as PersistedAppData;;\r\n        }\r\n    },\r\n\r\n    watch (appState: AppState) {\r\n        appState.onChange(() => this.persistData(appState));\r\n    },\r\n\r\n    persistData(appState: AppState) {\r\n        localStorage.setItem(storeKey, JSON.stringify(appState.getPersistData()));\r\n    }\r\n}","export default {\r\n    plainObject: function(obj : any) : boolean {\r\n        return typeof obj == \"object\" && !(obj instanceof Array) && obj instanceof Object;\r\n    },\r\n\r\n    aFunction: function(obj : any) : boolean {\r\n        return typeof obj == \"function\";\r\n    },\r\n\r\n    string: function(obj : any) : boolean {\r\n        return typeof obj == \"string\";\r\n    },\r\n\r\n    array: function(obj : any) : boolean  {\r\n        return obj instanceof Array;\r\n    },\r\n\r\n    number: function(obj : any) : boolean  {\r\n        return typeof obj == \"number\" && !isNaN(obj)\r\n    }\r\n}","import is from './is';\r\nimport log from 'loglevel';\r\n\r\nexport type CommandInput = {\r\n    input: string;\r\n}\r\n\r\ntype HandleFunction = (input: CommandInput) => void;\r\ntype InputErrorHandler = (input:string, error: Error) => void;\r\n\r\nexport interface ICommandHandler {\r\n    canHandle (input:string) : boolean;\r\n    handle: HandleFunction;\r\n}\r\n\r\nexport class CmdShell {\r\n    debugMode: boolean;\r\n    handlers: ICommandHandler[];\r\n    errorHandler: InputErrorHandler | null; \r\n    constructor() {\r\n        this.handlers = [];\r\n        this.debugMode = false;\r\n        this.errorHandler = null;\r\n    };\r\n\r\n    execute (rawInput: string) {\r\n\r\n        log.debug(`Executing command: ${rawInput}`)\r\n\r\n        var input = rawInput.trim().toLowerCase();\r\n        var handler = this.findHandler(input);\r\n\r\n        if(handler != null) {\r\n            if(this.debugMode) {\r\n                this.invokeHandler(input, handler);\r\n            } else {\r\n                try {\r\n                    this.invokeHandler(input, handler);\r\n                } catch (e) {\r\n                     this.handleError(input, e);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            log.debug(`Handled is not found for command: ${rawInput}`)\r\n            this.handleError(input, new Error(\"Unsupported expression: \" + input.trim()));\r\n        }\r\n    };\r\n\r\n    onError(h: InputErrorHandler) {\r\n        this.errorHandler = h;\r\n    }\r\n   \r\n    command (cmd : string | object, handler? : any) {\r\n        var h = this.createHandler(cmd, handler);\r\n        if(h == null){\r\n            console.warn('unexpected set of arguments: ', JSON.stringify(arguments));\r\n            return;\r\n        }\r\n\r\n        if(!is.aFunction(h.canHandle)) {\r\n            console.warn('handler is missing \"canHandle\" function. registration denied.');\r\n            return;\r\n        }\r\n\r\n        if(!is.aFunction(h.handle)) {\r\n            console.warn('handler is missing \"handle\" function. registration denied.');\r\n            return;\r\n        }\r\n\r\n        this.handlers.push(h);\r\n    };\r\n\r\n    createHandler (cmd : string | object, handler : HandleFunction) : ICommandHandler | null {\r\n        if(is.plainObject(cmd)) {\r\n            return cmd as ICommandHandler;\r\n        }\r\n\r\n        if(is.string(cmd)) {\r\n            return { canHandle: function (input) { return input === cmd; }, handle: handler };\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    findHandler (input: string) : ICommandHandler | null {\r\n        return this.handlers.filter(h => h.canHandle(input))[0];\r\n    };\r\n\r\n    invokeHandler (input : string, handler : ICommandHandler) {\r\n\r\n        var cmdResult = handler.handle({ input: input});\r\n        if(cmdResult != null) {\r\n            log.debug(cmdResult);\r\n        }\r\n    };\r\n\r\n    handleError (input: string, err: Error) {\r\n        if(this.debugMode)\r\n            console.error(input, err);\r\n\r\n        if(this.errorHandler != null)\r\n            this.errorHandler(input, err);\r\n    }\r\n}\r\n\r\nexport default new CmdShell();","export default class CommandResult {\r\n    input: string;\r\n    inputHash: string;\r\n\r\n    constructor(input: string) {\r\n        this.input = input;\r\n        this.inputHash = this.encodeHash(input);\r\n    }\r\n\r\n    encodeHash (input: string) {\r\n        return encodeURI(input.trim().replace(/\\s/g,','));\r\n    }\r\n}","import CommandResult from './CommandResult';\r\n\r\nexport default class HelpResult extends CommandResult {\r\n    constructor(input: string) {\r\n        super(input);\r\n    }\r\n}","import CommandResult from './CommandResult';\r\n\r\nexport default class AboutResult extends CommandResult {\r\n    constructor(input:string) {\r\n        super(input);\r\n    }\r\n}","import CommandResult from './CommandResult';\r\n\r\nexport default class UnknownCommandResult extends CommandResult {\r\n    message:string;\r\n    constructor(input : string) {\r\n        super(input);\r\n        this.message = `Sorry, i don''t know what ${input} is :(`;\r\n    }\r\n}","import CommandResult from './CommandResult';\r\nimport { ExpressionInput } from '../expression/expression-interfaces';\r\n\r\nexport default class ExpressionResult extends CommandResult {\r\n    expression: ExpressionInput;\r\n    constructor(input: string, expression: ExpressionInput) {\r\n        super(input);\r\n        this.expression = expression;\r\n    }\r\n}","import CommandResult from './CommandResult';\r\n\r\nexport class UnhandledErrorResult extends CommandResult {\r\n    error: Error;\r\n    constructor(input: string, error : Error) {\r\n        super(input);\r\n        this.error = error;\r\n    }\r\n}\r\n\r\nexport class ErrorResult extends CommandResult {\r\n    errorMessage: string;\r\n    constructor(input: string, errorMessage : string) {\r\n        super(input);\r\n        this.errorMessage = errorMessage;\r\n    }\r\n}","import CommandResult from './CommandResult';\r\n\r\nexport default class WhatsnewResult extends CommandResult {\r\n    constructor(input: string) {\r\n        super(input);\r\n    }\r\n}","import CommandResult from './CommandResult';\r\n\r\nexport default class StringResult extends CommandResult {\r\n    value:string;\r\n    constructor(input: string, value : string) {\r\n        super(input);\r\n        this.value = value;\r\n    }\r\n}","import NumericOperand from \"./NumericOperand\";\r\nimport { ExpressionInput, ExpressionInputItem } from \"./expression-interfaces\";\r\n\r\nexport default class ListOfNumbersExpression implements ExpressionInput {\r\n    numbers: NumericOperand[];\r\n    expressionString: string;\r\n    maxBitsLength: number;\r\n\r\n    constructor(expressionString: string, numbers: NumericOperand[]) {\r\n        this.expressionString = expressionString;\r\n        this.numbers = numbers;\r\n        this.maxBitsLength = numbers.map(n => n.lengthInBits).reduce((n , c) => n >= c ? n : c, 0);\r\n    }\r\n\r\n    toString() {\r\n        return this.numbers.map(n => n.value.toString()).join(' ');\r\n    }\r\n}","import { ExpressionInput, ExpressionInputItem } from \"./expression-interfaces\";\r\n\r\nexport default class BitwiseOperationExpression implements ExpressionInput {\r\n    \r\n    expressionString: string;\r\n    expressionItems: ExpressionInputItem[];\r\n\r\n    constructor(expressionString: string, expressions: ExpressionInputItem[]) {\r\n        this.expressionString = expressionString;\r\n        this.expressionItems = expressions;\r\n    }\r\n}","import NumericOperand from './NumericOperand';\r\nimport ExpressionOperand from './ExpressionOperand'\r\nimport ListOfNumbersExpression from './ListOfNumbersExpression';\r\nimport BitwiseOperationExpression from './BitwiseOperationExpression';\r\nimport { ExpressionInput, ExpressionInputItem, NumberBase } from './expression-interfaces';\r\n\r\nexport { default as NumericOperand } from './NumericOperand';\r\nexport { default as ExpressionOperand } from './ExpressionOperand';\r\nexport { default as ListOfNumbersExpression } from './ListOfNumbersExpression';\r\nexport { default as BitwiseOperationExpression } from './BitwiseOperationExpression';\r\n\r\ninterface IExpressionParserFactory {\r\n    canCreate: (input: string) => boolean;\r\n    create: (input: string) => ExpressionInput;\r\n};\r\n\r\nclass ExpressionParser {\r\n    factories: IExpressionParserFactory[];\r\n    constructor() {\r\n        this.factories = [];\r\n    };\r\n\r\n    canParse (input: string) : boolean {\r\n        var trimmed = input.replace(/^\\s+|\\s+$/, '');\r\n        var i = this.factories.length-1;\r\n        for(;i>=0;i--) {\r\n            if(this.factories[i].canCreate(trimmed) === true){\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n\r\n    parse (input: string) : ExpressionInput | null {\r\n        var trimmed = input.replace(/^\\s+|\\s+$/, '');\r\n        var i = 0, l = this.factories.length, factory;\r\n\r\n        for(;i<l;i++) {\r\n            factory = this.factories[i];\r\n\r\n            if(factory.canCreate(trimmed) == true){\r\n                return factory.create(trimmed);\r\n            }\r\n        }\r\n\r\n        return null;\r\n    };\r\n    \r\n    parseOperand (input : string) : NumericOperand {\r\n        return NumericOperand.parse(input);\r\n    };\r\n\r\n    createOperand (number : number, base : NumberBase) : NumericOperand {\r\n        return NumericOperand.create(number, base);\r\n    };\r\n\r\n    addFactory (factory: IExpressionParserFactory) {\r\n      this.factories.push(factory);\r\n    }\r\n}\r\n\r\nclass ListOfNumbersExpressionFactory implements IExpressionParserFactory\r\n{\r\n    regex: RegExp;\r\n\r\n    constructor() {\r\n        this.regex = /^(-?(?:\\d+|0x[\\d,a-f]+|0b[0-1])\\s?)+$/;\r\n    }\r\n\r\n    canCreate (input: string): boolean {\r\n        return this.regex.test(input);\r\n    };\r\n\r\n    create (input : string) : ExpressionInput {\r\n        var matches = this.regex.exec(input) as RegExpExecArray;\r\n        var numbers = [] as NumericOperand[];\r\n        var input = matches.input;\r\n\r\n        input.split(' ').forEach((n: string) => {\r\n            if(n.trim().length > 0) {\r\n                numbers.push(NumericOperand.parse(n.trim()));\r\n            }\r\n        });\r\n\r\n        return new ListOfNumbersExpression(input, numbers);\r\n    }\r\n}\r\n\r\nclass BitwiseOperationExpressionFactory implements IExpressionParserFactory {\r\n    fullRegex: RegExp;\r\n    regex: RegExp;\r\n\r\n    constructor() {\r\n        this.fullRegex = /^((<<|>>|>>>|\\||\\&|\\^)?(~?-?([b,x,a-f,0-9]+)))+$/;\r\n        this.regex = /(<<|>>|>>>|\\||\\&|\\^)?(~?-?(?:[b,x,a-f,0-9]+))/g;\r\n    }\r\n\r\n    canCreate (input: string) : boolean {\r\n        this.fullRegex.lastIndex = 0;\r\n        return this.fullRegex.test(this.normalizeString(input));\r\n    };\r\n\r\n    create (input: string) : ExpressionInput {\r\n        var m, operands : ExpressionInputItem[] = [],\r\n            normalizedString = this.normalizeString(input);\r\n\r\n        while ((m = this.regex.exec(normalizedString)) != null) {\r\n            operands.push(this.parseMatch(m));\r\n        }\r\n\r\n        return new BitwiseOperationExpression(normalizedString, operands)\r\n    };\r\n\r\n    parseMatch (m:any): ExpressionInputItem {\r\n        var input = m[0],\r\n            sign = m[1],\r\n            num = m[2];\r\n\r\n        var parsed = null;\r\n        if(num.indexOf('~') == 0) {\r\n            parsed = new ExpressionOperand(num, NumericOperand.parse(num.substring(1)), '~');\r\n        }\r\n        else {\r\n            parsed = NumericOperand.parse(num);\r\n        }\r\n\r\n        if(sign == null) {\r\n            return parsed as ExpressionOperand;\r\n        } else {\r\n            return new ExpressionOperand(input, parsed as NumericOperand, sign);\r\n        }\r\n    };\r\n\r\n    normalizeString (input : string): string {\r\n        return input.replace(/\\s+/g,'');\r\n    };\r\n}\r\n\r\nvar parser = new ExpressionParser();\r\nparser.addFactory(new ListOfNumbersExpressionFactory());\r\nparser.addFactory(new BitwiseOperationExpressionFactory());\r\n\r\nexport {parser};\r\n","export default {\r\n    formatString: function(num: number, kind: string) : string {\r\n        return num.toString(getBase(kind || \"bin\"));\r\n    },\r\n    padLeft: function (str: string, length: number, symbol: string) : string {\r\n        var sb = Array.prototype.slice.call(str), symbol = symbol || \"0\";\r\n\r\n        if(length == null) {\r\n            return str;\r\n        }\r\n\r\n        while(length > sb.length) {\r\n            sb.unshift(symbol);\r\n        }\r\n\r\n        return sb.join('');\r\n    }\r\n};\r\n\r\nfunction getBase(kind:string) : number {\r\n    switch (kind){\r\n        case 'bin': return 2;\r\n        case 'hex': return 16;\r\n        case 'dec': return 10;\r\n    }\r\n\r\n    throw new Error(\"Unsupported kind: \" + kind);\r\n}","import formatter from '../core/formatter';\r\n\r\n\r\nexport type OctetNumber = 1 | 2 | 3 | 4;\r\nexport type NetworkClass = 'a' | 'b' | 'c' | 'd' | 'e';\r\nexport type ParsedIpObject = IpAddress | IpAddressWithSubnetMask;\r\n\r\nconst ipAddressParser = {\r\n    parse: function(input: string) : ParsedIpObject[] | ParsingError | null {\r\n\r\n        const matches = this.getMaches(input);\r\n        const correctInputs = matches.filter(m => m.matches != null);\r\n        const incorrectInputs = matches.filter(m => m.matches == null);\r\n        \r\n        if(correctInputs.length == 0)\r\n            return null;\r\n\r\n        if(incorrectInputs.length > 0) {\r\n                return new ParsingError(`Value(s) ${incorrectInputs.map(v => v.input).join(',')} was not recognized as valid ip address or ip address with a subnet mask`);\r\n        }\r\n\r\n        const parsedObjects = matches.map(m => this.parseSingle(m.matches!, m.input));\r\n        const parsingErrors = parsedObjects.filter(p => p instanceof ParsingError);\r\n\r\n        if(parsingErrors.length > 0) {\r\n            return parsingErrors[0] as ParsingError;\r\n        }\r\n\r\n        return parsedObjects as ParsedIpObject[];\r\n        \r\n    },\r\n\r\n    getMaches(input : string) : { matches: RegExpExecArray | null, input: string }[] {\r\n\r\n        return input.\r\n            replace(/[\\t\\s]+/g, ' ')\r\n                .split(' ')\r\n                .filter(s => s.length>0)\r\n                .map(s => {\r\n                    const ipV4Regex = /^([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})(\\/\\d+)?$/;\r\n                    const matches = ipV4Regex.exec(s);\r\n                    \r\n                    if(matches == null || matches.length === 0)\r\n                        return {matches: null, input: s};\r\n                    \r\n                    return {matches, input: s};\r\n                });\r\n    },\r\n\r\n    parseSingle(matches : RegExpExecArray, input: string) : ParsedIpObject | ParsingError {\r\n        const invalid = (n: number) => n < 0 || n > 255;\r\n    \r\n        const first = parseInt(matches[1]);\r\n        const second = parseInt(matches[2]);\r\n        const third = parseInt(matches[3]);\r\n        const fourth = parseInt(matches[4]);\r\n\r\n        if(invalid(first) || invalid(second) || invalid(third) || invalid(fourth))\r\n            return new ParsingError(`${input} value doesn't fall within the valid range of the IP address space`);\r\n\r\n        const ipAddress = new IpAddress(first, second, third, fourth);\r\n\r\n        if(matches[5]) {\r\n            const maskPart = matches[5].substr(1);\r\n            const maskBits = parseInt(maskPart);\r\n\r\n            if(maskBits > 32) {\r\n                return new ParsingError(`Subnet mask value in ${input} is out of range`);\r\n            }\r\n\r\n            return new IpAddressWithSubnetMask(ipAddress, maskBits);\r\n        }\r\n\r\n        return ipAddress;\r\n    }\r\n}\r\n\r\nexport class ParsingError {\r\n    errorMessage: string;\r\n    constructor(message: string) {\r\n        this.errorMessage = message;\r\n    }\r\n}\r\n\r\nexport class IpAddressWithSubnetMask {\r\n    maskBits: number;\r\n    ipAddress: IpAddress;\r\n    \r\n    constructor(ipAddress : IpAddress, maskBits : number) {\r\n        this.ipAddress = ipAddress;\r\n        this.maskBits = maskBits;\r\n    }\r\n\r\n    toString() {\r\n        return `${this.ipAddress.toString()}/${this.maskBits}`;\r\n    }\r\n\r\n    createSubnetMaskIp() : IpAddress {\r\n\r\n        const mask = (bits: number) => 255<<(8-bits)&255;\r\n\r\n        if(this.maskBits <= 8) {\r\n            return new IpAddress(mask(this.maskBits), 0, 0, 0);\r\n        }\r\n        else if(this.maskBits <= 16) {\r\n            return new IpAddress(255, mask(this.maskBits-8), 0, 0);\r\n        }\r\n        else if(this.maskBits <= 24) {\r\n            return new IpAddress(255, 255, mask(this.maskBits-16), 0);\r\n        }\r\n        else {\r\n            return new IpAddress(255, 255, 255, mask(this.maskBits-24));\r\n        }\r\n    }\r\n}\r\n\r\nexport class IpAddress {\r\n\r\n    firstByte : number;\r\n    secondByte: number;\r\n    thirdByte : number;\r\n    fourthByte: number\r\n\r\n    constructor(firstByte : number, secondByte: number, thirdByte : number, fourthByte: number) {\r\n        this.firstByte = firstByte;\r\n        this.secondByte = secondByte;\r\n        this.thirdByte = thirdByte;\r\n        this.fourthByte = fourthByte;\r\n    }\r\n\r\n    toString() : string {\r\n        return `${this.firstByte}.${this.secondByte}.${this.thirdByte}.${this.fourthByte}`;\r\n    }\r\n\r\n    setOctet(octet: OctetNumber, value : number)  {\r\n        switch(octet) {\r\n            case 1:\r\n                this.firstByte = value;\r\n                break;\r\n            case 2:\r\n                this.secondByte = value;\r\n                break;\r\n            case 3:\r\n                this.thirdByte = value;\r\n                break;\r\n            case 4:\r\n                this.fourthByte = value;\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\nconst getNetworkClass = function (ipAddress: IpAddress) : NetworkClass {\r\n    const byte = ipAddress.firstByte;\r\n    const bineryRep = formatter.formatString(ipAddress.firstByte, 'bin');\r\n\r\n    const firstBitOne = (byte & 128) === 128;\r\n    const firstBitZero = (byte & 128) === 0;\r\n    const secondBitOne = (byte & 64) === 64;\r\n\r\n    const thirdBitOne = (byte & 32) === 32;\r\n    const thirdBitZero = (byte & 32) === 0;\r\n\r\n    const forthBitZero = (byte & 16) === 0;\r\n    const forthBitOne = (byte & 16) === 16;\r\n\r\n    // e: 1111\r\n\r\n    if(firstBitOne && secondBitOne && thirdBitOne && forthBitOne)\r\n        return 'e';\r\n\r\n    if(firstBitOne && secondBitOne && thirdBitOne && forthBitZero) // Start bits: 1110;\r\n        return 'd';\r\n\r\n    if(firstBitOne && secondBitOne && thirdBitZero) // Start bits: 110;\r\n        return 'c';\r\n   \r\n    return firstBitOne ? 'b' : 'a';\r\n};\r\n\r\nexport {ipAddressParser, getNetworkClass};","import { IpAddress, ipAddressParser, IpAddressWithSubnetMask } from '../ipaddress/ip';\r\nimport CommandResult from './CommandResult';\r\n\r\nexport default class IpAddressResult extends CommandResult {\r\n    ipAddresses: IpAddress[];\r\n    constructor(input: string, ipAddresses: IpAddress[]) {\r\n        super(input);\r\n        this.ipAddresses = ipAddresses;\r\n    }\r\n}","import HelpResult from './models/HelpResult';\r\nimport AboutResult from './models/AboutResult';\r\nimport UnknownCommandResult from './models/UnknownCommandResult';\r\nimport ExpressionResult from './models/ExpressionResult';\r\nimport {UnhandledErrorResult, ErrorResult} from './models/ErrorResults';\r\nimport WahtsnewResult from './models/WhatsnewResult';\r\nimport StringResult from './models/StringResult';\r\nimport * as expression from './expression/expression';\r\nimport uuid from 'uuid/v4';\r\nimport { CommandInput, CmdShell } from './core/cmd';\r\nimport { ExpressionInput } from './expression/expression-interfaces';\r\nimport AppState from './core/AppState';\r\nimport {ParsingError, IpAddress, ipAddressParser, IpAddressWithSubnetMask, ParsedIpObject} from './ipaddress/ip'\r\nimport IpAddressResult from './models/IpAddressResult';\r\nimport { isGetAccessor, isPrefixUnaryExpression } from 'typescript';\r\n\r\nexport default {\r\n    initialize (cmd: CmdShell, appState: AppState) {\r\n\r\n        cmd.debugMode = appState.debugMode;\r\n        appState.onChange(() => cmd.debugMode = appState.debugMode);\r\n\r\n        cmd.command(\"help\", (c: CommandInput) => appState.addCommandResult(new HelpResult(c.input)));\r\n        cmd.command(\"clear\", (c: CommandInput) => appState.clearCommandResults());\r\n        cmd.command(\"em\", (c: CommandInput) => appState.toggleEmphasizeBytes());\r\n        cmd.command(\"dark\", (c: CommandInput) => appState.setUiTheme('dark'));\r\n        cmd.command(\"light\", (c: CommandInput) => appState.setUiTheme('light'));\r\n        cmd.command(\"midnight\", (c: CommandInput) => appState.setUiTheme('midnight'));\r\n        cmd.command(\"about\", (c: CommandInput) => appState.addCommandResult(new AboutResult(c.input)));\r\n        cmd.command(\"whatsnew\", (c: CommandInput) => appState.addCommandResult(new WahtsnewResult(c.input)));\r\n        cmd.command(\"guid\", (c: CommandInput) => appState.addCommandResult(new StringResult(c.input, uuid())));\r\n        cmd.command(\"-notrack\", (c: CommandInput) => {});\r\n        cmd.command(\"-debug\", (c: CommandInput) => {\r\n            appState.toggleDebugMode();\r\n            appState.addCommandResult(new StringResult(c.input, `Debug Mode: ${appState.debugMode}`))\r\n        });            \r\n\r\n\r\n        // Ip Addresses\r\n        cmd.command({\r\n            canHandle: (input:string) => ipAddressParser.parse(input) != null,\r\n            handle: function(c: CommandInput) {\r\n                var result = ipAddressParser.parse(c.input);\r\n\r\n                if(result == null)\r\n                    return;\r\n\r\n                if(result instanceof ParsingError) {\r\n                    appState.addCommandResult(new ErrorResult(c.input, result.errorMessage));\r\n                    return;\r\n                }\r\n\r\n                const ipAddresses : IpAddress[] = [];\r\n                \r\n                (result as ParsedIpObject[]).forEach(r => {\r\n                    if(r instanceof IpAddressWithSubnetMask)\r\n                    {\r\n                        ipAddresses.push(r.ipAddress);\r\n                        ipAddresses.push(r.createSubnetMaskIp());\r\n                    }\r\n                    else if(r instanceof IpAddress) {\r\n                        ipAddresses.push(r);\r\n                    }\r\n                });\r\n            \r\n                appState.addCommandResult(new IpAddressResult(c.input, ipAddresses));\r\n            }         \r\n        })\r\n\r\n        // Bitwise Expressions\r\n        cmd.command({\r\n            canHandle: (input:string) => expression.parser.canParse(input),\r\n            handle: function(c: CommandInput) {\r\n                var expr = expression.parser.parse(c.input);\r\n                appState.addCommandResult(new ExpressionResult(c.input, expr as ExpressionInput));\r\n            }         \r\n        })\r\n\r\n        // Last command handler reports that input is unknown\r\n        cmd.command({\r\n            canHandle: () => true,\r\n            handle: (c: CommandInput) => appState.addCommandResult(new UnknownCommandResult(c.input))\r\n        });\r\n\r\n        cmd.onError((input: string, err: Error) => appState.addCommandResult(new UnhandledErrorResult(input, err)));\r\n    }\r\n }","import React from 'react';\r\nimport log from 'loglevel';\r\n\r\nexport interface IInputBoxProps\r\n{\r\n    onCommandEntered: (input :string) => void;\r\n}\r\n\r\nexport default class InputBox extends React.Component<IInputBoxProps> {\r\n    history: string[];\r\n    historyIndex: number;\r\n    nameInput:  HTMLInputElement | null;\r\n\r\n    constructor(props: IInputBoxProps) {\r\n        super(props);\r\n        this.nameInput = null;\r\n        this.history = [];\r\n        this.historyIndex = -1;\r\n    }\r\n\r\n    componentDidMount(){\r\n        if(this.nameInput != null)\r\n            this.nameInput.focus();\r\n    }\r\n\r\n    render() {\r\n        return <input id=\"in\" type=\"text\"\r\n                      ref={(input) => { this.nameInput = input; }} \r\n                      onKeyUp={e => this.onKeyUp(e)}\r\n                      onKeyDown={e => this.onKeyDown(e)}\r\n                      className=\"expressionInput mono\"\r\n                      placeholder=\"type expression like '1>>2' or 'help' \"/>;\r\n    }\r\n\r\n    onKeyUp(e: any) {\r\n        var input = e.target;\r\n        if (e.keyCode != 13 || input.value.trim().length == 0) {\r\n            return;\r\n        }\r\n        \r\n        var commandInput = input.value;\r\n        this.history.unshift(commandInput);\r\n        this.historyIndex = -1;\r\n\r\n        input.value = '';        \r\n        this.props.onCommandEntered(commandInput);\r\n    }\r\n\r\n    onKeyDown(args: any) {\r\n\r\n        if(args.keyCode == 38) {\r\n            var newIndex = this.historyIndex+1;\r\n\r\n            if (this.history.length > newIndex) { // up\r\n                args.target.value = this.history[newIndex];\r\n                this.historyIndex = newIndex;\r\n            }\r\n\r\n            args.preventDefault();\r\n            return;\r\n        }\r\n\r\n        if(args.keyCode == 40) {\r\n            if(this.historyIndex > 0) { // down\r\n                args.target.value = this.history[--this.historyIndex];\r\n            }\r\n\r\n            args.preventDefault();\r\n        }\r\n    }\r\n}","import React from 'react';\r\nimport cmd from '../core/cmd';\r\n\r\ntype CommandLinkProps = {\r\n    command?:string;\r\n    text:string;\r\n}\r\n\r\nfunction CommandLink(props: CommandLinkProps) {\r\n    return <a href=\"javascript:void(0)\" onClick={e => cmd.execute(props.command || props.text)}>{props.text}</a>\r\n}\r\n\r\nexport default CommandLink;","import React from 'react';\r\nimport CommandLink from '../CommandLink';\r\nimport './HelpResultView.css';\r\n\r\nfunction HelpResultView() {\r\n    \r\n        return <div className=\"help helpResultTpl\">\r\n                        <div className=\"panel-container\">\r\n                            <div className=\"left-panel\">\r\n                                <div className=\"section\">\r\n                                    <strong className=\"section-title\">Bitiwse Calculation Commands</strong>\r\n                                <ul>\r\n                                    <li><code><CommandLink text=\"23 | 34\" /></code> — type bitwise expression to see result in binary (only positive integers are supported now)</li>\r\n                                    <li><code><CommandLink text=\"23 34\" /></code> — type one or more numbers to see their binary representations</li>\r\n                                </ul>\r\n                                </div>\r\n                                <div className=\"section\">\r\n                                    <strong className=\"section-title\">Ip Address Commands</strong>\r\n                                <ul>\r\n                                    <li><code><CommandLink text=\"127.0.0.1\" /></code> — enter single or multiple ip addresses (separated by space) to see their binary represenation</li>\r\n                                    <li><code><CommandLink text=\"192.168.0.1/8\" /></code> — subnet mask notiations are support as well</li>\r\n                                </ul>\r\n                                </div>\r\n                                <div className=\"section\">\r\n                                    <strong className=\"section-title\">Other Commands</strong>\r\n                                <ul>\r\n                                    <li><code><CommandLink text=\"clear\" /></code> — clear output pane</li>\r\n                                    <li><code><CommandLink text=\"help\" /></code> — display this help</li>\r\n                                    <li><code><CommandLink text=\"whatsnew\" /></code> — display changelog</li>\r\n                                    <li><code><CommandLink text=\"em\" /></code> — turn On/Off Emphasize Bytes</li>\r\n                                    <li><code><CommandLink text=\"light\" /></code> — set Light theme</li>\r\n                                    <li><code><CommandLink text=\"dark\" /></code> — set Dark theme</li>\r\n                                    <li><code><CommandLink text=\"midnight\" /></code> — set Midnight theme</li>\r\n                                    <li><code><CommandLink text=\"about\" /></code> — about the app</li>\r\n                                    <li><code><CommandLink text=\"guid\" /></code> — generate <a href=\"https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_.28random.29\">v4</a> GUID</li>\r\n                                </ul>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"right-panel\">\r\n                                <div className=\"section\">\r\n                                    <strong className=\"section-title\">Supported Bitwise Operations</strong><br/>\r\n                                    <small>\r\n                                        <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators\">\r\n                                            as implemented in JavaScript engine\r\n                                        </a>\r\n                                    </small>\r\n                                    <ul>\r\n                                        <li><code>&amp;</code> — bitwise AND</li>\r\n                                        <li><code>|</code> — bitwise inclusive OR</li>\r\n                                        <li><code>^</code> — bitwise exclusive XOR</li>\r\n                                        <li><code>~</code> — bitwise NOT</li>\r\n                                        <li><code>&lt;&lt;</code> — left shift</li>\r\n                                        <li><code>&gt;&gt;</code> — sign propagating right shift</li>\r\n                                        <li><code>&gt;&gt;&gt;</code> — zero-fill right shift</li>\r\n                                    </ul>\r\n                                </div>\r\n                          </div>\r\n                     </div>\r\n                 </div>;\r\n}\r\n\r\nexport default HelpResultView;\r\n","import React from 'react'\r\n\r\nfunction AboutResultView() {\r\n\r\n        return   <div className=\"aboutTpl\" data-result-type=\"help\">\r\n                        <p> Created by <a href=\"http://boryslevytskyi.github.io/\">Borys Levytskyi</a>. Please give it a like if BitwiseCmd has helped you in your work.</p>\r\n                        <p>If you have an idea, suggestion or you've spotted a bug here, please send it to <a href=\"mailto:&#098;&#105;&#116;&#119;&#105;&#115;&#101;&#099;&#109;&#100;&#064;&#103;&#109;&#097;&#105;&#108;&#046;&#099;&#111;&#109;?subject=Feedback\">&#098;&#105;&#116;&#119;&#105;&#115;&#101;&#099;&#109;&#100;&#064;&#103;&#109;&#097;&#105;&#108;&#046;&#099;&#111;&#109;</a> or tweet on <a href=\"http://twitter.com/BitwiseCmd\">@BitwiseCmd</a>. Your feedback is greatly appreciated.</p>\r\n                        <p><a href=\"https://github.com/BorisLevitskiy/BitwiseCmd\">Project on <strong>GitHub</strong></a></p>\r\n                    </div>;\r\n};\r\n\r\nexport default AboutResultView;","import React from 'react';\r\n\r\nexport type BinaryStringViewProps = {\r\n    allowFlipBits: boolean;\r\n    binaryString: string;\r\n    onFlipBit?: (input: FlipBitEventArg) => void;\r\n    emphasizeBytes: boolean;\r\n};\r\n\r\nexport type FlipBitEventArg = {\r\n    index: number;\r\n    binaryString: string;\r\n    $event: any;\r\n    newBinaryString: string\r\n};\r\n\r\nexport default class BinaryStringView extends React.Component<BinaryStringViewProps> {\r\n    render() {\r\n        return <span>{this.getChildren()}</span>\r\n    }\r\n\r\n    onBitClick(index: number, e : any) {\r\n        if(!this.props.allowFlipBits || !this.props.onFlipBit) {\r\n            return;\r\n        }\r\n\r\n        if(!this.props.onFlipBit) {\r\n            \r\n        }\r\n\r\n        const arr = this.props.binaryString.split('');\r\n        arr[index] = arr[index] == '0' ? '1' : '0';\r\n        const newBinaryString = arr.join('');\r\n\r\n        this.props.onFlipBit({ index: index, binaryString: this.props.binaryString, $event: e, newBinaryString });        \r\n    }\r\n\r\n    getChildren() {\r\n        var bits = this.createBits(this.props.binaryString.split(''));\r\n        \r\n        if(this.props.emphasizeBytes) {\r\n            return this.splitIntoBytes(bits);\r\n        }\r\n\r\n        return bits;\r\n    }\r\n\r\n    createBits(bitChars:string[]) : JSX.Element[] {\r\n        const allowFlipBits = this.props.allowFlipBits || false;\r\n        const css = allowFlipBits ? ' flipable' : ''\r\n\r\n        return bitChars.map((c, i) => {\r\n            var className = c == '0' ? `zero${css}` : `one${css}`;\r\n            return <span className={className} key={i} onClick={e => this.onBitClick(i, e)}>{c}</span>\r\n        });\r\n    }\r\n\r\n    splitIntoBytes(bits: JSX.Element[]) {\r\n        const bytes = [];\r\n\r\n        var key = 0;\r\n        while(bits.length > 0) {\r\n            bytes.push(<span key={key++} className=\"byte\">{bits.splice(0, 8)}</span>);\r\n        }\r\n        \r\n        return bytes;\r\n    }\r\n}","import { NumericOperand, ListOfNumbersExpression, BitwiseOperationExpression, ExpressionOperand } from '../../../expression/expression';\r\nimport { ExpressionInputItem, ExpressionInput } from '../../../expression/expression-interfaces';\r\n\r\ntype Config = {\r\n    emphasizeBytes: boolean;\r\n    allowFlipBits: boolean;\r\n}\r\n\r\ntype ExpressionItemModel = {\r\n    sign: string;\r\n    css: string;\r\n    expressionItem: ExpressionInputItem;\r\n    allowFlipBits: boolean;\r\n    label: string;\r\n}\r\n\r\nexport default class BitwiseExpressionViewModel {\r\n\r\n    emphasizeBytes: boolean;\r\n    items: ExpressionItemModel[];\r\n    maxNumberOfBits: number;\r\n    allowFlipBits: boolean;\r\n\r\n    constructor({ emphasizeBytes = false, allowFlipBits = false} : Config) {\r\n        this.emphasizeBytes = emphasizeBytes;\r\n        this.items = [];\r\n        this.maxNumberOfBits = 0;\r\n        this.allowFlipBits = allowFlipBits === true;\r\n    }\r\n\r\n    static buildListOfNumbers(expr : ListOfNumbersExpression, config : Config) {\r\n        var model = new BitwiseExpressionViewModel(config);\r\n        expr.numbers.forEach(op => model.addOperandRow(op));\r\n        model.maxNumberOfBits = BitwiseExpressionViewModel.getNumberOfBits(model.maxNumberOfBits, model.emphasizeBytes);\r\n        return model;\r\n    }\r\n\r\n    static buildMultiple (expr : BitwiseOperationExpression, config : Config) {\r\n\r\n        var op = expr.expressionItems[0],\r\n            i = 0, len = expr.expressionItems.length,\r\n            ex, m = new BitwiseExpressionViewModel(config);\r\n\r\n        var prev : NumericOperand | null = null;\r\n\r\n        for (;i<len;i++) {\r\n            ex = expr.expressionItems[i];\r\n            if(ex instanceof NumericOperand) {\r\n                m.addOperandRow(ex);\r\n                prev = ex;\r\n                continue;\r\n            }\r\n\r\n            var eo = ex as ExpressionOperand;\r\n\r\n            // If it a single NOT expression\r\n            if(eo.isNotExpression) {\r\n                m.addExpressionOperandRow(eo);\r\n                var notResult = eo.evaluate();\r\n                m.addExpressionResultRow(notResult);\r\n                prev = notResult;\r\n            }\r\n            else if(eo.isShiftExpression){\r\n                prev = eo.evaluate(prev as NumericOperand);\r\n                m.addShiftExpressionResultRow(eo, prev);\r\n            } else {\r\n\r\n                prev = eo.evaluate(prev as NumericOperand);\r\n                m.addExpressionOperandRow(eo);\r\n                m.addExpressionResultRow(prev);\r\n            }\r\n        }\r\n\r\n        m.maxNumberOfBits = BitwiseExpressionViewModel.getNumberOfBits(m.maxNumberOfBits, m.emphasizeBytes);\r\n        return m;\r\n    };\r\n\r\n    static buildNot (expression: ExpressionOperand, config : Config) {\r\n        \r\n        var m = new BitwiseExpressionViewModel(config);\r\n        m.addExpressionOperandRow(expression);\r\n        m.addExpressionResultRow(expression.evaluate());\r\n        m.maxNumberOfBits = BitwiseExpressionViewModel.getNumberOfBits(m.maxNumberOfBits, m.emphasizeBytes);\r\n        return m;\r\n    };\r\n\r\n    addOperandRow(operand: NumericOperand) {\r\n        this.maxNumberOfBits = Math.max(operand.getLengthInBits(), this.maxNumberOfBits);\r\n        this.items.push({ \r\n            sign:'', \r\n            css: '',\r\n            expressionItem: operand,\r\n            allowFlipBits: this.allowFlipBits,\r\n            label: ''\r\n        });\r\n    };\r\n\r\n    addExpressionOperandRow(expression: ExpressionOperand) {\r\n        const resultNumber = expression.isNotExpression ? expression.evaluate() : expression.getUnderlyingOperand();\r\n        this.maxNumberOfBits = Math.max(resultNumber.getLengthInBits(), this.maxNumberOfBits);\r\n        \r\n        this.items.push({ \r\n            sign: expression.sign, \r\n            css: '',\r\n            label: this.getLabel(resultNumber),\r\n            expressionItem: expression.operand,\r\n            allowFlipBits: this.allowFlipBits\r\n        });\r\n    };\r\n\r\n    addShiftExpressionResultRow(expression : ExpressionOperand, resultOperand : NumericOperand) {\r\n        this.maxNumberOfBits = Math.max(resultOperand.getLengthInBits(), this.maxNumberOfBits);\r\n        this.items.push({\r\n            sign: expression.sign + expression.operand.toString(),\r\n            css: 'expression-result',\r\n            expressionItem: resultOperand,\r\n            allowFlipBits: false,\r\n            label: ''\r\n        });\r\n    };\r\n\r\n    addExpressionResultRow(operand : NumericOperand) {\r\n        this.maxNumberOfBits = Math.max(operand.getLengthInBits(), this.maxNumberOfBits);\r\n        this.items.push({ \r\n            sign:'=', \r\n            css: 'expression-result',\r\n            expressionItem: operand, \r\n            allowFlipBits: false,\r\n            label: '',\r\n        });\r\n    };\r\n\r\n    getLabel (op: NumericOperand) : string {\r\n        \r\n        if(op.base == 'bin') {\r\n            return op.toString(\"dec\");\r\n        }\r\n\r\n        return op.toString();\r\n    }\r\n\r\n    // TODO: move this method elsewhere. It is also used in LisOfNumbersExpressionView.js\r\n    static getNumberOfBits = function (bits : number, emphasizeBytes : boolean) : number {\r\n        if(emphasizeBytes && bits % 8 != 0) {\r\n             if(bits < 8) {\r\n                 return 8;\r\n             }\r\n\r\n             var n = bits - (bits % 8);\r\n             return n + 8;\r\n        }\r\n\r\n        return bits;\r\n    };\r\n\r\n    static createModel(expr : ExpressionInput, emphasizeBytes: boolean) : BitwiseExpressionViewModel {\r\n        if(expr instanceof ListOfNumbersExpression) {\r\n            return BitwiseExpressionViewModel.buildListOfNumbers(expr, { \r\n                emphasizeBytes: emphasizeBytes, \r\n                allowFlipBits: true \r\n            });\r\n        }\r\n\r\n        if(expr instanceof BitwiseOperationExpression) {\r\n            return BitwiseExpressionViewModel.buildMultiple(expr, { \r\n                emphasizeBytes: emphasizeBytes,\r\n                allowFlipBits: false \r\n            });\r\n        }\r\n\r\n        throw new Error(\"Cannot build BitwiseExpressionViewModel out of expression \" + expr);\r\n    }\r\n}","import React from 'react';\r\nimport formatter from '../../../core/formatter';\r\nimport BinaryStringView, { FlipBitEventArg } from '../BinaryString';\r\nimport BitwiseExpressionViewModel from './BitwiseExpressionModel';\r\nimport { ExpressionInput, ExpressionInputItem } from '../../../expression/expression-interfaces';\r\nimport { ExpressionOperand, NumericOperand } from '../../../expression/expression';\r\n\r\ntype BitwiseOperationExpressionViewProps = {\r\n    expression: ExpressionInput;\r\n    emphasizeBytes: boolean;\r\n}\r\n\r\ntype BitwiseOperationExpressionViewState = {\r\n\r\n}\r\n\r\nexport default class BitwiseOperationExpressionView extends React.Component<BitwiseOperationExpressionViewProps, BitwiseOperationExpressionViewState>  {\r\n    constructor(props: BitwiseOperationExpressionViewProps) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n    render() {\r\n        var rows = this.getRows();\r\n        if(!rows) {\r\n            return null;\r\n        }\r\n\r\n        return <table className=\"expression\">\r\n                    <tbody>\r\n                            {rows}\r\n                    </tbody>\r\n                </table>\r\n    }\r\n\r\n    getRows() : JSX.Element[] | null {\r\n        var model = BitwiseExpressionViewModel.createModel(this.props.expression, this.props.emphasizeBytes);\r\n\r\n        return model.items.map((itm, i) => \r\n            <ExpressionRow \r\n                key={i} \r\n                sign={itm.sign}\r\n                css={itm.css}\r\n                allowFlipBits={itm.allowFlipBits}\r\n                expressionItem={itm.expressionItem}\r\n                emphasizeBytes={this.props.emphasizeBytes} \r\n                maxNumberOfBits={model.maxNumberOfBits} \r\n                onBitFlipped={() => this.onBitFlipped()} />);\r\n    }\r\n\r\n    onBitFlipped() {\r\n        this.forceUpdate();\r\n        //this.setState({d:new Date()});\r\n    }\r\n}\r\n\r\ntype ExpressionRowProps = {\r\n    sign: string, \r\n    css: string, \r\n    maxNumberOfBits: number, \r\n    emphasizeBytes: boolean, \r\n    allowFlipBits: boolean, \r\n    expressionItem: ExpressionInputItem,\r\n    onBitFlipped: any\r\n}\r\n\r\nclass ExpressionRow extends React.Component<ExpressionRowProps> {\r\n    constructor(props: ExpressionRowProps) {\r\n       super(props);\r\n       this.state = { operand: null };\r\n   }\r\n    render() {\r\n        const { sign, css, maxNumberOfBits, emphasizeBytes, allowFlipBits } = this.props;\r\n        \r\n        return <tr className={css}>\r\n                    <td className=\"sign\">{sign}</td>\r\n                    <td className=\"label\">{this.getLabel()}</td>\r\n                    <td className=\"bin\">\r\n                        <BinaryStringView\r\n                            emphasizeBytes={emphasizeBytes} \r\n                            binaryString={formatter.padLeft(this.getBinaryString(), maxNumberOfBits, '0')} \r\n                            allowFlipBits={allowFlipBits} \r\n                            onFlipBit={args => this.flipBit(args)}/>\r\n                    </td>\r\n                    <td className=\"other\">{this.getOther()}</td>\r\n                </tr>;;\r\n    }\r\n\r\n    getBinaryString() : string {            \r\n        return this.props.expressionItem.evaluate().toBinaryString();\r\n    }\r\n\r\n    getLabel(): string {\r\n\r\n        // For expressions like |~2 \r\n        // TODO: find a better way...\r\n        if(this.props.expressionItem.isExpression) {\r\n            const ex = this.props.expressionItem as ExpressionOperand;\r\n            return ex.sign + this.getLabelString(ex.getUnderlyingOperand());\r\n        }\r\n\r\n        return this.getLabelString(this.props.expressionItem.getUnderlyingOperand());         \r\n    }\r\n\r\n    getOther() {\r\n\r\n        if(this.props.expressionItem.isExpression) {\r\n            const ex = this.props.expressionItem as ExpressionOperand;\r\n            const op = ex.evaluate();\r\n\r\n            return op.toString();\r\n        }\r\n\r\n        return this.props.expressionItem.evaluate().toOtherKindString();\r\n    }\r\n\r\n    getLabelString (op: NumericOperand) : string {\r\n        return op.toString(op.base == 'bin' ? 'dec' : op.base);\r\n    }\r\n\r\n     flipBit(args: FlipBitEventArg) {    \r\n\r\n        const op  = this.props.expressionItem.getUnderlyingOperand();\r\n        const { index, binaryString } = args;\r\n\r\n        var arr = binaryString.split('');\r\n        arr[index] = arr[index] == '0' ? '1' : '0';\r\n        var bin = arr.join('');\r\n\r\n        var newValue = parseInt(bin, 2);\r\n        op.setValue(newValue);\r\n\r\n        this.props.onBitFlipped();\r\n    }\r\n}","import React from 'react';\r\nimport CommandLink from '../CommandLink';\r\nimport './WhatsNewResultView.css';\r\n\r\nfunction WhatsnewResultView() {\r\n    \r\n        return <div className=\"changelog\">\r\n                    <h3>Changelog</h3>\r\n                    <div className=\"item item-new\">\r\n                        <p><span className=\"soft date\">Jun 14th, 2021</span> <br/>\r\n                        Added support of ip addresses and subnet masks notatioans. Try them out: \r\n                        </p>\r\n                        <ul>\r\n                            <li>Single IP address <CommandLink text=\"127.0.0.1\" /></li>\r\n                            <li>Multiple IP addresses and subnet mask notations <CommandLink text=\"127.0.0.1 192.168.0.0/24\" /></li>\r\n                        </ul>\r\n                        \r\n                    </div>\r\n                    <div className=\"item\">\r\n                        <p><span className=\"soft date\">Jun 6th, 2017</span> <br/>\r\n                        Added <code><CommandLink text=\"guid\" /></code> command. Use it for generating v4 GUIDs </p>\r\n                    </div>\r\n                    <div className=\"item\">\r\n                        <p><span className=\"soft date\">May 27th, 2017</span> <br/>\r\n                        Added support of binary number notation (e.g. <code><CommandLink text=\"0b10101\" /></code>). </p>\r\n                    </div>  \r\n                    <div className=\"item\">\r\n                        <p><span className=\"soft\">May 20th, 2017</span> <br/>\r\n                        New <CommandLink text=\"Midnight\" /> theme added. </p>\r\n                    </div>  \r\n                    <div className=\"item\">\r\n                        <p><span className=\"soft\">May 16th, 2017</span> <br/>\r\n                        Complete rewrite using React. Old implementation is available at <a href=\"http://bitwisecmd.com/old\">http://bitwisecmd.com/old</a>. Please let me know if you have problems with this release by <a href=\"https://github.com/BorysLevytskyi/BitwiseCmd/issues\">creating issue</a> in Github Repo.</p>\r\n                    </div>  \r\n              </div>;\r\n}\r\n\r\nexport default WhatsnewResultView;","import React from 'react';\r\nimport { IpAddress, OctetNumber, getNetworkClass } from '../../ipaddress/ip';\r\nimport formatter from '../../core/formatter'\r\nimport BinaryStringView from './BinaryString';\r\nimport './IpAddressView.css';\r\ntype IpAddressViewProps = {\r\n    ipAddresses: IpAddress[]\r\n};\r\n\r\nexport class IpAddressView extends React.Component<IpAddressViewProps> \r\n{\r\n    \r\n    render() {\r\n        if(this.props.ipAddresses.length === 1)\r\n            return this.renderSingleIp(this.props.ipAddresses[0]);\r\n        \r\n        return this.renderMultipleIps();\r\n    }\r\n\r\n    renderMultipleIps() {\r\n        return <table className=\"expression\">\r\n            <tbody>\r\n                {this.props.ipAddresses.map((ip, i) => <tr key={i}>\r\n                        <td><strong>{ip.toString()}</strong></td>\r\n                        <td>\r\n                            {this.bin(ip.firstByte, 1, ip)}.{this.bin(ip.secondByte, 2, ip)}.{this.bin(ip.thirdByte, 3, ip)}.{this.bin(ip.fourthByte, 4, ip)}\r\n                        </td>\r\n                    </tr>)}\r\n            </tbody>\r\n        </table>\r\n    }\r\n\r\n    renderSingleIp(ip: IpAddress) {\r\n        return <table className=\"expression\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>{ip.firstByte}</th>\r\n                        <th>{ip.secondByte}</th>\r\n                        <th>{ip.thirdByte}</th>\r\n                        <th>{ip.fourthByte}</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr>\r\n                        <td>{this.bin(ip.firstByte, 1, ip)}</td>\r\n                        <td>{this.bin(ip.secondByte, 2, ip)}</td>\r\n                        <td>{this.bin(ip.thirdByte, 3, ip)}</td>\r\n                        <td>{this.bin(ip.fourthByte, 4, ip)}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td colSpan={2} className=\"ip-address-info\">\r\n                            <a href=\"https://www.wikiwand.com/en/Classful_network\" target=\"_blank\">Network Class: {getNetworkClass(ip).toUpperCase()}</a>\r\n                        </td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>;\r\n    }\r\n\r\n    bin(value: number, octetNumber: OctetNumber, ip: IpAddress) {\r\n        return <BinaryStringView \r\n            binaryString={fmt(value)} \r\n            key={octetNumber} \r\n            emphasizeBytes={false} \r\n            allowFlipBits={true} \r\n            onFlipBit={e => this.onFlippedBit(e.newBinaryString, octetNumber, ip)} />;\r\n    }\r\n    \r\n    onFlippedBit(binaryString: string, number: OctetNumber, ip : IpAddress) {\r\n        ip.setOctet(number, parseInt(binaryString, 2));\r\n        this.forceUpdate();\r\n    }\r\n};\r\n\r\nfunction fmt(num: number) : string {\r\n    return formatter.padLeft(formatter.formatString(num, 'bin'), 8, '0');\r\n}\r\n\r\nexport default IpAddressView;","import React from 'react';\r\nimport HelpResult from '../models/HelpResult';\r\nimport AboutResult from '../models/AboutResult';\r\nimport HelpResultView from './results/HelpResultView';\r\nimport AboutResultView from './results/AboutResultView';\r\nimport ExpressionResult from '../models/ExpressionResult';\r\nimport BitwiseOperationExpressionView from './results/expressions/BitwiseOperationExpressionView';\r\nimport WhatsnewResult from '../models/WhatsnewResult';\r\nimport WhatsnewResultView from './results/WhatsNewResultView';\r\nimport {UnhandledErrorResult, ErrorResult} from '../models/ErrorResults';\r\nimport StringResult from '../models/StringResult';\r\nimport IpAddressView from './results/IpAddressView';\r\n\r\nimport CommandResult from '../models/CommandResult';\r\nimport AppState from '../core/AppState';\r\nimport IpAddressResult from '../models/IpAddressResult';\r\n\r\ntype DisplayResultProps = {\r\n    content : CommandResult,\r\n    appState: AppState,\r\n    inputHash: string,\r\n    input: string,\r\n    key: number\r\n}\r\n\r\nexport default class DisplayResult extends React.Component<DisplayResultProps> {\r\n    render() {\r\n\r\n        return <div className=\"result\">\r\n                        <div className=\"input mono\"><span className=\"cur\">&gt;</span>{this.props.content.input}<a className=\"hashLink\" title=\"Link for this expression\" href={window.location.pathname + '#' + this.props.inputHash}>#</a></div>\r\n                        <div className=\"content\">\r\n                            {this.findResultComponent(this.props.content)}\r\n                        </div>\r\n                    </div>;\r\n    }\r\n\r\n    findResultComponent(result: CommandResult) : JSX.Element  {\r\n\r\n        if(result instanceof HelpResult) {\r\n            return <HelpResultView  />\r\n        }\r\n\r\n        if(result instanceof AboutResult) {\r\n            return <AboutResultView />\r\n        }\r\n\r\n        if(result instanceof ExpressionResult) {\r\n            return <BitwiseOperationExpressionView expression={result.expression} emphasizeBytes={this.props.appState.emphasizeBytes} /> \r\n        }\r\n\r\n        if(result instanceof WhatsnewResult) {\r\n            return <WhatsnewResultView />\r\n        }\r\n\r\n        if(result instanceof StringResult) {\r\n            return <p>{result.value}</p>\r\n        }\r\n\r\n        if (result instanceof UnhandledErrorResult) {\r\n            return <div className=\"result\">\r\n                    <div className=\"error\">(X_X) Ooops.. Something ain' right: <strong>{result.error.message}</strong></div>\r\n               </div>\r\n        }\r\n\r\n        if (result instanceof ErrorResult) {\r\n            return <div className=\"result\">\r\n                    <div className=\"error\">{result.errorMessage}</div>\r\n               </div>\r\n        }\r\n\r\n        if(result instanceof IpAddressResult) {\r\n            const ipResult = result as IpAddressResult;\r\n\r\n            return <IpAddressView ipAddresses={ipResult.ipAddresses} />\r\n        }\r\n\r\n        return <div className=\"result\">\r\n                    <div className=\"error\">¯\\_(ツ)_/¯ Sorry, i don&prime;t know what <strong>{this.props.content.input}</strong> is</div>\r\n               </div>\r\n    }\r\n}","import AppState from \"../core/AppState\";\r\nimport React from \"react\";\r\n\r\ntype IndicatorsProps = {\r\n    appState: AppState\r\n};\r\n\r\nfunction Indicators(props:  IndicatorsProps) {\r\n\r\n    const list = [];\r\n    const state = props.appState;\r\n\r\n    if(props.appState.env != 'prod') {\r\n        list.push(state.env);\r\n    }\r\n\r\n    if(props.appState.debugMode) {\r\n        list.push(\"debug\");\r\n    }\r\n\r\n    if(localStorage.getItem('TrackAnalytics') === 'false') {\r\n        list.push(\"notrack\");\r\n    }\r\n\r\n    if(list.length == 0)\r\n        return null;\r\n\r\n    return <div>\r\n            {list.map(i => <span>{i}&nbsp;</span>)}\r\n        </div>\r\n}\r\n\r\nexport default Indicators;","import React from 'react';\r\nimport InputBox from './components/InputBox';\r\nimport DisplayResultView from './components/DisplayResultView';\r\nimport AppState from './core/AppState';\r\nimport cmd from './core/cmd';\r\nimport CommandResult from './models/CommandResult';\r\nimport log from 'loglevel';\r\nimport Indicators from './components/Indicators';\r\nimport CommandLink from './components/CommandLink';\r\n\r\ntype AppRootProps = {\r\n    appState: AppState,    \r\n};\r\n\r\ntype AppRootState = {\r\n    uiTheme: string,\r\n    emphasizeBytes: boolean,\r\n    commandResults: CommandResult[]\r\n}\r\n\r\nexport default class AppRoot extends React.Component<AppRootProps, AppRootState> {\r\n    \r\n    componentWillMount() {\r\n        this.refresh();\r\n        this.props.appState.onChange(() => this.refresh());\r\n    }\r\n\r\n    refresh() {\r\n        this.setState(this.props.appState);\r\n    }\r\n    \r\n    getIndicator(value : boolean) {\r\n        return value ? 'on' : 'off';\r\n    }\r\n\r\n    getResultViews() : JSX.Element[] {\r\n        log.debug('getting result views')\r\n        var results = this.state.commandResults.map((r, i) => <DisplayResultView key={i} content={r} input={r.input} inputHash={r.inputHash} appState={this.props.appState} />);\r\n        return results;\r\n    }\r\n\r\n    toggleEmphasizeBytes() {\r\n        this.props.appState.toggleEmphasizeBytes();\r\n    }\r\n\r\n    render() {\r\n        return <div className={`app-root ${this.state.uiTheme}`}>\r\n                    <Indicators appState={this.props.appState} />\r\n                    <div className=\"header\">\r\n                        <h1>Bitwise<span className=\"header-cmd\">Cmd</span>\r\n                        </h1>\r\n                        <ul className=\"top-links\">\r\n                            <li>\r\n                                <a href=\"https://github.com/BorisLevitskiy/BitwiseCmd\"><i className=\"icon github\">&nbsp;</i><span className=\"link-text\">Project on GitHub</span></a>\r\n                            </li>\r\n                            <li>\r\n                                <a href=\"https://twitter.com/BitwiseCmd\"><i className=\"icon twitter\">&nbsp;</i><span className=\"link-text\">Twitter</span></a>\r\n                            </li>\r\n                            <li>\r\n                                <a href=\"mailto:&#098;&#105;&#116;&#119;&#105;&#115;&#101;&#099;&#109;&#100;&#064;&#103;&#109;&#097;&#105;&#108;&#046;&#099;&#111;&#109;?subject=Feedback\"><i className=\"icon feedback\">&nbsp;</i><span className=\"link-text\">Send Feedback</span></a>\r\n                            </li>\r\n                        </ul>\r\n                    </div>\r\n\r\n                    <div className=\"expressionInput-container\">\r\n                        <InputBox onCommandEntered={(input) => cmd.execute(input)} />\r\n\r\n                        <span className=\"configPnl\">\r\n                            <span id=\"emphasizeBytes\" data-cmd=\"em\" className={\"indicator \" + this.getIndicator(this.state.emphasizeBytes)} title=\"Toggle Emphasize Bytes\" onClick={e => this.toggleEmphasizeBytes()}>[em]</span>\r\n                        </span>\r\n                    </div>\r\n\r\n                    <div id=\"output\">\r\n                    {this.getResultViews()}\r\n                    </div>\r\n                </div>;\r\n    }\r\n}","export default {\r\n    encodeHash: function(input:string):string {\r\n        return encodeURI(input.trim().replace(/\\s/g,','));\r\n    },\r\n    decodeHash: function(hashValue:string):string {\r\n        return decodeURI(hashValue).replace(/^\\#/, '').replace(/,/g,' ');\r\n    },\r\n    getArgs: function (hashValue:string) : string[] {\r\n\r\n        var decodedHash = this.decodeHash(hashValue);\r\n        var args : string[] = [];\r\n\r\n        splitHashList(decodedHash).forEach(function(value) {\r\n            args.push(value);\r\n        });\r\n\r\n        return args;\r\n    }\r\n};\r\n\r\nfunction splitHashList(str: string) : string[] {\r\n    var values = [];\r\n\r\n    if(str.indexOf('||')) {\r\n    str.split('||').forEach(function (v) {\r\n        if (v.length > 0) {\r\n            values.push(v);\r\n        }\r\n    });\r\n    } else {\r\n        values.push(str);\r\n    }\r\n\r\n    return values;\r\n}","import AppState from './core/AppState';\r\nimport appStateStore from './core/appStateStore';\r\nimport cmd from './core/cmd';\r\nimport commands from './commands';\r\nimport AppRoot from './AppRoot';\r\nimport hash from './core/hash';\r\nimport log from 'loglevel';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nconst env = window.location.host === \"bitwisecmd.com\" ? 'prod' : 'stage';\r\nsetupLogger(env);\r\n\r\nconst appState = createAppState(env);\r\n\r\ncommands.initialize(cmd, appState);\r\n\r\nexecuteStartupCommands();\r\n\r\nvar root = <AppRoot appState={appState} />;\r\nReactDOM.render(root, document.getElementById('root'));\r\n\r\nlog.debug(\"started\");\r\n\r\nfunction createAppState(env:string) {\r\n    var stateData = appStateStore.getPersistedData();\r\n    const appState = new AppState(stateData, env);\r\n    appStateStore.watch(appState);\r\n    log.debug(\"appState initialized\", appState);\r\n    return appState;\r\n}\r\n\r\nfunction setupLogger(env: Env) {\r\n    if(env != 'prod'){\r\n        log.setLevel(\"debug\");\r\n        log.debug(`Log level is set to debug. Env: ${env}`)\r\n    } else {\r\n        log.setLevel(\"warn\");\r\n    }\r\n}\r\n\r\nfunction executeStartupCommands() {\r\n    var hashArgs = hash.getArgs(window.location.hash);\r\n\r\n    var startupCommands = ['help', '127.0.0.1 192.168.0.0/8', '1|2&6','4 0b1000000 0x80'];\r\n\r\n    if(appState.wasOldVersion) {\r\n        startupCommands = [\"whatsnew\"];\r\n    }\r\n\r\n    if(hashArgs.length > 0) {\r\n        startupCommands = hashArgs;\r\n    }\r\n\r\n    startupCommands.forEach(cmd.execute.bind(cmd));\r\n}\r\n\r\ntype Env = 'prod' | 'stage';\r\n"],"sourceRoot":""}