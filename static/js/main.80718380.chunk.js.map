{"version":3,"sources":["expression/numberParser.ts","expression/NumericOperand.ts","expression/ExpressionOperand.ts","core/is.ts","shell/cmd.ts","shell/components/InputBox.tsx","shell/components/DisplayResultView.tsx","shell/components/DebugIndicators.tsx","core/hash.ts","core/components/CommandLink.tsx","shell/components/TopLinks.tsx","shell/components/AppRoot.tsx","shell/components/ErrorResultView.tsx","core/formatter.ts","core/components/BinaryString.tsx","networking/components/IpAddressView.tsx","networking/models.ts","networking/ip-parser.ts","core/byte.ts","networking/subnet-utils.tsx","networking/components/IpAddressBinaryString.tsx","networking/components/SubnetView.tsx","shell/analytics.ts","networking/module.tsx","expression/ListOfNumbersExpression.ts","expression/BitwiseOperationExpression.ts","expression/expression.ts","expression/components/BitwiseExpressionModel.ts","expression/components/BitwiseOperationExpressionView.tsx","expression/module.tsx","shell/components/AboutResultView.tsx","shell/components/HelpResultView.tsx","shell/components/TextResultView.tsx","shell/components/WhatsNewResultView.tsx","shell/AppState.ts","shell/appStateStore.ts","shell/startup.ts","shell/module.tsx","shell/components/UnknownInputResultView.tsx","index.tsx"],"names":["knownParsers","regex","radix","base","prefix","numberParser","NumberParser","parsers","Object","classCallCheck","this","input","_this","map","p","applyParser","reduce","c","n","m","match","length","parser","rawInput","test","value","parseInt","replace","globalId","NumericOperand","id","lengthInBits","isExpression","getBitLength","Math","floor","log","kind","Error","toBaseString","toString","getOtherBase","num","parsed","parse","hexVal","abs","hex","indexOf","substr","ExpressionOperand","expressionString","operand","sign","D_MyStuff_Pet_BitwiseCmd_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","isShiftExpression","isNotExpression","evaluatedOperand","evaluate","str","create","eval","getUnderlyingOperand","is","obj","Array","DEFUALT_COMMAND_OPTIONS","doNotTrack","shell_cmd","CmdShell","debugMode","handlers","errorHandler","createClass","key","ops","debug","concat","assign","trim","toLowerCase","handler","findHandler","invokeHandler","e","handleError","h","cmd","createHandler","canHandle","handle","push","console","warn","JSON","stringify","arguments","filter","options","cmdResult","err","error","InputBox","props","possibleConstructorReturn","getPrototypeOf","call","history","historyIndex","nameInput","focus","_this2","react_default","a","createElement","type","ref","onKeyUp","onKeyDown","className","placeholder","autoComplete","target","keyCode","commandInput","unshift","onCommandEntered","args","newIndex","preventDefault","React","Component","DisplayResultView","title","href","window","location","pathname","inputHash","children","DebugIndicators","list","state","appState","env","localStorage","getItem","i","substring","hash","encodeHash","encodeURIComponent","decodeHash","hashValue","decodeURIComponent","getArgs","decodedHash","split","s","forEach","CommandLink","_ref","icon","command","text","onClick","execute","index_es","TopLinks","components_CommandLink","faDonate","faGithub","size","faTwitter","faEnvelope","AppRoot","refresh","onChange","setState","commandResults","r","DisplayResultView_DisplayResultView","view","toggleEmphasizeBytes","_this3","uiTheme","components_DebugIndicators","components_TopLinks","InputBox_InputBox","data-cmd","getIndicator","emphasizeBytes","getResultViews","ErrorResultView","errorMessage","formatter","formatString","getBase","padLeft","symbol","sb","prototype","slice","join","bin","number","emBin","BinaryStringView","getChildren","index","allowFlipBits","onFlipBit","arr","binaryString","newBinaryString","$event","bits","createBits","splitIntoBytes","bitChars","css","onBitClick","bytes","splice","IpAddressView","_React$Component","apply","inherits","ipAddresses","ip","firstByte","secondByte","thirdByte","fourthByte","octetNumber","BinaryString_BinaryStringView","onFlippedBit","setOctet","forceUpdate","IpAddressWithSubnetMask","ipAddress","maskBits","IpAddress","octet","SubnetCommand","definition","spaceLengthInBits","pow","ipAddressParser","result","parseCommand","matches","getMaches","nextInput","correctInputs","incorrectInputs","ParsingError","v","parsedObjects","parseSingle","parsingErrors","createSubnetDefinition","startsWith","exec","invalid","first","second","third","fourth","maskPart","items","message","flipBitsToZero","byte","numberOfBits","flipBitsToOne","createSubnetMaskByte","createSubnetMaskIp","ipm","mask","getBroadCastAddress","flipSubnetMaskBits","flipper","fullByte","flip","IpAddressBinaryString","Fragment","SubnetRow","descr","data-test-name","components_IpAddressBinaryString","SubnetView","_useState","useState","subnet","_useState2","slicedToArray","setSubnet","getAdressSpaceSize","newInput","disabled","sendAnalyticsEvent","evt","bitwiseCmdAnalyticsHandler","delivered","trackCommand","action","eventCategory","eventAction","networkingAppModule","setup","addCommandResult","components_ErrorResultView","components_SubnetView","networking_components_IpAddressView","ListOfNumbersExpression","numbers","maxBitsLength","BitwiseOperationExpression","expressions","expressionItems","ExpressionParser","factories","trimmed","canCreate","factory","l","ListOfNumbersExpressionFactory","BitwiseOperationExpressionFactory","fullRegex","lastIndex","normalizeString","operands","normalizedString","parseMatch","addFactory","BitwiseExpressionViewModel","_ref$emphasizeBytes","_ref$allowFlipBits","maxNumberOfBits","max","getLengthInBits","expressionItem","label","expression","resultNumber","getLabel","resultOperand","op","expr","config","model","addOperandRow","getNumberOfBits","ex","len","prev","eo","addExpressionOperandRow","notResult","addExpressionResultRow","addShiftExpressionResultRow","buildListOfNumbers","buildMultiple","BitwiseOperationExpressionView","rows","getRows","createModel","itm","BitwiseOperationExpressionView_ExpressionRow","onBitFlipped","ExpressionRow","_this4","_this$props","getBinaryString","flipBit","getOther","toBinaryString","getLabelString","toOtherKindString","newValue","setValue","expressionAppModule","canParse","BitwiseOperationExpressionView_BitwiseOperationExpressionView","AboutResultView","data-result-type","HelpResultView","TextResultView","WhatsnewResultView","APP_VERSION","AppState","persistData","version","changeHandlers","persistedVersion","wasOldVersion","pageVisitsCount","donationClicked","pageVisistsCount","ceil","random","Date","now","triggerChanged","theme","appStateStore","getPersistedData","json","watch","setItem","getPersistData","STARTUP_COMMAND_KEY","DEFAULT_COMMANDS","bootstrapAppData","shellModule","components_HelpResultView","clearCommandResults","setUiTheme","components_AboutResultView","components_WhatsNewResultView","components_TextResultView","uuid","toggleDebugMode","onDonationClicked","removeItem","onError","UnknownInputResultView","appData","host","setLevel","setupLogger","stateData","createAppState","startupCommands","hashArgs","loadStoredCommands","getStartupCommands","components_UnknownInputResultView","root","AppRoot_AppRoot","ReactDOM","render","document","getElementById","registerVisit"],"mappings":"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","file":"static/js/main.80718380.chunk.js","sourcesContent":["import { NumberBase } from \"./expression-interfaces\";\r\n\r\nconst decimalRegex = /^-?\\d+$/;\r\nconst hexRegex = /^-?0x[0-9,a-f]+$/i;\r\nconst binRegex = /^-?0b[0-1]+$/i;\r\nconst operatorRegex = /^<<|>>|<<<|\\&|\\|\\^|~$/;\r\n\r\ninterface ParserConfig {\r\n    regex: RegExp,\r\n    radix: number,\r\n    base: NumberBase,\r\n    prefix: string|RegExp\r\n}\r\n\r\nexport interface ParsedNumber {\r\n    value: number;\r\n    base: NumberBase;\r\n    input: string;\r\n}\r\n\r\nvar knownParsers : ParserConfig[] = [\r\n    { regex: decimalRegex, radix: 10, base: 'dec', prefix: '^$' },\r\n    { regex: hexRegex, radix: 16, base: 'hex', prefix:/0x/i },\r\n    { regex: binRegex, radix: 2, base: 'bin', prefix:/0b/i }];\r\n\r\n\r\nclass NumberParser {\r\n\r\n    parsers: ParserConfig[];\r\n\r\n    constructor(parsers: ParserConfig[])\r\n    {\r\n        this.parsers = parsers;\r\n    }\r\n\r\n    parse (input : string) : ParsedNumber | null {\r\n        return this.parsers.map(p => this.applyParser(p, input)).reduce((c, n) => c || n);\r\n    };\r\n\r\n    parseOperator (input: string) : string | null {\r\n        var m = input.match(input);\r\n        \r\n        if(m == null || m.length == 0) {\r\n            return null;\r\n        }\r\n\r\n        return m[0];\r\n    };\r\n\r\n    applyParser(parser : ParserConfig, rawInput: string) : ParsedNumber | null {\r\n    \r\n        if(!parser.regex.test(rawInput)) {\r\n            return null;\r\n        }\r\n            \r\n        var value = parseInt(rawInput.replace(parser.prefix, ''), parser.radix);\r\n    \r\n        return  {\r\n            value: value,\r\n            base: parser.base,\r\n            input: rawInput\r\n        }    \r\n    }\r\n}\r\n\r\nconst numberParser = new NumberParser(knownParsers);\r\n\r\nexport {numberParser};","import {numberParser} from './numberParser';\r\nimport { ExpressionInputItem, NumberBase } from './expression-interfaces';\r\n\r\nvar globalId : number = 1;\r\n\r\n// Represents numeric value\r\nexport default class NumericOperand implements ExpressionInputItem {\r\n    id: number;\r\n    value: number;\r\n    base: NumberBase;\r\n    lengthInBits: number;\r\n    isExpression: boolean;\r\n\r\n    constructor(value : number, base?: NumberBase) {\r\n        this.id = globalId++;\r\n        this.value = value;\r\n        this.base = base || \"dec\";\r\n        this.lengthInBits = NumericOperand.getBitLength(this.value);\r\n        this.isExpression = false;\r\n    }\r\n            \r\n    getLengthInBits() {\r\n        if(this.value < 0) {\r\n            return 32;\r\n        }\r\n        return Math.floor(Math.log(this.value) / Math.log(2)) + 1;\r\n    };\r\n\r\n    getOtherBase(kind?: NumberBase) : NumberBase {\r\n        switch(kind || this.base) {\r\n            case 'dec': \r\n            case 'bin':\r\n                return 'hex';\r\n            case 'hex': return 'dec';\r\n            default : throw new Error(kind + \" kind doesn't have opposite kind\")\r\n        }\r\n    };\r\n\r\n    toString(base?: NumberBase) : string {\r\n        return NumericOperand.toBaseString(this.value, base || this.base);\r\n    }\r\n\r\n    toOtherKindString() : string {\r\n        return this.toString(this.getOtherBase());\r\n    }\r\n\r\n    toDecimalString() {\r\n        return this.toString('dec');\r\n    }\r\n\r\n    toHexString() {\r\n        return this.toString('hex');\r\n    }\r\n\r\n    toBinaryString() : string {\r\n        return this.toString('bin');\r\n    }\r\n\r\n    setValue(value : number) {\r\n        this.value = value;\r\n        this.lengthInBits = NumericOperand.getBitLength(value);\r\n    }\r\n\r\n    evaluate() : NumericOperand {\r\n        return this;\r\n    }\r\n\r\n    getUnderlyingOperand() : NumericOperand  {\r\n        return this\r\n    }\r\n        \r\n    static getBitLength(num : number) {\r\n        return Math.floor(Math.log(num) / Math.log(2)) + 1;\r\n    }    \r\n    \r\n    static getBase(kind : string){\r\n        switch (kind){\r\n            case 'bin': return 2;\r\n            case 'hex': return 16;\r\n            case 'dec': return 10;\r\n        }\r\n    };\r\n\r\n    static create(value : number, base? : NumberBase) {\r\n        return new NumericOperand(value, base || \"dec\");\r\n    };\r\n\r\n    static parse(input: string) : NumericOperand {\r\n                    \r\n        var parsed = numberParser.parse(input);\r\n\r\n        if(!parsed) {\r\n            throw new Error(input + \" is not a valid number\");\r\n        }\r\n\r\n        return new NumericOperand(parsed.value, parsed.base);\r\n    }\r\n\r\n    static toBaseString(value : number, base : NumberBase) : string {\r\n        switch(base) {\r\n            case 'hex':\r\n                var hexVal = Math.abs(value).toString(16);\r\n                return value >= 0 ? '0x' + hexVal : '-0x' + hexVal;\r\n            case 'bin':\r\n                return (value>>>0).toString(2);\r\n            case 'dec':\r\n                return value.toString(10);\r\n            default:\r\n                throw new Error(\"Unexpected kind: \" + base)\r\n        }\r\n    };\r\n\r\n     static toHexString (hex : string) {\r\n            return hex.indexOf('-') === 0 ? '-0x' + hex.substr(1) : '0x' + hex;\r\n     };\r\n}","import NumericOperand from './NumericOperand';\r\nimport { ExpressionInputItem } from './expression-interfaces';\r\n\r\nexport default class ExpressionOperand implements ExpressionInputItem {\r\n    expressionString: string;\r\n    operand: ExpressionInputItem;\r\n    sign: string;\r\n    isExpression: boolean;\r\n    isShiftExpression: boolean;\r\n    isNotExpression: boolean;\r\n\r\n    constructor(expressionString : string, operand : ExpressionInputItem, sign : string) {\r\n        this.expressionString = expressionString;\r\n        this.operand = operand;\r\n        this.sign = sign;\r\n        this.isExpression = true;\r\n        this.isShiftExpression = this.sign.indexOf('<') >= 0 || this.sign.indexOf('>')>= 0;\r\n        this.isNotExpression = this.sign === '~';\r\n    }\r\n        \r\n    evaluate(operand?: NumericOperand) : NumericOperand {\r\n        if (operand instanceof ExpressionOperand) {\r\n            throw new Error('value shouldnt be expression'); \r\n        }\r\n\r\n        var evaluatedOperand = this.operand.evaluate();\r\n\r\n        var str = '';\r\n        if(this.sign == '~'){\r\n            str = '~' + evaluatedOperand.value;\r\n        } else {\r\n            if(operand == null)\r\n            throw new Error(\"Other is required for expression: \" + this.expressionString)\r\n\r\n            str = operand.value + this.sign + evaluatedOperand.value;\r\n        }\r\n\r\n        return NumericOperand.create(eval(str), evaluatedOperand.base);\r\n    }\r\n\r\n    getUnderlyingOperand() : NumericOperand {\r\n        return this.operand.getUnderlyingOperand();\r\n    }\r\n\r\n    toString(): string {\r\n        return this.sign + this.operand.toString();\r\n    }\r\n}","export default {\r\n    plainObject: function(obj : any) : boolean {\r\n        return typeof obj == \"object\" && !(obj instanceof Array) && obj instanceof Object;\r\n    },\r\n\r\n    aFunction: function(obj : any) : boolean {\r\n        return typeof obj == \"function\";\r\n    },\r\n\r\n    string: function(obj : any) : boolean {\r\n        return typeof obj == \"string\";\r\n    },\r\n\r\n    array: function(obj : any) : boolean  {\r\n        return obj instanceof Array;\r\n    },\r\n\r\n    number: function(obj : any) : boolean  {\r\n        return typeof obj == \"number\" && !isNaN(obj)\r\n    }\r\n}","import is from '../core/is';\r\nimport log from 'loglevel';\r\n\r\nexport type CommandInput = {\r\n    input: string;\r\n    options: CommandOptions\r\n}\r\n\r\nexport type CommandOptions = {\r\n    doNotTrack: boolean;\r\n}\r\n\r\ntype HandleFunction = (input: CommandInput) => void;\r\ntype InputErrorHandler = (input:string, error: Error) => void;\r\n\r\nconst DEFUALT_COMMAND_OPTIONS : CommandOptions = {\r\n    doNotTrack: false\r\n};\r\n\r\nexport interface ICommandHandler {\r\n    canHandle (input:string) : boolean;\r\n    handle: HandleFunction;\r\n}\r\n\r\nexport class CmdShell {\r\n    debugMode: boolean;\r\n    handlers: ICommandHandler[];\r\n    errorHandler: InputErrorHandler | null; \r\n    constructor() {\r\n        this.handlers = [];\r\n        this.debugMode = false;\r\n        this.errorHandler = null;\r\n    };\r\n\r\n    execute (rawInput: string, ops?: CommandOptions ) {\r\n\r\n        log.debug(`Executing command: ${rawInput}`);\r\n\r\n        ops = ops || Object.assign({}, DEFUALT_COMMAND_OPTIONS);\r\n\r\n        var input = rawInput.trim().toLowerCase();\r\n        var handler = this.findHandler(input);\r\n\r\n        if(handler != null) {\r\n            if(this.debugMode) {\r\n                this.invokeHandler(input, handler, ops);\r\n            } else {\r\n                try {\r\n                    this.invokeHandler(input, handler, ops);\r\n                } catch (e) {\r\n                     this.handleError(input, e);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            log.debug(`Handled is not found for command: ${rawInput}`)\r\n            this.handleError(input, new Error(\"Unsupported expression: \" + input.trim()));\r\n        }\r\n    };\r\n\r\n    onError(h: InputErrorHandler) {\r\n        this.errorHandler = h;\r\n    }\r\n   \r\n    command (cmd : string | object, handler? : any) {\r\n        var h = this.createHandler(cmd, handler);\r\n        if(h == null){\r\n            console.warn('unexpected set of arguments: ', JSON.stringify(arguments));\r\n            return;\r\n        }\r\n\r\n        if(!is.aFunction(h.canHandle)) {\r\n            console.warn('handler is missing \"canHandle\" function. registration denied.');\r\n            return;\r\n        }\r\n\r\n        if(!is.aFunction(h.handle)) {\r\n            console.warn('handler is missing \"handle\" function. registration denied.');\r\n            return;\r\n        }\r\n\r\n        this.handlers.push(h);\r\n    };\r\n\r\n    createHandler (cmd : string | object, handler : HandleFunction) : ICommandHandler | null {\r\n        if(is.plainObject(cmd)) {\r\n            return cmd as ICommandHandler;\r\n        }\r\n\r\n        if(is.string(cmd)) {\r\n            return { canHandle: function (input) { return input === cmd; }, handle: handler };\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    findHandler (input: string) : ICommandHandler | null {\r\n        return this.handlers.filter(h => h.canHandle(input))[0];\r\n    };\r\n\r\n    invokeHandler (input : string, handler : ICommandHandler, options: CommandOptions) {\r\n\r\n        var cmdResult = handler.handle({ input: input, options });\r\n        if(cmdResult != null) {\r\n            log.debug(cmdResult);\r\n        }\r\n    };\r\n\r\n    handleError (input: string, err: Error) {\r\n        if(this.debugMode)\r\n            console.error(input, err);\r\n\r\n        if(this.errorHandler != null)\r\n            this.errorHandler(input, err);\r\n    }\r\n}\r\n\r\nexport default new CmdShell();","import React from 'react';\r\nimport log from 'loglevel';\r\n\r\nexport interface IInputBoxProps\r\n{\r\n    onCommandEntered: (input :string) => void;\r\n}\r\n\r\nexport default class InputBox extends React.Component<IInputBoxProps> {\r\n    history: string[];\r\n    historyIndex: number;\r\n    nameInput:  HTMLInputElement | null;\r\n\r\n    constructor(props: IInputBoxProps) {\r\n        super(props);\r\n        this.nameInput = null;\r\n        this.history = [];\r\n        this.historyIndex = -1;\r\n    }\r\n\r\n    componentDidMount(){\r\n        if(this.nameInput != null)\r\n            this.nameInput.focus();\r\n    }\r\n\r\n    render() {\r\n        return <input id=\"in\" type=\"text\"\r\n                      ref={(input) => { this.nameInput = input; }} \r\n                      onKeyUp={e => this.onKeyUp(e)}\r\n                      onKeyDown={e => this.onKeyDown(e)}\r\n                      className=\"expressionInput mono\"\r\n                      placeholder=\"type expression like '1>>2' or 'help' \"\r\n                      autoComplete=\"off\"/>;\r\n    }\r\n\r\n    onKeyUp(e: any) {\r\n        var input = e.target;\r\n        if (e.keyCode != 13 || input.value.trim().length == 0) {\r\n            return;\r\n        }\r\n        \r\n        var commandInput = input.value;\r\n        this.history.unshift(commandInput);\r\n        this.historyIndex = -1;\r\n\r\n        input.value = '';        \r\n        this.props.onCommandEntered(commandInput);\r\n    }\r\n\r\n    onKeyDown(args: any) {\r\n\r\n        if(args.keyCode == 38) {\r\n            var newIndex = this.historyIndex+1;\r\n\r\n            if (this.history.length > newIndex) { // up\r\n                args.target.value = this.history[newIndex];\r\n                this.historyIndex = newIndex;\r\n            }\r\n\r\n            args.preventDefault();\r\n            return;\r\n        }\r\n\r\n        if(args.keyCode == 40) {\r\n            if(this.historyIndex > 0) { // down\r\n                args.target.value = this.history[--this.historyIndex];\r\n            }\r\n\r\n            args.preventDefault();\r\n        }\r\n    }\r\n}","import React from 'react';\r\nimport AppState from '../AppState';\r\n\r\n\r\ntype DisplayResultProps = {\r\n    appState: AppState,\r\n    inputHash: string,\r\n    input: string,\r\n    key: number,\r\n    onRemove?: (i: number) => void;\r\n}\r\n\r\nexport default class DisplayResultView extends React.Component<DisplayResultProps> {\r\n    render() {\r\n\r\n        return <div className=\"result\">\r\n                        <div className=\"input mono\">\r\n                                <span className=\"cur\">\r\n                                    &gt;</span>{this.props.input}\r\n                                    <a className=\"hashLink\" title=\"Link for this expression\" href={window.location.pathname + '#' + this.props.inputHash}>#</a>\r\n                            </div>\r\n                        <div className=\"content\">\r\n                            {this.props.children}\r\n                        </div>\r\n                    </div>;\r\n    }\r\n}\r\n\r\n","import AppState from \"../AppState\";\r\nimport React from \"react\";\r\nimport './DebugIndicators.css';\r\n\r\nfunction DebugIndicators(props:  {appState: AppState}) {\r\n\r\n    const list = [];\r\n    const state = props.appState;\r\n\r\n    if(props.appState.env != 'prod') {\r\n        list.push(state.env);\r\n    }\r\n\r\n    if(props.appState.debugMode) {\r\n        list.push(\"debug\");\r\n    }\r\n\r\n    if(localStorage.getItem('TrackAnalytics') === 'false') {\r\n        list.push(\"notrack\");\r\n    }\r\n\r\n    if(list.length == 0)\r\n        return null;\r\n\r\n    return <div className=\"debug-indicators\">\r\n            {list.map(i => <span title={i}>[{i.substring(0,1)}]&nbsp;</span>)}\r\n        </div>\r\n}\r\n\r\nexport default DebugIndicators;","export default {\r\n    encodeHash: function(input:string):string {\r\n        return encodeURIComponent(input.trim().replace(/\\s/g,','));\r\n    },\r\n    decodeHash: function(hashValue:string):string {\r\n        return decodeURIComponent(hashValue.replace(/^\\#/, '')).replace(/,/g,' ');\r\n    },\r\n    getArgs: function (hashValue:string) : string[] {\r\n\r\n        var decodedHash = this.decodeHash(hashValue);\r\n        var args : string[] = [];\r\n\r\n        splitHashList(decodedHash).forEach(function(value) {\r\n            args.push(value);\r\n        });\r\n\r\n        return args;\r\n    }\r\n};\r\n\r\nfunction splitHashList(str: string) : string[] {\r\n\r\n    return str.split('||').filter(s => s.length > 0);\r\n}","import { IconDefinition } from '@fortawesome/fontawesome-svg-core';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport cmd from '../../shell/cmd';\r\n\r\ntype CommandLinkProps = {\r\n    command?:string;\r\n    text:string;\r\n    icon?: IconDefinition\r\n}\r\n\r\nfunction CommandLink({icon, command, text}: CommandLinkProps) {\r\n    \r\n    const onClick = () => cmd.execute(command || text);\r\n\r\n    if(icon != null)\r\n        return <a href=\"javascript:void(0)\" onClick={onClick}><FontAwesomeIcon icon={icon} className=\"icon\" />{text}</a>;\r\n\r\n    return <a href=\"javascript:void(0)\" onClick={onClick}>{text}</a>;\r\n}\r\n\r\nexport default CommandLink;","import React from 'react';\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport { faEnvelope, faDonate } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faTwitter, faGithub} from \"@fortawesome/free-brands-svg-icons\";\r\nimport './TopLinks.css';\r\nimport CommandLink from '../../core/components/CommandLink';\r\n\r\nfunction TopLinks() {\r\n    return <ul className=\"top-links\">                \r\n                <li>\r\n                    <CommandLink text=\"donate\" icon={faDonate} />\r\n                </li>\r\n                <li>\r\n                    <a href=\"https://github.com/BorisLevitskiy/BitwiseCmd\"><FontAwesomeIcon className=\"icon\" icon={faGithub} size=\"lg\" />github</a>\r\n                </li>\r\n                <li>\r\n                    <a href=\"https://twitter.com/BitwiseCmd\"><FontAwesomeIcon className=\"icon\" icon={faTwitter} size=\"lg\" /><span className=\"link-text\">twitter</span></a>\r\n                </li>\r\n                <li>\r\n                    <a href=\"mailto:&#098;&#105;&#116;&#119;&#105;&#115;&#101;&#099;&#109;&#100;&#064;&#103;&#109;&#097;&#105;&#108;&#046;&#099;&#111;&#109;?subject=Feedback\"><FontAwesomeIcon className=\"icon\" icon={faEnvelope} size=\"lg\" /><span className=\"link-text\">idea or feedback</span></a>\r\n                </li>\r\n    </ul>;\r\n}\r\n\r\nexport default TopLinks;","import React from 'react';\r\nimport InputBox from './InputBox';\r\nimport DisplayResultView from './DisplayResultView';\r\nimport AppState, { CommandResultView } from '../AppState';\r\nimport cmd from '../cmd';\r\nimport log from 'loglevel';\r\nimport DebugIndicators from './DebugIndicators';\r\nimport hash from '../../core/hash';\r\nimport TopLinks from './TopLinks';\r\n\r\n\r\ntype AppRootProps = {\r\n    appState: AppState,    \r\n};\r\n\r\ntype AppRootState = {\r\n    uiTheme: string,\r\n    emphasizeBytes: boolean,\r\n    commandResults: CommandResultView[]\r\n}\r\n\r\nexport default class AppRoot extends React.Component<AppRootProps, AppRootState> {\r\n    \r\n    componentWillMount() {\r\n        this.refresh();\r\n        this.props.appState.onChange(() => this.refresh());\r\n    }\r\n\r\n    refresh() {\r\n        this.setState(this.props.appState);\r\n    }\r\n    \r\n    getIndicator(value : boolean) {\r\n        return value ? 'on' : 'off';\r\n    }\r\n\r\n    getResultViews() : JSX.Element[] {\r\n\r\n        var results = this.state.commandResults.map((r, i) => \r\n            <DisplayResultView key={r.key}  input={r.input} inputHash={hash.encodeHash(r.input)} appState={this.props.appState}>\r\n                {r.view}\r\n            </DisplayResultView>);\r\n        return results;\r\n    }\r\n\r\n    toggleEmphasizeBytes() {\r\n        this.props.appState.toggleEmphasizeBytes();\r\n    }\r\n\r\n    render() {\r\n        return <div className={`app-root ${this.state.uiTheme}`}>\r\n                    <DebugIndicators appState={this.props.appState} />\r\n                    <div className=\"header\">\r\n                        <h1>Bitwise<span className=\"header-cmd\">Cmd</span>\r\n                        </h1>\r\n                       <TopLinks />\r\n                    </div>\r\n\r\n                    <div className=\"expressionInput-container\">\r\n                        <InputBox onCommandEntered={(input) => cmd.execute(input)} />\r\n\r\n                        <span className=\"configPnl\">\r\n                            <span id=\"emphasizeBytes\" data-cmd=\"em\" className={\"indicator \" + this.getIndicator(this.state.emphasizeBytes)} title=\"Toggle Emphasize Bytes\" onClick={() => this.toggleEmphasizeBytes()}>[em]</span>\r\n                        </span>\r\n                    </div>\r\n\r\n                    <div id=\"output\">\r\n                    {this.getResultViews()}\r\n                    </div>\r\n                </div>;\r\n    }\r\n}","import React from 'react';\r\n\r\nfunction ErrorResultView(props : {errorMessage:string}) {\r\n    \r\n    return <div className=\"result\">\r\n                <div className=\"error\">{props.errorMessage}</div>\r\n        </div>;\r\n}\r\n\r\nexport default ErrorResultView;\r\n","const formatter = {\r\n    formatString: function(num: number, kind: string) : string {\r\n        return num.toString(getBase(kind || \"bin\"));\r\n    },\r\n    padLeft: function (str: string, length: number, symbol: string) : string {\r\n        var sb = Array.prototype.slice.call(str), symbol = symbol || \"0\";\r\n\r\n        if(length == null) {\r\n            return str;\r\n        }\r\n\r\n        while(length > sb.length) {\r\n            sb.unshift(symbol);\r\n        }\r\n\r\n        return sb.join('');\r\n    },\r\n    bin(number: number) {\r\n        return this.formatString(number, 'bin');\r\n    },\r\n    emBin(number: number) {\r\n        return this.padLeft(this.bin(number), 8, '0');\r\n    }\r\n};\r\n\r\nfunction getBase(kind:string) : number {\r\n    switch (kind){\r\n        case 'bin': return 2;\r\n        case 'hex': return 16;\r\n        case 'dec': return 10;\r\n    }\r\n\r\n    throw new Error(\"Unsupported kind: \" + kind);\r\n}\r\n\r\nexport default formatter;\r\nconst emBin = formatter.emBin;\r\nexport {emBin};","import React from 'react';\r\n\r\nexport type BinaryStringViewProps = {\r\n    allowFlipBits?: boolean;\r\n    binaryString: string;\r\n    onFlipBit?: (input: FlipBitEventArg) => void;\r\n    emphasizeBytes?: boolean;\r\n    className?:string\r\n};\r\n\r\nexport type FlipBitEventArg = {\r\n    index: number;\r\n    binaryString: string;\r\n    $event: any;\r\n    newBinaryString: string,    \r\n};\r\n\r\nexport default class BinaryStringView extends React.Component<BinaryStringViewProps> {\r\n    render() {\r\n        return <span className={this.props.className}>{this.getChildren()}</span>\r\n    }\r\n\r\n    onBitClick(index: number, e : any) {\r\n        if(!this.props.allowFlipBits || !this.props.onFlipBit) {\r\n            return;\r\n        }\r\n\r\n        if(!this.props.onFlipBit) {\r\n            \r\n        }\r\n\r\n        const arr = this.props.binaryString.split('');\r\n        arr[index] = arr[index] == '0' ? '1' : '0';\r\n        const newBinaryString = arr.join('');\r\n\r\n        this.props.onFlipBit({ index: index, binaryString: this.props.binaryString, $event: e, newBinaryString });        \r\n    }\r\n\r\n    getChildren() {\r\n        var bits = this.createBits(this.props.binaryString.split(''));\r\n        \r\n        if(this.props.emphasizeBytes) {\r\n            return this.splitIntoBytes(bits);\r\n        }\r\n\r\n        return bits;\r\n    }\r\n\r\n    createBits(bitChars:string[]) : JSX.Element[] {\r\n        const allowFlipBits = this.props.allowFlipBits || false;\r\n        const css = allowFlipBits ? ' flipable' : ''\r\n\r\n        return bitChars.map((c, i) => {\r\n            var className = c == '1' ? `one${css}` : `zero${css}`;\r\n            return <span className={className} key={i} onClick={e => this.onBitClick(i, e)}>{c}</span>\r\n        });\r\n    }\r\n\r\n    splitIntoBytes(bits: JSX.Element[]) {\r\n        const bytes = [];\r\n\r\n        var key = 0;\r\n        while(bits.length > 0) {\r\n            bytes.push(<span key={key++} className=\"byte\">{bits.splice(0, 8)}</span>);\r\n        }\r\n        \r\n        return bytes;\r\n    }\r\n}","import React from 'react';\r\nimport formatter from '../../core/formatter'\r\nimport BinaryStringView from '../../core/components/BinaryString';\r\nimport './IpAddressView.css';\r\nimport { IpAddress, OctetNumber } from '../models';\r\n\r\ntype IpAddressViewProps = {\r\n    ipAddresses: IpAddress[]\r\n};\r\n\r\nexport class IpAddressView extends React.Component<IpAddressViewProps> \r\n{\r\n    \r\n    render() {        \r\n        return <table className=\"expression\">\r\n            <tbody>\r\n                {this.props.ipAddresses.map((ip, i) => <tr key={i}>\r\n                        <td className=\"label\"><strong>{ip.toString()}</strong></td>\r\n                        <td className=\"bin\">\r\n                            {this.bin(ip.firstByte, 1, ip)}<span className=\"soft\">.</span>\r\n                            {this.bin(ip.secondByte, 2, ip)}<span className=\"soft\">.</span>\r\n                            {this.bin(ip.thirdByte, 3, ip)}<span className=\"soft\">.</span>\r\n                            {this.bin(ip.fourthByte, 4, ip)}\r\n                        </td>\r\n                    </tr>)}\r\n            </tbody>\r\n        </table>;\r\n    }\r\n\r\n    bin(value: number, octetNumber: OctetNumber, ip: IpAddress) {\r\n        return <BinaryStringView \r\n            binaryString={fmt(value)} \r\n            key={octetNumber} \r\n            emphasizeBytes={false} \r\n            allowFlipBits={true}\r\n            className={`octet-${octetNumber}`}\r\n            onFlipBit={e => this.onFlippedBit(e.newBinaryString, octetNumber, ip)} />;\r\n    }\r\n    \r\n    onFlippedBit(binaryString: string, number: OctetNumber, ip : IpAddress) {\r\n        ip.setOctet(number, parseInt(binaryString, 2));\r\n        this.forceUpdate();\r\n    }\r\n};\r\n\r\nfunction fmt(num: number) : string {\r\n    return formatter.padLeft(formatter.formatString(num, 'bin'), 8, '0');\r\n}\r\n\r\nexport default IpAddressView;","import {emBin} from \"../core/formatter\";\r\n\r\nexport type OctetNumber = 1 | 2 | 3 | 4;\r\nexport type NetworkClass = 'a' | 'b' | 'c' | 'd' | 'e';\r\n\r\nexport class IpAddressWithSubnetMask {\r\n    maskBits: number;\r\n    ipAddress: IpAddress;\r\n\r\n    constructor(ipAddress: IpAddress, maskBits: number) {\r\n        this.ipAddress = ipAddress;\r\n        this.maskBits = maskBits;\r\n    }\r\n\r\n    toString() {\r\n        return `${this.ipAddress.toString()}/${this.maskBits}`;\r\n    }\r\n}\r\n\r\nexport class IpAddress {\r\n\r\n    firstByte: number;\r\n    secondByte: number;\r\n    thirdByte: number;\r\n    fourthByte: number;\r\n\r\n    constructor(firstByte: number, secondByte: number, thirdByte: number, fourthByte: number) {\r\n        this.firstByte = firstByte;\r\n        this.secondByte = secondByte;\r\n        this.thirdByte = thirdByte;\r\n        this.fourthByte = fourthByte;\r\n    }\r\n\r\n    toString(): string {\r\n        return `${this.firstByte}.${this.secondByte}.${this.thirdByte}.${this.fourthByte}`;\r\n    }\r\n\r\n    toBinaryString() {\r\n        \r\n        return `${emBin(this.firstByte)}).${emBin(this.secondByte)}.${emBin(this.thirdByte)}.${emBin(this.fourthByte)}`;\r\n    }\r\n\r\n    clone(): IpAddress {\r\n        return new IpAddress(this.firstByte, this.secondByte, this.thirdByte, this.fourthByte);\r\n    }\r\n\r\n    setOctet(octet: OctetNumber, value: number) {\r\n        switch (octet) {\r\n            case 1:\r\n                this.firstByte = value;\r\n                break;\r\n            case 2:\r\n                this.secondByte = value;\r\n                break;\r\n            case 3:\r\n                this.thirdByte = value;\r\n                break;\r\n            case 4:\r\n                this.fourthByte = value;\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\nexport class SubnetCommand {\r\n    input: IpAddressWithSubnetMask;\r\n    constructor(definition: IpAddressWithSubnetMask) {\r\n        this.input = definition;\r\n    }\r\n\r\n    getAdressSpaceSize(): number {\r\n        const spaceLengthInBits = 32 - this.input.maskBits;\r\n        return Math.pow(2, spaceLengthInBits) - 2; // 0 - network address, 1 - multicast address\r\n    }\r\n\r\n    toString() {\r\n        return this.input.toString();\r\n    }\r\n}\r\n\r\n","import { IpAddress, IpAddressWithSubnetMask, SubnetCommand } from './models';\r\n\r\nexport type ParsedIpObject = IpAddress | IpAddressWithSubnetMask;\r\n\r\n\r\nconst ipAddressParser = {\r\n    parse: function(input: string) : ParsedIpObject[] | SubnetCommand | ParsingError | null {\r\n\r\n        const result = this.parseCommand(input);\r\n\r\n        const matches = this.getMaches(result.nextInput);\r\n        const correctInputs = matches.filter(m => m.matches != null);\r\n        const incorrectInputs = matches.filter(m => m.matches == null);\r\n        \r\n        if(correctInputs.length == 0)\r\n            return null;\r\n\r\n        if(incorrectInputs.length > 0) {\r\n                return new ParsingError(`Value(s) ${incorrectInputs.map(v => v.input).join(',')} was not recognized as valid ip address or ip address with a subnet mask`);\r\n        }\r\n\r\n        const parsedObjects = matches.map(m => this.parseSingle(m.matches!, m.input));\r\n        const parsingErrors = parsedObjects.filter(p => p instanceof ParsingError);\r\n\r\n        if(parsingErrors.length > 0) {\r\n            return parsingErrors[0] as ParsingError;\r\n        }\r\n\r\n        if(result.command != null) {\r\n            const result = this.createSubnetDefinition(parsedObjects as ParsedIpObject[]);\r\n            \r\n            if(result instanceof ParsingError)\r\n                return result;\r\n\r\n            return  result;\r\n        } \r\n\r\n        return parsedObjects as ParsedIpObject[];\r\n    },\r\n\r\n    parseCommand(input : string) : { command: null | string, nextInput: string } {\r\n\r\n        const command = 'subnet';\r\n        if(input.startsWith(command)) \r\n            return { command, nextInput: input.substring(command.length)}\r\n\r\n        return { command: null, nextInput: input };\r\n    },\r\n\r\n    getMaches(input : string) : { matches: RegExpExecArray | null, input: string }[] {\r\n\r\n        return input.\r\n            replace(/[\\t\\s]+/g, ' ')\r\n                .split(' ')\r\n                .filter(s => s.length>0)\r\n                .map(s => {\r\n                    const ipV4Regex = /^([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})(\\/\\d+)?$/;\r\n                    const matches = ipV4Regex.exec(s);\r\n                    \r\n                    if(matches == null || matches.length === 0)\r\n                        return {matches: null, input: s};\r\n                    \r\n                    return {matches, input: s};\r\n                });\r\n    },\r\n\r\n    parseSingle(matches : RegExpExecArray, input: string) : ParsedIpObject | ParsingError {\r\n        const invalid = (n: number) => n < 0 || n > 255;\r\n    \r\n        const first = parseInt(matches[1]);\r\n        const second = parseInt(matches[2]);\r\n        const third = parseInt(matches[3]);\r\n        const fourth = parseInt(matches[4]);\r\n\r\n        if(invalid(first) || invalid(second) || invalid(third) || invalid(fourth))\r\n            return new ParsingError(`${input} doesn't represent a valid IP address space`);\r\n\r\n        const ipAddress = new IpAddress(first, second, third, fourth);\r\n\r\n        if(matches[5]) {\r\n            const maskPart = matches[5].substr(1);\r\n            const maskBits = parseInt(maskPart);\r\n\r\n            if(maskBits > 32) {\r\n                return new ParsingError(`Subnet mask value in ${input} is out of range`);\r\n            }\r\n\r\n            return new IpAddressWithSubnetMask(ipAddress, maskBits);\r\n        }\r\n\r\n        return ipAddress;\r\n    },\r\n\r\n    createSubnetDefinition(items: ParsedIpObject[]) : SubnetCommand | ParsingError {\r\n        if(items.length != 1)\r\n            return new ParsingError(\"Incorrect network definition\");\r\n        \r\n        const first = items[0];\r\n        if(first instanceof IpAddressWithSubnetMask) {\r\n            return new SubnetCommand(first);\r\n        }\r\n\r\n        return new ParsingError(\"Network definition requires subnet mask\");\r\n    }\r\n}\r\n\r\nexport class ParsingError {\r\n    errorMessage: string;\r\n    constructor(message: string) {\r\n        this.errorMessage = message;\r\n    }\r\n}\r\n\r\n\r\nexport default ipAddressParser;","function flipBitsToZero(byte: number, numberOfBits : number) : number {\r\n    if(numberOfBits == 0)\r\n        return byte;\r\n    \r\n    const zerouOutMask = Math.pow(2, 8-numberOfBits)-1<<numberOfBits; // E.g. 11111000 for flipping first three bits\r\n    const result = byte & zerouOutMask; \r\n\r\n    return result;\r\n}\r\n\r\n// TODO: continue here to implement getting broadcast address\r\n\r\nfunction flipBitsToOne(byte : number, numberOfBits : number) : number {\r\n    if(numberOfBits == 0) return byte;\r\n\r\n    const zerouOutMask = Math.pow(2, numberOfBits)-1; // E.g. 00000111 for flipping first three bits\r\n    const result = byte | zerouOutMask; \r\n\r\n    return result;\r\n}\r\n\r\nfunction createSubnetMaskByte(numberOfBits: number) {\r\n    return 255<<(8-numberOfBits)&255;;\r\n}\r\n\r\nexport {flipBitsToZero, createSubnetMaskByte, flipBitsToOne};","import { createSubnetMaskByte } from \"../core/byte\";\r\nimport { flipBitsToOne, flipBitsToZero } from '../core/byte';\r\nimport { IpAddress, IpAddressWithSubnetMask, NetworkClass } from \"./models\";\r\n\r\nfunction createSubnetMaskIp(ipm: IpAddressWithSubnetMask) : IpAddress {\r\n\r\n    const mask = createSubnetMaskByte;\r\n    const maskBits = ipm.maskBits;\r\n\r\n    if (maskBits <= 8) {\r\n        return new IpAddress(mask(maskBits), 0, 0, 0);\r\n    }\r\n    else if (maskBits <= 16) {\r\n        return new IpAddress(255, mask(maskBits - 8), 0, 0);\r\n    }\r\n    else if (maskBits <= 24) {\r\n        return new IpAddress(255, 255, mask(maskBits - 16), 0);\r\n    }\r\n    else {\r\n        return new IpAddress(255, 255, 255, mask(maskBits - 24));\r\n    }\r\n}\r\n\r\nfunction getNetworkAddress(ipm: IpAddressWithSubnetMask) : IpAddress {\r\n    return flipSubnetMaskBits(ipm, flipBitsToZero, 0);\r\n}\r\n\r\nfunction getBroadCastAddress(ipm: IpAddressWithSubnetMask) : IpAddress {\r\n    return flipSubnetMaskBits(ipm, flipBitsToOne, 255);\r\n}\r\n\r\nfunction flipSubnetMaskBits(ipm: IpAddressWithSubnetMask, flipper : FlipFunction, fullByte: number) {\r\n    // Cannot treat ip address as a single number operation because 244 << 24 results in a negative number in JS\r\n    const flip = (maskBits: number, byte: number) => flipper(byte, 8 - maskBits);\r\n\r\n    const ip = ipm.ipAddress;\r\n    const maskBits = ipm.maskBits;\r\n\r\n    if (maskBits <= 8) {\r\n        return new IpAddress(flip(maskBits, ip.firstByte), fullByte, fullByte, fullByte);\r\n    }\r\n    else if (maskBits <= 16) {\r\n        return new IpAddress(ip.firstByte, flip(maskBits - 8, ip.secondByte), fullByte, fullByte);\r\n    }\r\n    else if (maskBits <= 24) {\r\n        return new IpAddress(ip.firstByte, ip.secondByte, flip(maskBits - 16, ip.thirdByte), fullByte);\r\n    }\r\n\r\n    else\r\n        return new IpAddress(ip.firstByte, ip.secondByte, ip.thirdByte, flip(maskBits - 24, ip.fourthByte));\r\n}\r\n\r\nfunction getNetworkClass (ipAddress: IpAddress) : NetworkClass {\r\n    const byte = ipAddress.firstByte;\r\n\r\n    const firstBitOne = (byte & 128) === 128;\r\n    const firstBitZero = (byte & 128) === 0;\r\n    const secondBitOne = (byte & 64) === 64;\r\n\r\n    const thirdBitOne = (byte & 32) === 32;\r\n    const thirdBitZero = (byte & 32) === 0;\r\n\r\n    const forthBitZero = (byte & 16) === 0;\r\n    const forthBitOne = (byte & 16) === 16;\r\n\r\n    // e: 1111\r\n\r\n    if(firstBitOne && secondBitOne && thirdBitOne && forthBitOne)\r\n        return 'e';\r\n\r\n    if(firstBitOne && secondBitOne && thirdBitOne && forthBitZero) // Start bits: 1110;\r\n        return 'd';\r\n\r\n    if(firstBitOne && secondBitOne && thirdBitZero) // Start bits: 110;\r\n        return 'c';\r\n   \r\n    return firstBitOne ? 'b' : 'a';\r\n};\r\n\r\n\r\ntype FlipFunction = (byte: number, numberOfBits: number) => number; \r\n\r\nexport {createSubnetMaskIp, getBroadCastAddress, getNetworkAddress, getNetworkClass};","import React from 'react';\r\nimport BinaryStringView from '../../core/components/BinaryString';\r\nimport formatter from '../../core/formatter';\r\nimport { IpAddress } from '../models';\r\n\r\nfunction IpAddressBinaryString({ip}: {ip:IpAddress}) {\r\n\r\n   return <React.Fragment>\r\n        <BinaryStringView binaryString={formatter.emBin(ip.firstByte)} />\r\n                    <span className=\"soft\">.</span>\r\n                    <BinaryStringView binaryString={formatter.emBin(ip.secondByte)} />\r\n                    <span className=\"soft\">.</span>\r\n                    <BinaryStringView binaryString={formatter.emBin(ip.thirdByte)} />\r\n                    <span className=\"soft\">.</span>\r\n                    <BinaryStringView binaryString={formatter.emBin(ip.fourthByte)} />\r\n   </React.Fragment>;\r\n}\r\n\r\nexport default IpAddressBinaryString;","import React, { useState } from 'react';\r\nimport BinaryStringView from '../../core/components/BinaryString';\r\nimport './SubnetView.css';\r\nimport { getNetworkAddress, getBroadCastAddress, createSubnetMaskIp } from '../subnet-utils';\r\nimport { chunkifyString } from '../../core/utils';\r\nimport IpAddressBinaryString from './IpAddressBinaryString';\r\nimport { IpAddress, IpAddressWithSubnetMask, SubnetCommand } from '../models';\r\n\r\nfunction SubnetView(props : {subnet : SubnetCommand}) {\r\n\r\n    const [subnet, setSubnet] = useState(props.subnet);\r\n\r\n    const incrementMask = () => {\r\n        const newInput = new IpAddressWithSubnetMask(subnet.input.ipAddress, subnet.input.maskBits+1);\r\n        setSubnet(new SubnetCommand(newInput));\r\n    };\r\n\r\n    const decrementMask = () => {\r\n        const newInput = new IpAddressWithSubnetMask(subnet.input.ipAddress, subnet.input.maskBits-1);\r\n        setSubnet(new SubnetCommand(newInput));\r\n    }\r\n\r\n    return <React.Fragment>\r\n        <table className=\"expression subnet-view\">\r\n            <tbody>\r\n                    <SubnetRow ip={subnet.input.ipAddress} descr=\"Address\"/>\r\n                    <SubnetRow ip={getNetworkAddress(subnet.input)} descr=\"Network\"/>\r\n                    <SubnetRow ip={createSubnetMaskIp(subnet.input)} descr=\"Net Mask\"/>\r\n                    <SubnetRow ip={getBroadCastAddress(subnet.input)} descr=\"Broadcast\"/>                  \r\n                    <tr>\r\n                        <td data-test-name=\"label\" className=\"soft\">\r\n                            <span>Network Size</span>\r\n                        </td>\r\n                        <td data-test-name=\"decimal\">\r\n                            {subnet.getAdressSpaceSize()}\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td data-test-name=\"label\" className=\"soft\">\r\n                            Mask Size\r\n                        </td>\r\n                        <td data-test-name=\"decimal\">\r\n                           \r\n                            <button onClick={decrementMask} disabled={subnet.input.maskBits === 0} title=\"Decrease mask size\">-</button>\r\n                            <span>{subnet.input.maskBits}</span>\r\n                            <button onClick={incrementMask} disabled={subnet.input.maskBits === 32} title=\"Increase mask size\">+</button>\r\n                        </td>\r\n                    </tr>\r\n            </tbody>\r\n        </table>\r\n        <div>\r\n    </div>\r\n    </React.Fragment>;\r\n}\r\n\r\nfunction SubnetRow(props: { ip: IpAddress, descr: string}) {\r\n\r\n    const {ip, descr} = props;\r\n\r\n    return <tr>\r\n            <td className=\"soft\" data-test-name=\"label\">{descr}</td>\r\n                <td data-test-name=\"decimal\" className=\"ip-address-col\">\r\n                   {ip.toString()}\r\n                </td>\r\n                <td data-test-name=\"bin\">\r\n                    <IpAddressBinaryString ip={ip} />\r\n            </td>\r\n        </tr>;\r\n}\r\n\r\nexport default SubnetView;","import log from 'loglevel';\r\n\r\nexport type AnalyticsEvent = {\r\n    eventCategory: string,\r\n    eventAction: string,\r\n    eventLabel?: string\r\n};\r\n\r\nexport type AnalyticsHandler = (evt: AnalyticsEvent) => boolean;\r\n\r\nfunction sendAnalyticsEvent(evt : AnalyticsEvent) {\r\n    const handler = (window as any).bitwiseCmdAnalyticsHandler;\r\n    if(handler == null) {\r\n        log.debug('ERROR!!!: Analytics event was not sent. Handler not found');\r\n    }\r\n\r\n    const delivered = (handler as AnalyticsHandler)(evt);\r\n    log.debug('Analytics event sent. Delivery response: ' + delivered, evt)\r\n}\r\n\r\nexport {sendAnalyticsEvent};\r\n","import React from 'react';\r\nimport AppState from '../shell/AppState';\r\nimport { CmdShell, CommandInput, CommandOptions } from '../shell/cmd';\r\nimport ErrorResultView from '../shell/components/ErrorResultView';\r\nimport IpAddressView from './components/IpAddressView';\r\nimport ipAddressParser, {ParsingError, ParsedIpObject} from './ip-parser';\r\nimport { IpAddress, IpAddressWithSubnetMask, SubnetCommand } from \"./models\";\r\nimport log from 'loglevel';\r\nimport SubnetView from './components/SubnetView';\r\nimport { createSubnetMaskIp } from './subnet-utils';\r\nimport {sendAnalyticsEvent} from '../shell/analytics';\r\n\r\nconst networkingAppModule = {\r\n    setup: function(appState: AppState, cmd: CmdShell) {\r\n        \r\n        // Add Ip Address commands\r\n        cmd.command({\r\n            canHandle: (input:string) => ipAddressParser.parse(input) != null,\r\n            handle: function(c: CommandInput) {\r\n                var result = ipAddressParser.parse(c.input);\r\n\r\n                if(result == null)\r\n                    return;\r\n\r\n                if(result instanceof ParsingError) {\r\n                    appState.addCommandResult(c.input, <ErrorResultView errorMessage={result.errorMessage} />);\r\n                    return;\r\n                }\r\n\r\n                if(result instanceof SubnetCommand) {\r\n                    appState.addCommandResult(c.input, <SubnetView subnet={result} />);\r\n                    trackCommand('SubnetCommand', c.options);\r\n                    return;\r\n                }\r\n\r\n                const ipAddresses : IpAddress[] = [];\r\n                \r\n                (result as ParsedIpObject[]).forEach(r => {\r\n                    if(r instanceof IpAddressWithSubnetMask)\r\n                    {\r\n                        ipAddresses.push(r.ipAddress);\r\n                        ipAddresses.push(createSubnetMaskIp(r));\r\n                    }\r\n                    else if(r instanceof IpAddress) {\r\n                        ipAddresses.push(r);\r\n                    }\r\n                });\r\n\r\n                trackCommand(\"IpAddressesInput\", c.options);\r\n            \r\n                appState.addCommandResult(c.input, <IpAddressView ipAddresses={ipAddresses} />);\r\n            }\r\n        });\r\n\r\n        log.debug();\r\n    }\r\n}\r\n\r\nfunction trackCommand(action: string, ops: CommandOptions) {\r\n    if(ops.doNotTrack !== true) {\r\n        sendAnalyticsEvent({\r\n            eventCategory: \"NetworkingCommand\",\r\n            eventAction: action\r\n        });\r\n    }\r\n}\r\n\r\nexport default networkingAppModule;","import NumericOperand from \"./NumericOperand\";\r\nimport { ExpressionInput, ExpressionInputItem } from \"./expression-interfaces\";\r\n\r\nexport default class ListOfNumbersExpression implements ExpressionInput {\r\n    numbers: NumericOperand[];\r\n    expressionString: string;\r\n    maxBitsLength: number;\r\n\r\n    constructor(expressionString: string, numbers: NumericOperand[]) {\r\n        this.expressionString = expressionString;\r\n        this.numbers = numbers;\r\n        this.maxBitsLength = numbers.map(n => n.lengthInBits).reduce((n , c) => n >= c ? n : c, 0);\r\n    }\r\n\r\n    toString() {\r\n        return this.numbers.map(n => n.value.toString()).join(' ');\r\n    }\r\n}","import { ExpressionInput, ExpressionInputItem } from \"./expression-interfaces\";\r\n\r\nexport default class BitwiseOperationExpression implements ExpressionInput {\r\n    \r\n    expressionString: string;\r\n    expressionItems: ExpressionInputItem[];\r\n\r\n    constructor(expressionString: string, expressions: ExpressionInputItem[]) {\r\n        this.expressionString = expressionString;\r\n        this.expressionItems = expressions;\r\n    }\r\n}","import NumericOperand from './NumericOperand';\r\nimport ExpressionOperand from './ExpressionOperand'\r\nimport ListOfNumbersExpression from './ListOfNumbersExpression';\r\nimport BitwiseOperationExpression from './BitwiseOperationExpression';\r\nimport { ExpressionInput, ExpressionInputItem, NumberBase } from './expression-interfaces';\r\n\r\nexport { default as NumericOperand } from './NumericOperand';\r\nexport { default as ExpressionOperand } from './ExpressionOperand';\r\nexport { default as ListOfNumbersExpression } from './ListOfNumbersExpression';\r\nexport { default as BitwiseOperationExpression } from './BitwiseOperationExpression';\r\n\r\ninterface IExpressionParserFactory {\r\n    canCreate: (input: string) => boolean;\r\n    create: (input: string) => ExpressionInput;\r\n};\r\n\r\nclass ExpressionParser {\r\n    factories: IExpressionParserFactory[];\r\n    constructor() {\r\n        this.factories = [];\r\n    };\r\n\r\n    canParse (input: string) : boolean {\r\n        var trimmed = input.replace(/^\\s+|\\s+$/, '');\r\n        var i = this.factories.length-1;\r\n        for(;i>=0;i--) {\r\n            if(this.factories[i].canCreate(trimmed) === true){\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n\r\n    parse (input: string) : ExpressionInput | null {\r\n        var trimmed = input.replace(/^\\s+|\\s+$/, '');\r\n        var i = 0, l = this.factories.length, factory;\r\n\r\n        for(;i<l;i++) {\r\n            factory = this.factories[i];\r\n\r\n            if(factory.canCreate(trimmed) == true){\r\n                return factory.create(trimmed);\r\n            }\r\n        }\r\n\r\n        return null;\r\n    };\r\n    \r\n    parseOperand (input : string) : NumericOperand {\r\n        return NumericOperand.parse(input);\r\n    };\r\n\r\n    createOperand (number : number, base : NumberBase) : NumericOperand {\r\n        return NumericOperand.create(number, base);\r\n    };\r\n\r\n    addFactory (factory: IExpressionParserFactory) {\r\n      this.factories.push(factory);\r\n    }\r\n}\r\n\r\nclass ListOfNumbersExpressionFactory implements IExpressionParserFactory\r\n{\r\n    regex: RegExp;\r\n\r\n    constructor() {\r\n        this.regex = /^(-?(?:\\d+|0x[\\d,a-f]+|0b[0-1])\\s?)+$/;\r\n    }\r\n\r\n    canCreate (input: string): boolean {\r\n        return this.regex.test(input);\r\n    };\r\n\r\n    create (input : string) : ExpressionInput {\r\n        var matches = this.regex.exec(input) as RegExpExecArray;\r\n        var numbers = [] as NumericOperand[];\r\n        var input = matches.input;\r\n\r\n        input.split(' ').forEach((n: string) => {\r\n            if(n.trim().length > 0) {\r\n                numbers.push(NumericOperand.parse(n.trim()));\r\n            }\r\n        });\r\n\r\n        return new ListOfNumbersExpression(input, numbers);\r\n    }\r\n}\r\n\r\nclass BitwiseOperationExpressionFactory implements IExpressionParserFactory {\r\n    fullRegex: RegExp;\r\n    regex: RegExp;\r\n\r\n    constructor() {\r\n        this.fullRegex = /^((<<|>>|>>>|\\||\\&|\\^)?(~?-?([b,x,a-f,0-9]+)))+$/;\r\n        this.regex = /(<<|>>|>>>|\\||\\&|\\^)?(~?-?(?:[b,x,a-f,0-9]+))/g;\r\n    }\r\n\r\n    canCreate (input: string) : boolean {\r\n        this.fullRegex.lastIndex = 0;\r\n        return this.fullRegex.test(this.normalizeString(input));\r\n    };\r\n\r\n    create (input: string) : ExpressionInput {\r\n        var m, operands : ExpressionInputItem[] = [],\r\n            normalizedString = this.normalizeString(input);\r\n\r\n        while ((m = this.regex.exec(normalizedString)) != null) {\r\n            operands.push(this.parseMatch(m));\r\n        }\r\n\r\n        return new BitwiseOperationExpression(normalizedString, operands)\r\n    };\r\n\r\n    parseMatch (m:any): ExpressionInputItem {\r\n        var input = m[0],\r\n            sign = m[1],\r\n            num = m[2];\r\n\r\n        var parsed = null;\r\n        if(num.indexOf('~') == 0) {\r\n            parsed = new ExpressionOperand(num, NumericOperand.parse(num.substring(1)), '~');\r\n        }\r\n        else {\r\n            parsed = NumericOperand.parse(num);\r\n        }\r\n\r\n        if(sign == null) {\r\n            return parsed as ExpressionOperand;\r\n        } else {\r\n            return new ExpressionOperand(input, parsed as NumericOperand, sign);\r\n        }\r\n    };\r\n\r\n    normalizeString (input : string): string {\r\n        return input.replace(/\\s+/g,'');\r\n    };\r\n}\r\n\r\nvar parser = new ExpressionParser();\r\nparser.addFactory(new ListOfNumbersExpressionFactory());\r\nparser.addFactory(new BitwiseOperationExpressionFactory());\r\n\r\nexport {parser};\r\n","import { NumericOperand, ListOfNumbersExpression, BitwiseOperationExpression, ExpressionOperand } from '../expression';\r\nimport { ExpressionInputItem, ExpressionInput } from '../expression-interfaces';\r\n\r\ntype Config = {\r\n    emphasizeBytes: boolean;\r\n    allowFlipBits: boolean;\r\n}\r\n\r\ntype ExpressionItemModel = {\r\n    sign: string;\r\n    css: string;\r\n    expressionItem: ExpressionInputItem;\r\n    allowFlipBits: boolean;\r\n    label: string;\r\n}\r\n\r\nexport default class BitwiseExpressionViewModel {\r\n\r\n    emphasizeBytes: boolean;\r\n    items: ExpressionItemModel[];\r\n    maxNumberOfBits: number;\r\n    allowFlipBits: boolean;\r\n\r\n    constructor({ emphasizeBytes = false, allowFlipBits = false} : Config) {\r\n        this.emphasizeBytes = emphasizeBytes;\r\n        this.items = [];\r\n        this.maxNumberOfBits = 0;\r\n        this.allowFlipBits = allowFlipBits === true;\r\n    }\r\n\r\n    static buildListOfNumbers(expr : ListOfNumbersExpression, config : Config) {\r\n        var model = new BitwiseExpressionViewModel(config);\r\n        expr.numbers.forEach(op => model.addOperandRow(op));\r\n        model.maxNumberOfBits = BitwiseExpressionViewModel.getNumberOfBits(model.maxNumberOfBits, model.emphasizeBytes);\r\n        return model;\r\n    }\r\n\r\n    static buildMultiple (expr : BitwiseOperationExpression, config : Config) {\r\n\r\n        var op = expr.expressionItems[0],\r\n            i = 0, len = expr.expressionItems.length,\r\n            ex, m = new BitwiseExpressionViewModel(config);\r\n\r\n        var prev : NumericOperand | null = null;\r\n\r\n        for (;i<len;i++) {\r\n            ex = expr.expressionItems[i];\r\n            if(ex instanceof NumericOperand) {\r\n                m.addOperandRow(ex);\r\n                prev = ex;\r\n                continue;\r\n            }\r\n\r\n            var eo = ex as ExpressionOperand;\r\n\r\n            // If it a single NOT expression\r\n            if(eo.isNotExpression) {\r\n                m.addExpressionOperandRow(eo);\r\n                var notResult = eo.evaluate();\r\n                m.addExpressionResultRow(notResult);\r\n                prev = notResult;\r\n            }\r\n            else if(eo.isShiftExpression){\r\n                prev = eo.evaluate(prev as NumericOperand);\r\n                m.addShiftExpressionResultRow(eo, prev);\r\n            } else {\r\n\r\n                prev = eo.evaluate(prev as NumericOperand);\r\n                m.addExpressionOperandRow(eo);\r\n                m.addExpressionResultRow(prev);\r\n            }\r\n        }\r\n\r\n        m.maxNumberOfBits = BitwiseExpressionViewModel.getNumberOfBits(m.maxNumberOfBits, m.emphasizeBytes);\r\n        return m;\r\n    };\r\n\r\n    static buildNot (expression: ExpressionOperand, config : Config) {\r\n        \r\n        var m = new BitwiseExpressionViewModel(config);\r\n        m.addExpressionOperandRow(expression);\r\n        m.addExpressionResultRow(expression.evaluate());\r\n        m.maxNumberOfBits = BitwiseExpressionViewModel.getNumberOfBits(m.maxNumberOfBits, m.emphasizeBytes);\r\n        return m;\r\n    };\r\n\r\n    addOperandRow(operand: NumericOperand) {\r\n        this.maxNumberOfBits = Math.max(operand.getLengthInBits(), this.maxNumberOfBits);\r\n        this.items.push({ \r\n            sign:'', \r\n            css: '',\r\n            expressionItem: operand,\r\n            allowFlipBits: this.allowFlipBits,\r\n            label: ''\r\n        });\r\n    };\r\n\r\n    addExpressionOperandRow(expression: ExpressionOperand) {\r\n        const resultNumber = expression.isNotExpression ? expression.evaluate() : expression.getUnderlyingOperand();\r\n        this.maxNumberOfBits = Math.max(resultNumber.getLengthInBits(), this.maxNumberOfBits);\r\n        \r\n        this.items.push({ \r\n            sign: expression.sign, \r\n            css: '',\r\n            label: this.getLabel(resultNumber),\r\n            expressionItem: expression.operand,\r\n            allowFlipBits: this.allowFlipBits\r\n        });\r\n    };\r\n\r\n    addShiftExpressionResultRow(expression : ExpressionOperand, resultOperand : NumericOperand) {\r\n        this.maxNumberOfBits = Math.max(resultOperand.getLengthInBits(), this.maxNumberOfBits);\r\n        this.items.push({\r\n            sign: expression.sign + expression.operand.toString(),\r\n            css: 'expression-result',\r\n            expressionItem: resultOperand,\r\n            allowFlipBits: false,\r\n            label: ''\r\n        });\r\n    };\r\n\r\n    addExpressionResultRow(operand : NumericOperand) {\r\n        this.maxNumberOfBits = Math.max(operand.getLengthInBits(), this.maxNumberOfBits);\r\n        this.items.push({ \r\n            sign:'=', \r\n            css: 'expression-result',\r\n            expressionItem: operand, \r\n            allowFlipBits: false,\r\n            label: '',\r\n        });\r\n    };\r\n\r\n    getLabel (op: NumericOperand) : string {\r\n        \r\n        if(op.base == 'bin') {\r\n            return op.toString(\"dec\");\r\n        }\r\n\r\n        return op.toString();\r\n    }\r\n\r\n    // TODO: move this method elsewhere. It is also used in LisOfNumbersExpressionView.js\r\n    static getNumberOfBits = function (bits : number, emphasizeBytes : boolean) : number {\r\n        if(emphasizeBytes && bits % 8 != 0) {\r\n             if(bits < 8) {\r\n                 return 8;\r\n             }\r\n\r\n             var n = bits - (bits % 8);\r\n             return n + 8;\r\n        }\r\n\r\n        return bits;\r\n    };\r\n\r\n    static createModel(expr : ExpressionInput, emphasizeBytes: boolean) : BitwiseExpressionViewModel {\r\n        if(expr instanceof ListOfNumbersExpression) {\r\n            return BitwiseExpressionViewModel.buildListOfNumbers(expr, { \r\n                emphasizeBytes: emphasizeBytes, \r\n                allowFlipBits: true \r\n            });\r\n        }\r\n\r\n        if(expr instanceof BitwiseOperationExpression) {\r\n            return BitwiseExpressionViewModel.buildMultiple(expr, { \r\n                emphasizeBytes: emphasizeBytes,\r\n                allowFlipBits: false \r\n            });\r\n        }\r\n\r\n        throw new Error(\"Cannot build BitwiseExpressionViewModel out of expression \" + expr);\r\n    }\r\n}","import React from 'react';\r\nimport formatter from '../../core/formatter';\r\nimport BinaryStringView, { FlipBitEventArg } from '../../core/components/BinaryString';\r\nimport BitwiseExpressionViewModel from './BitwiseExpressionModel';\r\nimport { ExpressionInput, ExpressionInputItem } from '../expression-interfaces';\r\nimport { ExpressionOperand, NumericOperand } from '../expression';\r\n\r\ntype BitwiseOperationExpressionViewProps = {\r\n    expression: ExpressionInput;\r\n    emphasizeBytes: boolean;\r\n}\r\n\r\ntype BitwiseOperationExpressionViewState = {\r\n\r\n}\r\n\r\nexport default class BitwiseOperationExpressionView extends React.Component<BitwiseOperationExpressionViewProps, BitwiseOperationExpressionViewState>  {\r\n    constructor(props: BitwiseOperationExpressionViewProps) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n    render() {\r\n        var rows = this.getRows();\r\n        if(!rows) {\r\n            return null;\r\n        }\r\n\r\n        return <table className=\"expression\">\r\n                    <tbody>\r\n                            {rows}\r\n                    </tbody>\r\n                </table>\r\n    }\r\n\r\n    getRows() : JSX.Element[] | null {\r\n        var model = BitwiseExpressionViewModel.createModel(this.props.expression, this.props.emphasizeBytes);\r\n\r\n        return model.items.map((itm, i) => \r\n            <ExpressionRow \r\n                key={i} \r\n                sign={itm.sign}\r\n                css={itm.css}\r\n                allowFlipBits={itm.allowFlipBits}\r\n                expressionItem={itm.expressionItem}\r\n                emphasizeBytes={this.props.emphasizeBytes} \r\n                maxNumberOfBits={model.maxNumberOfBits} \r\n                onBitFlipped={() => this.onBitFlipped()} />);\r\n    }\r\n\r\n    onBitFlipped() {\r\n        this.forceUpdate();\r\n        //this.setState({d:new Date()});\r\n    }\r\n}\r\n\r\ntype ExpressionRowProps = {\r\n    sign: string, \r\n    css: string, \r\n    maxNumberOfBits: number, \r\n    emphasizeBytes: boolean, \r\n    allowFlipBits: boolean, \r\n    expressionItem: ExpressionInputItem,\r\n    onBitFlipped: any\r\n}\r\n\r\nclass ExpressionRow extends React.Component<ExpressionRowProps> {\r\n    constructor(props: ExpressionRowProps) {\r\n       super(props);\r\n       this.state = { operand: null };\r\n   }\r\n    render() {\r\n        const { sign, css, maxNumberOfBits, emphasizeBytes, allowFlipBits } = this.props;\r\n        \r\n        return <tr className={css}>\r\n                    <td className=\"sign\">{sign}</td>\r\n                    <td className=\"label\">{this.getLabel()}</td>\r\n                    <td className=\"bin\">\r\n                        <BinaryStringView\r\n                            emphasizeBytes={emphasizeBytes} \r\n                            binaryString={formatter.padLeft(this.getBinaryString(), maxNumberOfBits, '0')} \r\n                            allowFlipBits={allowFlipBits} \r\n                            onFlipBit={args => this.flipBit(args)}/>\r\n                    </td>\r\n                    <td className=\"other\">{this.getOther()}</td>\r\n                </tr>;;\r\n    }\r\n\r\n    getBinaryString() : string {            \r\n        return this.props.expressionItem.evaluate().toBinaryString();\r\n    }\r\n\r\n    getLabel(): string {\r\n\r\n        // For expressions like |~2 \r\n        // TODO: find a better way...\r\n        if(this.props.expressionItem.isExpression) {\r\n            const ex = this.props.expressionItem as ExpressionOperand;\r\n            return ex.sign + this.getLabelString(ex.getUnderlyingOperand());\r\n        }\r\n\r\n        return this.getLabelString(this.props.expressionItem.getUnderlyingOperand());         \r\n    }\r\n\r\n    getOther() {\r\n\r\n        if(this.props.expressionItem.isExpression) {\r\n            const ex = this.props.expressionItem as ExpressionOperand;\r\n            const op = ex.evaluate();\r\n\r\n            return op.toString();\r\n        }\r\n\r\n        return this.props.expressionItem.evaluate().toOtherKindString();\r\n    }\r\n\r\n    getLabelString (op: NumericOperand) : string {\r\n        return op.toString(op.base == 'bin' ? 'dec' : op.base);\r\n    }\r\n\r\n     flipBit(args: FlipBitEventArg) {    \r\n\r\n        const op  = this.props.expressionItem.getUnderlyingOperand();\r\n        const { index, binaryString } = args;\r\n\r\n        var arr = binaryString.split('');\r\n        arr[index] = arr[index] == '0' ? '1' : '0';\r\n        var bin = arr.join('');\r\n\r\n        var newValue = parseInt(bin, 2);\r\n        op.setValue(newValue);\r\n\r\n        this.props.onBitFlipped();\r\n    }\r\n}","import React from 'react';\r\nimport AppState from '../shell/AppState';\r\nimport { CmdShell, CommandInput } from '../shell/cmd';\r\nimport BitwiseOperationExpressionView from './components/BitwiseOperationExpressionView';\r\nimport {parser} from './expression';\r\n\r\nconst expressionAppModule = {\r\n    setup: function(appState: AppState, cmd: CmdShell) {\r\n        \r\n          // Bitwise Expressions\r\n          cmd.command({\r\n            canHandle: (input:string) => parser.canParse(input),\r\n            handle: function(c: CommandInput) {\r\n                var expr = parser.parse(c.input);\r\n                appState.addCommandResult(c.input, <BitwiseOperationExpressionView expression={expr!} emphasizeBytes={appState.emphasizeBytes} />);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport default expressionAppModule;","import React from 'react'\r\n\r\nfunction AboutResultView() {\r\n\r\n        return   <div className=\"aboutTpl\" data-result-type=\"help\">\r\n                        <p> Created by <a href=\"http://boryslevytskyi.github.io/\">Borys Levytskyi</a>. Please give it a like if BitwiseCmd has helped you in your work.</p>\r\n                        <p>If you have an idea, suggestion or you've spotted a bug here, please send it to <a href=\"mailto:&#098;&#105;&#116;&#119;&#105;&#115;&#101;&#099;&#109;&#100;&#064;&#103;&#109;&#097;&#105;&#108;&#046;&#099;&#111;&#109;?subject=Feedback\">&#098;&#105;&#116;&#119;&#105;&#115;&#101;&#099;&#109;&#100;&#064;&#103;&#109;&#097;&#105;&#108;&#046;&#099;&#111;&#109;</a> or tweet on <a href=\"http://twitter.com/BitwiseCmd\">@BitwiseCmd</a>. Your feedback is greatly appreciated.</p>\r\n                        <p><a href=\"https://github.com/BorisLevitskiy/BitwiseCmd\">Project on <strong>GitHub</strong></a></p>\r\n                    </div>;\r\n};\r\n\r\nexport default AboutResultView;","import React from 'react';\r\nimport CommandLink from '../../core/components/CommandLink';\r\nimport './HelpResultView.css';\r\n\r\nfunction HelpResultView() {\r\n    \r\n        return <div className=\"help helpResultTpl\">\r\n                        <div className=\"panel-container\">\r\n                            <div className=\"left-panel\">\r\n                                <div className=\"section\">\r\n                                    <strong className=\"section-title soft\">Bitiwse Calculation Commands</strong>\r\n                                <ul>\r\n                                    <li><code><CommandLink text=\"23 | 34\" /></code> — type bitwise expression to see result in binary (only positive integers are supported now)</li>\r\n                                    <li><code><CommandLink text=\"23 34\" /></code> — type one or more numbers to see their binary representations</li>\r\n                                </ul>\r\n                                </div>\r\n                                <div className=\"section\">\r\n                                    <strong className=\"section-title  soft\">IP Address Commands</strong>\r\n                                <ul>\r\n                                    <li><code><CommandLink text=\"127.0.0.1\" /></code> — enter single or multiple ip addresses (separated by space) to see their binary represenation</li>\r\n                                    <li><code><CommandLink text=\"192.168.0.1/8\" /></code> — subnet mask notiations are support as well</li>\r\n                                    <li><code><CommandLink text=\"subnet 192.168.24.1/14\" /></code> — display information about subnet (network address, broadcast address, etc.)</li>\r\n                                </ul>\r\n                                </div>\r\n                                <div className=\"section\">\r\n                                    <strong className=\"section-title  soft\">Color Theme Commands</strong>\r\n                                <ul>\r\n                                    <li><code><CommandLink text=\"light\" /></code> — set Light color theme</li>\r\n                                    <li><code><CommandLink text=\"dark\" /></code> — set Dark color theme</li>\r\n                                    <li><code><CommandLink text=\"midnight\" /></code> — set Midnight color theme</li>\r\n                                </ul>\r\n                                </div>\r\n                                <div className=\"section\">\r\n                                    <strong className=\"section-title  soft\">Other Commands</strong>\r\n                                <ul>\r\n                                    <li><code><CommandLink text=\"clear\" /></code> — clear output pane</li>\r\n                                    <li><code><CommandLink text=\"help\" /></code> — display this help</li>\r\n                                    <li><code><CommandLink text=\"whatsnew\" /></code> — display changelog</li>\r\n                                    <li><code><CommandLink text=\"em\" /></code> — turn On/Off Emphasize Bytes</li>\r\n                                    <li><code><CommandLink text=\"about\" /></code> — about the app</li>\r\n                                    <li><code><CommandLink text=\"guid\" /></code> — generate <a href=\"https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_.28random.29\">v4</a> GUID</li>\r\n                                </ul>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"right-panel\">\r\n                                <div className=\"section\">\r\n                                    <strong className=\"section-title soft\">Supported Bitwise Operations</strong><br/>\r\n                                    <small>\r\n                                        <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators\">\r\n                                            as implemented in JavaScript engine of your browser\r\n                                        </a>\r\n                                    </small>\r\n                                    <ul>\r\n                                        <li><code>&amp;</code> — bitwise AND</li>\r\n                                        <li><code>|</code> — bitwise inclusive OR</li>\r\n                                        <li><code>^</code> — bitwise exclusive XOR</li>\r\n                                        <li><code>~</code> — bitwise NOT</li>\r\n                                        <li><code>&lt;&lt;</code> — left shift</li>\r\n                                        <li><code>&gt;&gt;</code> — sign propagating right shift</li>\r\n                                        <li><code>&gt;&gt;&gt;</code> — zero-fill right shift</li>\r\n                                    </ul>\r\n                                </div>\r\n                                <div className=\"section\">\r\n                                    <strong className=\"section-title  soft\">Tip</strong>\r\n                                    <p>\r\n                                        You can click on bits to flip them in number inputs (e.g. <CommandLink text=\"2 4\" />) or IP addresses (e.g. <CommandLink text=\"192.168.0.0/8\"/>)\r\n                                    </p>\r\n                                </div>\r\n                          </div>\r\n                     </div>\r\n                 </div>;\r\n}\r\n\r\nexport default HelpResultView;\r\n","import React from 'react';\r\n\r\nfunction TextResultView(props : { text: string }) {\r\n    return <p>{props.text}</p>;\r\n}\r\n\r\nexport default TextResultView;","import React from 'react';\r\nimport CommandLink from '../../core/components/CommandLink';\r\nimport './WhatsNewResultView.css';\r\n\r\nfunction WhatsnewResultView() {\r\n    \r\n        return <div className=\"changelog\">\r\n                    <h3>Changelog</h3>\r\n                    <div className=\"item item-new\">\r\n                        <p><span className=\"soft date\">Jun 16th, 2021</span> <br/>\r\n                            Added support of <code>subnet</code> command to display information about subnet ip adress such. Try it out: <CommandLink text=\"subnet 192.168.24.1/14\" />\r\n                        </p>                       \r\n                    </div>\r\n                    <div className=\"item\">\r\n                        <p><span className=\"soft date\">Jun 14th, 2021</span> <br/>\r\n                        Added support of ip addresses and subnet masks notatioans. Try them out: \r\n                        </p>\r\n                        <ul>\r\n                            <li>Single IP address <CommandLink text=\"127.0.0.1\" /></li>\r\n                            <li>Multiple IP addresses and subnet mask notations <CommandLink text=\"127.0.0.1 192.168.0.0/24\" /></li>\r\n                        </ul>\r\n                        \r\n                    </div>\r\n                    <div className=\"item\">\r\n                        <p><span className=\"soft date\">Jun 6th, 2017</span> <br/>\r\n                        Added <code><CommandLink text=\"guid\" /></code> command. Use it for generating v4 GUIDs </p>\r\n                    </div>\r\n                    <div className=\"item\">\r\n                        <p><span className=\"soft date\">May 27th, 2017</span> <br/>\r\n                        Added support of binary number notation (e.g. <code><CommandLink text=\"0b10101\" /></code>). </p>\r\n                    </div>  \r\n                    <div className=\"item\">\r\n                        <p><span className=\"soft\">May 20th, 2017</span> <br/>\r\n                        New <CommandLink text=\"Midnight\" /> theme added. </p>\r\n                    </div>  \r\n                    <div className=\"item\">\r\n                        <p><span className=\"soft\">May 16th, 2017</span> <br/>\r\n                        Complete rewrite using React. Old implementation is available at <a href=\"http://bitwisecmd.com/old\">http://bitwisecmd.com/old</a>. Please let me know if you have problems with this release by <a href=\"https://github.com/BorysLevytskyi/BitwiseCmd/issues\">creating issue</a> in Github Repo.</p>\r\n                    </div>  \r\n              </div>;\r\n}\r\n\r\nexport default WhatsnewResultView;","import log from 'loglevel';\r\n\r\nconst APP_VERSION = 6;\r\n\r\nexport type PersistedAppData = {\r\n    emphasizeBytes: boolean;\r\n    uiTheme: string;\r\n    version: number;\r\n    debugMode: boolean | null;\r\n    pageVisistsCount: number;\r\n    donationClicked: boolean\r\n}\r\n\r\nexport type CommandResultView = {\r\n    key: number,\r\n    input: string,\r\n    view: JSX.Element\r\n};\r\n\r\nexport type AppStateChangeHandler = (state: AppState) => void;\r\n\r\nexport default class AppState {\r\n    \r\n    version: number = APP_VERSION;\r\n    emphasizeBytes: boolean;\r\n    debugMode: boolean = false;\r\n    uiTheme: string;\r\n    changeHandlers: AppStateChangeHandler[];\r\n    commandResults: CommandResultView[];\r\n    persistedVersion: number;\r\n    wasOldVersion: boolean;\r\n    env: string;\r\n    pageVisitsCount: number;\r\n    donationClicked: boolean;\r\n\r\n    constructor(persistData : PersistedAppData, env: string) {\r\n        this.commandResults = [];\r\n        this.changeHandlers = [];\r\n        this.uiTheme = persistData.uiTheme || 'midnight';\r\n        this.env = env;\r\n\r\n        this.emphasizeBytes = persistData.emphasizeBytes || true;\r\n        this.persistedVersion = persistData.version || 0.1;\r\n        this.wasOldVersion = persistData.version != null && this.version > this.persistedVersion;\r\n        this.debugMode = env !== 'prod' || persistData.debugMode === true;\r\n        this.pageVisitsCount = persistData.pageVisistsCount || 0;\r\n        this.donationClicked = persistData.donationClicked;\r\n    }\r\n\r\n    addCommandResult(input : string, view : JSX.Element) {\r\n        const key = generateKey();\r\n        this.commandResults.unshift({key, input, view});\r\n        log.debug(`command result added: ${input}`);\r\n        this.triggerChanged();\r\n    }\r\n\r\n    clearCommandResults() {\r\n        this.commandResults = [];\r\n        this.triggerChanged();\r\n    }\r\n\r\n    toggleEmphasizeBytes() {\r\n        this.emphasizeBytes = !this.emphasizeBytes;\r\n        this.triggerChanged();\r\n    }\r\n\r\n    onChange(handler : AppStateChangeHandler) {\r\n        this.changeHandlers.push(handler);\r\n    }\r\n\r\n    triggerChanged() {\r\n        this.changeHandlers.forEach(h => h(this));\r\n    }\r\n\r\n    setUiTheme(theme: string) {\r\n         this.uiTheme = theme;\r\n         this.triggerChanged();    \r\n    }\r\n\r\n    toggleDebugMode() {\r\n        this.debugMode = !this.debugMode;\r\n        this.triggerChanged();\r\n    }\r\n\r\n    registerVisit() {\r\n        this.pageVisitsCount++;\r\n        this.triggerChanged();\r\n    }\r\n\r\n    onDonationClicked() : boolean{\r\n        if(this.donationClicked === true) return false;\r\n\r\n        this.donationClicked = true;\r\n        this.triggerChanged();\r\n        return true;\r\n    }\r\n\r\n    getPersistData() : PersistedAppData {\r\n        return {\r\n            emphasizeBytes: this.emphasizeBytes,\r\n            uiTheme: this.uiTheme,\r\n            version: this.version,\r\n            debugMode: this.debugMode,\r\n            pageVisistsCount: this.pageVisitsCount,\r\n            donationClicked: this.donationClicked\r\n        }\r\n    }\r\n};\r\n\r\nfunction generateKey() : number {\r\n    return Math.ceil(Math.random()*10000000) ^ Date.now(); // Because why the hell not...\r\n}","import AppState, { PersistedAppData } from \"./AppState\";\r\n\r\nconst storeKey = 'AppState';\r\n\r\nexport default {\r\n    getPersistedData() : PersistedAppData {\r\n        var json = window.localStorage.getItem(storeKey);\r\n        if(!json) {\r\n            return {} as PersistedAppData;\r\n        }\r\n\r\n        try {\r\n            return JSON.parse(json) as PersistedAppData;\r\n        }\r\n        catch(ex) {\r\n            console.error('Failed to parse AppState json. Json Value: \\n' + json, ex);\r\n            return {} as PersistedAppData;;\r\n        }\r\n    },\r\n\r\n    watch (appState: AppState) {\r\n        appState.onChange(() => this.persistData(appState));\r\n    },\r\n\r\n    persistData(appState: AppState) {\r\n        localStorage.setItem(storeKey, JSON.stringify(appState.getPersistData()));\r\n    }\r\n}","import log from 'loglevel';\r\nimport hash from '../core/hash';\r\nimport AppState from './AppState';\r\nimport { Env } from './interfaces';\r\nimport appStateStore from './appStateStore';\r\nimport CommandLink from '../core/components/CommandLink';\r\n\r\nexport type StartupAppData = {\r\n    appState: AppState,\r\n    startupCommands: string[]\r\n}\r\n\r\nconst STARTUP_COMMAND_KEY = 'StartupCommand';\r\nconst DEFAULT_COMMANDS = ['help', '127.0.0.1 192.168.0.0/8', '1|2&6','4 0b1000000 0x80'];\r\n\r\nfunction bootstrapAppData() : StartupAppData {\r\n    const env = window.location.host === \"bitwisecmd.com\" ? 'prod' : 'stage';\r\n\r\n    setupLogger(env);\r\n\r\n    const appState = createAppState(env);\r\n    const startupCommands = getStartupCommands(appState);\r\n\r\n    return {\r\n        appState,\r\n        startupCommands\r\n    }\r\n}\r\n\r\n\r\nfunction createAppState(env:string) {\r\n    var stateData = appStateStore.getPersistedData();\r\n    const appState = new AppState(stateData, env);\r\n    appStateStore.watch(appState);\r\n    log.debug(\"appState initialized\", appState);\r\n    return appState;\r\n}\r\n\r\nfunction getStartupCommands(appState : AppState) : string[] {\r\n    var hashArgs = hash.getArgs(window.location.hash);\r\n\r\n    var startupCommands = loadStoredCommands();\r\n\r\n    if(startupCommands.length == 0) \r\n        startupCommands = DEFAULT_COMMANDS;\r\n\r\n    if(appState.wasOldVersion) {\r\n        startupCommands = [\"whatsnew\"];\r\n    }\r\n\r\n    if(hashArgs.length > 0) {\r\n        startupCommands = hashArgs;\r\n    }\r\n\r\n    log.debug('Executing startup commands', startupCommands);\r\n\r\n    return startupCommands;\r\n}\r\n\r\nfunction loadStoredCommands() : string[] {\r\n    const json = localStorage.getItem(STARTUP_COMMAND_KEY);\r\n    return json != null ? [json] : []; \r\n}\r\n\r\nfunction setupLogger(env: Env) {\r\n    if(env != 'prod'){\r\n        log.setLevel(\"debug\");\r\n        log.debug(`Log level is set to debug. Env: ${env}`)\r\n    } else {\r\n        log.setLevel(\"warn\");\r\n    }\r\n}\r\n\r\nexport {STARTUP_COMMAND_KEY};\r\nexport default bootstrapAppData;","import React from 'react';\r\nimport uuid from 'uuid';\r\nimport { sendAnalyticsEvent } from './analytics';\r\nimport AppState from './AppState';\r\nimport { CmdShell, CommandInput } from './cmd';\r\nimport AboutResultView from './components/AboutResultView';\r\nimport ErrorResultView from './components/ErrorResultView';\r\nimport HelpResultView from './components/HelpResultView';\r\nimport TextResultView from './components/TextResultView';\r\nimport WhatsnewResultView from './components/WhatsNewResultView';\r\nimport {STARTUP_COMMAND_KEY} from './startup';\r\n\r\nconst shellModule = {\r\n    setup: function(appState: AppState, cmd: CmdShell) {\r\n        \r\n        cmd.debugMode = appState.debugMode;\r\n        appState.onChange(() => cmd.debugMode = appState.debugMode);\r\n        \r\n        cmd.command(\"help\", (c: CommandInput) => appState.addCommandResult(c.input, <HelpResultView />));\r\n        cmd.command(\"clear\", () => appState.clearCommandResults());\r\n        cmd.command(\"em\", () => appState.toggleEmphasizeBytes());\r\n        cmd.command(\"dark\", () => appState.setUiTheme('dark'));\r\n        cmd.command(\"light\", () => appState.setUiTheme('light'));\r\n        cmd.command(\"midnight\", () => appState.setUiTheme('midnight'));\r\n        cmd.command(\"about\", (c: CommandInput) => appState.addCommandResult(c.input, <AboutResultView />));\r\n        cmd.command(\"whatsnew\", (c: CommandInput) => appState.addCommandResult(c.input, <WhatsnewResultView />));\r\n        cmd.command(\"guid\", (c: CommandInput) => appState.addCommandResult(c.input, <TextResultView text={uuid()} />));\r\n        cmd.command(\"-notrack\", () => {});\r\n        cmd.command(\"-debug\", (c: CommandInput) => {\r\n            appState.toggleDebugMode();\r\n            appState.addCommandResult(c.input, <TextResultView text={`Debug Mode: ${appState.debugMode}`}/>);\r\n        }); \r\n\r\n        cmd.command(\"donate\", (c:CommandInput) => {\r\n\r\n            if(appState.onDonationClicked()) {\r\n                sendAnalyticsEvent({eventCategory: \"DonationButton\", eventAction: \"Clicked\"})\r\n            }\r\n            else {\r\n                sendAnalyticsEvent({eventCategory: \"DonationButton\", eventAction: \"ClickedAgain\"})\r\n            }\r\n\r\n            appState.addCommandResult(c.input, <TextResultView text={`Thank you for your interest in donation. This feature is under constraction. I'll let you know when it will be done.`}/>);\r\n        });\r\n\r\n        cmd.command(\"track\", (c:CommandInput) => {\r\n            sendAnalyticsEvent({\r\n                eventCategory: 'General',\r\n                eventAction: 'AnalyticsTest'\r\n            });\r\n        });\r\n\r\n        if(appState.env !== 'prod') {\r\n            \r\n            // Default command for development purposes\r\n            cmd.command({\r\n                canHandle: (s: string) => s.indexOf('default') === 0,\r\n                handle: (s: CommandInput) => {\r\n\r\n                    const executeCommand = (c: string) => {\r\n                        console.log(c);\r\n\r\n                        if(c.length === 0) {\r\n                            return \"Default comand: \" + localStorage.getItem(STARTUP_COMMAND_KEY);\r\n                        }\r\n                        else if(c === 'clear') {\r\n                            localStorage.removeItem(STARTUP_COMMAND_KEY);\r\n                            return \"Default startup command cleared\";\r\n                        }\r\n                        \r\n                        localStorage.setItem(STARTUP_COMMAND_KEY, c);\r\n                        return `Default startup command saved: ${c}`;\r\n                    };\r\n\r\n                    const command = s.input.substring(7).trim();\r\n                    const result = executeCommand(command);\r\n                    appState.addCommandResult(s.input, <TextResultView text={result} />);\r\n                } \r\n            });\r\n        };\r\n\r\n        cmd.onError((input: string, err: Error) => appState.addCommandResult(input, <ErrorResultView errorMessage={err.toString()} />));\r\n    }\r\n}\r\n\r\nexport default shellModule;","import React from 'react';\r\n\r\nfunction UnknownInputResultView(props : {input:string}) {\r\n    \r\n    return <div className=\"result\">\r\n                        <div className=\"error\">¯\\_(ツ)_/¯ Sorry, i don&prime;t know what <strong>{props.input}</strong> is</div>\r\n                </div>;\r\n}\r\n\r\nexport default UnknownInputResultView;\r\n","import cmd, { CommandInput } from './shell/cmd';\r\nimport AppRoot from './shell/components/AppRoot';\r\nimport log from 'loglevel';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport networkingAppModule from './networking/module';\r\nimport expressionAppModule from './expression/module';\r\nimport shellModule from './shell/module';\r\nimport bootstrapAppData from './shell/startup';\r\nimport UnknownInputResultView from './shell/components/UnknownInputResultView';\r\n\r\nconst appData = bootstrapAppData();\r\n\r\ninitializeModules();\r\n\r\nvar root = <AppRoot appState={appData.appState} />;\r\nReactDOM.render(root, document.getElementById('root'));\r\n\r\nexecuteStartupCommands();\r\n\r\nappData.appState.registerVisit();\r\n\r\nlog.debug(\"started\");\r\n\r\nfunction executeStartupCommands() {\r\n    log.debug(\"Executing startup commands\", appData.startupCommands);\r\n    appData.startupCommands.forEach(c => cmd.execute(c, {doNotTrack: true}));\r\n}\r\n\r\nfunction  initializeModules() {\r\n    shellModule.setup(appData.appState, cmd);\r\n    networkingAppModule.setup(appData.appState, cmd);\r\n    expressionAppModule.setup(appData.appState, cmd);\r\n\r\n    // Last command handler reports that input is unknown\r\n    cmd.command({\r\n        canHandle: () => true,\r\n        handle: (c: CommandInput) => appData.appState.addCommandResult(c.input, <UnknownInputResultView input={c.input}/>)\r\n    });\r\n}\r\n\r\n\r\n\r\n"],"sourceRoot":""}