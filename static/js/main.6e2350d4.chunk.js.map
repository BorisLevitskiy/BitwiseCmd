{"version":3,"sources":["core/AppState.ts","core/appStateStore.ts","core/is.ts","core/cmd.ts","models/CommandResult.ts","models/HelpResult.ts","models/AboutResult.ts","models/UnknownCommandResult.ts","models/ExpressionResult.ts","models/ErrorResults.ts","models/WhatsnewResult.ts","models/StringResult.ts","expression/ListOfNumbersExpression.ts","expression/BitwiseOperationExpression.ts","expression/expression.ts","core/formatter.ts","ipaddress/ip.ts","models/IpAddressResult.ts","commands.ts","components/InputBox.tsx","components/CommandLink.tsx","components/results/HelpResultView.tsx","components/results/AboutResultView.tsx","components/results/BinaryString.tsx","components/results/expressions/BitwiseExpressionModel.ts","components/results/expressions/BitwiseOperationExpressionView.tsx","components/results/WhatsNewResultView.tsx","components/results/IpAddressView.tsx","components/DisplayResultView.tsx","components/Indicators.tsx","AppRoot.tsx","core/hash.ts","index.tsx","expression/numberParser.ts","expression/NumericOperand.ts","expression/ExpressionOperand.ts"],"names":["AppState","persistData","env","Object","classCallCheck","this","version","emphasizeBytes","debugMode","uiTheme","handlers","commandResults","persistedVersion","wasOldVersion","result","unshift","log","debug","triggerChanged","handler","push","_this","forEach","h","theme","appStateStore","getPersistedData","json","window","localStorage","getItem","JSON","parse","ex","console","error","watch","appState","onChange","setItem","stringify","getPersistData","is","obj","Array","core_cmd","CmdShell","errorHandler","createClass","key","value","rawInput","concat","input","trim","toLowerCase","findHandler","invokeHandler","e","handleError","Error","cmd","createHandler","canHandle","handle","warn","arguments","filter","cmdResult","err","CommandResult","inputHash","encodeHash","encodeURI","replace","HelpResult","possibleConstructorReturn","getPrototypeOf","call","AboutResult","UnknownCommandResult","message","ExpressionResult","expression","UnhandledErrorResult","_CommandResult","inherits","ErrorResult","_CommandResult2","errorMessage","_this2","WhatsnewResult","StringResult","ListOfNumbersExpression","expressionString","numbers","maxBitsLength","map","n","lengthInBits","reduce","c","toString","join","BitwiseOperationExpression","expressions","expressionItems","ExpressionParser","factories","trimmed","i","length","canCreate","factory","l","create","NumericOperand","number","base","ListOfNumbersExpressionFactory","regex","test","matches","exec","split","BitwiseOperationExpressionFactory","fullRegex","lastIndex","normalizeString","m","operands","normalizedString","parseMatch","sign","num","parsed","indexOf","ExpressionOperand","substring","parser","addFactory","formatter","formatString","kind","getBase","padLeft","str","symbol","sb","prototype","slice","ipAddressParser","getMaches","correctInputs","incorrectInputs","ParsingError","v","parsedObjects","parseSingle","parsingErrors","p","s","invalid","first","parseInt","second","third","fourth","ipAddress","IpAddress","maskPart","substr","maskBits","IpAddressWithSubnetMask","mask","bits","firstByte","secondByte","thirdByte","fourthByte","octet","IpAddressResult","ipAddresses","commands","command","addCommandResult","clearCommandResults","toggleEmphasizeBytes","setUiTheme","WahtsnewResult","uuid","toggleDebugMode","r","createSubnetMaskIp","canParse","expr","onError","InputBox","props","history","historyIndex","nameInput","focus","react_default","a","createElement","id","type","ref","onKeyUp","onKeyDown","className","placeholder","target","keyCode","commandInput","onCommandEntered","args","newIndex","preventDefault","React","Component","CommandLink","href","onClick","execute","text","HelpResultView","style","overflow","float","marginRight","components_CommandLink","AboutResultView","data-result-type","BinaryStringView","getChildren","index","allowFlipBits","onFlipBit","arr","binaryString","newBinaryString","$event","createBits","splitIntoBytes","bitChars","css","onBitClick","bytes","splice","BitwiseExpressionViewModel","_ref","_ref$emphasizeBytes","_ref$allowFlipBits","items","maxNumberOfBits","operand","Math","max","getLengthInBits","expressionItem","label","resultNumber","isNotExpression","evaluate","getUnderlyingOperand","getLabel","resultOperand","op","config","model","addOperandRow","getNumberOfBits","len","prev","eo","addExpressionOperandRow","notResult","addExpressionResultRow","isShiftExpression","addShiftExpressionResultRow","buildListOfNumbers","buildMultiple","BitwiseOperationExpressionView","state","rows","getRows","createModel","itm","BitwiseOperationExpressionView_ExpressionRow","onBitFlipped","forceUpdate","ExpressionRow","_this3","_this4","_this$props","BinaryString_BinaryStringView","getBinaryString","flipBit","getOther","toBinaryString","isExpression","getLabelString","toOtherKindString","bin","newValue","setValue","WhatsnewResultView","IpAddressView","_React$Component","apply","renderSingleIp","renderMultipleIps","ip","colSpan","byte","firstBitOne","secondBitOne","thirdBitOne","getNetworkClass","toUpperCase","octetNumber","onFlippedBit","setOctet","DisplayResult","content","title","location","pathname","findResultComponent","results_HelpResultView","results_AboutResultView","BitwiseOperationExpressionView_BitwiseOperationExpressionView","WhatsNewResultView","ipResult","components_results_IpAddressView","Indicators","list","AppRoot","refresh","setState","DisplayResultView_DisplayResult","components_Indicators","InputBox_InputBox","data-cmd","getIndicator","getResultViews","hash","decodeHash","hashValue","decodeURI","getArgs","decodedHash","values","splitHashList","host","setLevel","stateData","createAppState","hashArgs","startupCommands","bind","executeStartupCommands","root","AppRoot_AppRoot","ReactDOM","render","document","getElementById","knownParsers","radix","prefix","numberParser","NumberParser","parsers","applyParser","match","globalId","getBitLength","floor","toBaseString","getOtherBase","hexVal","abs","hex","D_MyStuff_Pet_BitwiseCmd_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","evaluatedOperand","eval"],"mappings":"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","file":"static/js/main.6e2350d4.chunk.js","sourcesContent":["import log from 'loglevel';\r\n\r\nexport type PersistedAppData = {\r\n    emphasizeBytes: boolean;\r\n    uiTheme: string;\r\n    version: number;\r\n    debugMode: boolean | null;\r\n}\r\n\r\nexport type AppStateChangeHandler = (state: AppState) => void;\r\n\r\nexport default class AppState {\r\n\r\n    version: number = 4;\r\n    emphasizeBytes: boolean;\r\n    debugMode: boolean = false;\r\n    uiTheme: string;\r\n    handlers: AppStateChangeHandler[];\r\n    commandResults: any[];\r\n    persistedVersion: number;\r\n    wasOldVersion: boolean;\r\n    env: string;    \r\n\r\n    constructor(persistData : PersistedAppData, env: string) {\r\n        this.commandResults = [];\r\n        this.handlers = [];\r\n        this.uiTheme = persistData.uiTheme || 'midnight';\r\n        this.env = env;\r\n\r\n        this.emphasizeBytes = persistData.emphasizeBytes || true;\r\n        this.persistedVersion = persistData.version || 0.1;\r\n        this.wasOldVersion = persistData.version != null && this.version > this.persistedVersion;\r\n        this.debugMode = env !== 'prod' || persistData.debugMode === true;\r\n    }\r\n\r\n    addCommandResult(result : any) {\r\n        this.commandResults.unshift(result);\r\n        log.debug(\"result added\", result);\r\n        this.triggerChanged();\r\n    }\r\n\r\n    clearCommandResults() {\r\n        this.commandResults = [];\r\n        this.triggerChanged();\r\n    }\r\n\r\n    toggleEmphasizeBytes() {\r\n        this.emphasizeBytes = !this.emphasizeBytes;\r\n        this.triggerChanged();\r\n    }\r\n\r\n    onChange(handler : AppStateChangeHandler) {\r\n        this.handlers.push(handler);\r\n    }\r\n\r\n    triggerChanged() {\r\n        this.handlers.forEach(h => h(this));\r\n    }\r\n\r\n    setUiTheme(theme: string) {\r\n         this.uiTheme = theme;\r\n         this.triggerChanged();    \r\n    }\r\n\r\n    toggleDebugMode() {\r\n        this.debugMode = !this.debugMode;\r\n        this.triggerChanged();\r\n    }\r\n\r\n    getPersistData() : PersistedAppData {\r\n        return {\r\n            emphasizeBytes: this.emphasizeBytes,\r\n            uiTheme: this.uiTheme,\r\n            version: this.version,\r\n            debugMode: this.debugMode\r\n        }\r\n    }\r\n};","import AppState, { PersistedAppData } from \"./AppState\";\r\n\r\nconst storeKey = 'AppState';\r\n\r\nexport default {\r\n    getPersistedData() : PersistedAppData {\r\n        var json = window.localStorage.getItem(storeKey);\r\n        if(!json) {\r\n            return {} as PersistedAppData;\r\n        }\r\n\r\n        try {\r\n            return JSON.parse(json) as PersistedAppData;\r\n        }\r\n        catch(ex) {\r\n            console.error('Failed to parse AppState json. Json Value: \\n' + json, ex);\r\n            return {} as PersistedAppData;;\r\n        }\r\n    },\r\n\r\n    watch (appState: AppState) {\r\n        appState.onChange(() => this.persistData(appState));\r\n    },\r\n\r\n    persistData(appState: AppState) {\r\n        localStorage.setItem(storeKey, JSON.stringify(appState.getPersistData()));\r\n    }\r\n}","export default {\r\n    plainObject: function(obj : any) : boolean {\r\n        return typeof obj == \"object\" && !(obj instanceof Array) && obj instanceof Object;\r\n    },\r\n\r\n    aFunction: function(obj : any) : boolean {\r\n        return typeof obj == \"function\";\r\n    },\r\n\r\n    string: function(obj : any) : boolean {\r\n        return typeof obj == \"string\";\r\n    },\r\n\r\n    array: function(obj : any) : boolean  {\r\n        return obj instanceof Array;\r\n    },\r\n\r\n    number: function(obj : any) : boolean  {\r\n        return typeof obj == \"number\" && !isNaN(obj)\r\n    }\r\n}","import is from './is';\r\nimport log from 'loglevel';\r\n\r\nexport type CommandInput = {\r\n    input: string;\r\n}\r\n\r\ntype HandleFunction = (input: CommandInput) => void;\r\ntype InputErrorHandler = (input:string, error: Error) => void;\r\n\r\nexport interface ICommandHandler {\r\n    canHandle (input:string) : boolean;\r\n    handle: HandleFunction;\r\n}\r\n\r\nexport class CmdShell {\r\n    debugMode: boolean;\r\n    handlers: ICommandHandler[];\r\n    errorHandler: InputErrorHandler | null; \r\n    constructor() {\r\n        this.handlers = [];\r\n        this.debugMode = false;\r\n        this.errorHandler = null;\r\n    };\r\n\r\n    execute (rawInput: string) {\r\n\r\n        log.debug(`Executing command: ${rawInput}`)\r\n\r\n        var input = rawInput.trim().toLowerCase();\r\n        var handler = this.findHandler(input);\r\n\r\n        if(handler != null) {\r\n            if(this.debugMode) {\r\n                this.invokeHandler(input, handler);\r\n            } else {\r\n                try {\r\n                    this.invokeHandler(input, handler);\r\n                } catch (e) {\r\n                     this.handleError(input, e);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            log.debug(`Handled is not found for command: ${rawInput}`)\r\n            this.handleError(input, new Error(\"Unsupported expression: \" + input.trim()));\r\n        }\r\n    };\r\n\r\n    onError(h: InputErrorHandler) {\r\n        this.errorHandler = h;\r\n    }\r\n   \r\n    command (cmd : string | object, handler? : any) {\r\n        var h = this.createHandler(cmd, handler);\r\n        if(h == null){\r\n            console.warn('unexpected set of arguments: ', JSON.stringify(arguments));\r\n            return;\r\n        }\r\n\r\n        if(!is.aFunction(h.canHandle)) {\r\n            console.warn('handler is missing \"canHandle\" function. registration denied.');\r\n            return;\r\n        }\r\n\r\n        if(!is.aFunction(h.handle)) {\r\n            console.warn('handler is missing \"handle\" function. registration denied.');\r\n            return;\r\n        }\r\n\r\n        this.handlers.push(h);\r\n    };\r\n\r\n    createHandler (cmd : string | object, handler : HandleFunction) : ICommandHandler | null {\r\n        if(is.plainObject(cmd)) {\r\n            return cmd as ICommandHandler;\r\n        }\r\n\r\n        if(is.string(cmd)) {\r\n            return { canHandle: function (input) { return input === cmd; }, handle: handler };\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    findHandler (input: string) : ICommandHandler | null {\r\n        return this.handlers.filter(h => h.canHandle(input))[0];\r\n    };\r\n\r\n    invokeHandler (input : string, handler : ICommandHandler) {\r\n\r\n        var cmdResult = handler.handle({ input: input});\r\n        if(cmdResult != null) {\r\n            log.debug(cmdResult);\r\n        }\r\n    };\r\n\r\n    handleError (input: string, err: Error) {\r\n        if(this.debugMode)\r\n            console.error(input, err);\r\n\r\n        if(this.errorHandler != null)\r\n            this.errorHandler(input, err);\r\n    }\r\n}\r\n\r\nexport default new CmdShell();","export default class CommandResult {\r\n    input: string;\r\n    inputHash: string;\r\n\r\n    constructor(input: string) {\r\n        this.input = input;\r\n        this.inputHash = this.encodeHash(input);\r\n    }\r\n\r\n    encodeHash (input: string) {\r\n        return encodeURI(input.trim().replace(/\\s/g,','));\r\n    }\r\n}","import CommandResult from './CommandResult';\r\n\r\nexport default class HelpResult extends CommandResult {\r\n    constructor(input: string) {\r\n        super(input);\r\n    }\r\n}","import CommandResult from './CommandResult';\r\n\r\nexport default class AboutResult extends CommandResult {\r\n    constructor(input:string) {\r\n        super(input);\r\n    }\r\n}","import CommandResult from './CommandResult';\r\n\r\nexport default class UnknownCommandResult extends CommandResult {\r\n    message:string;\r\n    constructor(input : string) {\r\n        super(input);\r\n        this.message = `Sorry, i don''t know what ${input} is :(`;\r\n    }\r\n}","import CommandResult from './CommandResult';\r\nimport { ExpressionInput } from '../expression/expression-interfaces';\r\n\r\nexport default class ExpressionResult extends CommandResult {\r\n    expression: ExpressionInput;\r\n    constructor(input: string, expression: ExpressionInput) {\r\n        super(input);\r\n        this.expression = expression;\r\n    }\r\n}","import CommandResult from './CommandResult';\r\n\r\nexport class UnhandledErrorResult extends CommandResult {\r\n    error: Error;\r\n    constructor(input: string, error : Error) {\r\n        super(input);\r\n        this.error = error;\r\n    }\r\n}\r\n\r\nexport class ErrorResult extends CommandResult {\r\n    errorMessage: string;\r\n    constructor(input: string, errorMessage : string) {\r\n        super(input);\r\n        this.errorMessage = errorMessage;\r\n    }\r\n}","import CommandResult from './CommandResult';\r\n\r\nexport default class WhatsnewResult extends CommandResult {\r\n    constructor(input: string) {\r\n        super(input);\r\n    }\r\n}","import CommandResult from './CommandResult';\r\n\r\nexport default class StringResult extends CommandResult {\r\n    value:string;\r\n    constructor(input: string, value : string) {\r\n        super(input);\r\n        this.value = value;\r\n    }\r\n}","import NumericOperand from \"./NumericOperand\";\r\nimport { ExpressionInput, ExpressionInputItem } from \"./expression-interfaces\";\r\n\r\nexport default class ListOfNumbersExpression implements ExpressionInput {\r\n    numbers: NumericOperand[];\r\n    expressionString: string;\r\n    maxBitsLength: number;\r\n\r\n    constructor(expressionString: string, numbers: NumericOperand[]) {\r\n        this.expressionString = expressionString;\r\n        this.numbers = numbers;\r\n        this.maxBitsLength = numbers.map(n => n.lengthInBits).reduce((n , c) => n >= c ? n : c, 0);\r\n    }\r\n\r\n    toString() {\r\n        return this.numbers.map(n => n.value.toString()).join(' ');\r\n    }\r\n}","import { ExpressionInput, ExpressionInputItem } from \"./expression-interfaces\";\r\n\r\nexport default class BitwiseOperationExpression implements ExpressionInput {\r\n    \r\n    expressionString: string;\r\n    expressionItems: ExpressionInputItem[];\r\n\r\n    constructor(expressionString: string, expressions: ExpressionInputItem[]) {\r\n        this.expressionString = expressionString;\r\n        this.expressionItems = expressions;\r\n    }\r\n}","import NumericOperand from './NumericOperand';\r\nimport ExpressionOperand from './ExpressionOperand'\r\nimport ListOfNumbersExpression from './ListOfNumbersExpression';\r\nimport BitwiseOperationExpression from './BitwiseOperationExpression';\r\nimport { ExpressionInput, ExpressionInputItem, NumberBase } from './expression-interfaces';\r\n\r\nexport { default as NumericOperand } from './NumericOperand';\r\nexport { default as ExpressionOperand } from './ExpressionOperand';\r\nexport { default as ListOfNumbersExpression } from './ListOfNumbersExpression';\r\nexport { default as BitwiseOperationExpression } from './BitwiseOperationExpression';\r\n\r\ninterface IExpressionParserFactory {\r\n    canCreate: (input: string) => boolean;\r\n    create: (input: string) => ExpressionInput;\r\n};\r\n\r\nclass ExpressionParser {\r\n    factories: IExpressionParserFactory[];\r\n    constructor() {\r\n        this.factories = [];\r\n    };\r\n\r\n    canParse (input: string) : boolean {\r\n        var trimmed = input.replace(/^\\s+|\\s+$/, '');\r\n        var i = this.factories.length-1;\r\n        for(;i>=0;i--) {\r\n            if(this.factories[i].canCreate(trimmed) === true){\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n\r\n    parse (input: string) : ExpressionInput | null {\r\n        var trimmed = input.replace(/^\\s+|\\s+$/, '');\r\n        var i = 0, l = this.factories.length, factory;\r\n\r\n        for(;i<l;i++) {\r\n            factory = this.factories[i];\r\n\r\n            if(factory.canCreate(trimmed) == true){\r\n                return factory.create(trimmed);\r\n            }\r\n        }\r\n\r\n        return null;\r\n    };\r\n    \r\n    parseOperand (input : string) : NumericOperand {\r\n        return NumericOperand.parse(input);\r\n    };\r\n\r\n    createOperand (number : number, base : NumberBase) : NumericOperand {\r\n        return NumericOperand.create(number, base);\r\n    };\r\n\r\n    addFactory (factory: IExpressionParserFactory) {\r\n      this.factories.push(factory);\r\n    }\r\n}\r\n\r\nclass ListOfNumbersExpressionFactory implements IExpressionParserFactory\r\n{\r\n    regex: RegExp;\r\n\r\n    constructor() {\r\n        this.regex = /^(-?(?:\\d+|0x[\\d,a-f]+|0b[0-1])\\s?)+$/;\r\n    }\r\n\r\n    canCreate (input: string): boolean {\r\n        return this.regex.test(input);\r\n    };\r\n\r\n    create (input : string) : ExpressionInput {\r\n        var matches = this.regex.exec(input) as RegExpExecArray;\r\n        var numbers = [] as NumericOperand[];\r\n        var input = matches.input;\r\n\r\n        input.split(' ').forEach((n: string) => {\r\n            if(n.trim().length > 0) {\r\n                numbers.push(NumericOperand.parse(n.trim()));\r\n            }\r\n        });\r\n\r\n        return new ListOfNumbersExpression(input, numbers);\r\n    }\r\n}\r\n\r\nclass BitwiseOperationExpressionFactory implements IExpressionParserFactory {\r\n    fullRegex: RegExp;\r\n    regex: RegExp;\r\n\r\n    constructor() {\r\n        this.fullRegex = /^((<<|>>|>>>|\\||\\&|\\^)?(~?-?([b,x,a-f,0-9]+)))+$/;\r\n        this.regex = /(<<|>>|>>>|\\||\\&|\\^)?(~?-?(?:[b,x,a-f,0-9]+))/g;\r\n    }\r\n\r\n    canCreate (input: string) : boolean {\r\n        this.fullRegex.lastIndex = 0;\r\n        return this.fullRegex.test(this.normalizeString(input));\r\n    };\r\n\r\n    create (input: string) : ExpressionInput {\r\n        var m, operands : ExpressionInputItem[] = [],\r\n            normalizedString = this.normalizeString(input);\r\n\r\n        while ((m = this.regex.exec(normalizedString)) != null) {\r\n            operands.push(this.parseMatch(m));\r\n        }\r\n\r\n        return new BitwiseOperationExpression(normalizedString, operands)\r\n    };\r\n\r\n    parseMatch (m:any): ExpressionInputItem {\r\n        var input = m[0],\r\n            sign = m[1],\r\n            num = m[2];\r\n\r\n        var parsed = null;\r\n        if(num.indexOf('~') == 0) {\r\n            parsed = new ExpressionOperand(num, NumericOperand.parse(num.substring(1)), '~');\r\n        }\r\n        else {\r\n            parsed = NumericOperand.parse(num);\r\n        }\r\n\r\n        if(sign == null) {\r\n            return parsed as ExpressionOperand;\r\n        } else {\r\n            return new ExpressionOperand(input, parsed as NumericOperand, sign);\r\n        }\r\n    };\r\n\r\n    normalizeString (input : string): string {\r\n        return input.replace(/\\s+/g,'');\r\n    };\r\n}\r\n\r\nvar parser = new ExpressionParser();\r\nparser.addFactory(new ListOfNumbersExpressionFactory());\r\nparser.addFactory(new BitwiseOperationExpressionFactory());\r\n\r\nexport {parser};\r\n","export default {\r\n    formatString: function(num: number, kind: string) : string {\r\n        return num.toString(getBase(kind || \"bin\"));\r\n    },\r\n    padLeft: function (str: string, length: number, symbol: string) : string {\r\n        var sb = Array.prototype.slice.call(str), symbol = symbol || \"0\";\r\n\r\n        if(length == null) {\r\n            return str;\r\n        }\r\n\r\n        while(length > sb.length) {\r\n            sb.unshift(symbol);\r\n        }\r\n\r\n        return sb.join('');\r\n    }\r\n};\r\n\r\nfunction getBase(kind:string) : number {\r\n    switch (kind){\r\n        case 'bin': return 2;\r\n        case 'hex': return 16;\r\n        case 'dec': return 10;\r\n    }\r\n\r\n    throw new Error(\"Unsupported kind: \" + kind);\r\n}","import formatter from '../core/formatter';\r\n\r\n\r\nexport type OctetNumber = 1 | 2 | 3 | 4;\r\nexport type NetworkClass = 'a' | 'b' | 'c' | 'd' | 'e';\r\nexport type ParsedIpObject = IpAddress | IpAddressWithSubnetMask;\r\n\r\nconst ipAddressParser = {\r\n    parse: function(input: string) : ParsedIpObject[] | ParsingError | null {\r\n\r\n        const matches = this.getMaches(input);\r\n        const correctInputs = matches.filter(m => m.matches != null);\r\n        const incorrectInputs = matches.filter(m => m.matches == null);\r\n        \r\n        if(correctInputs.length == 0)\r\n            return null;\r\n\r\n        if(incorrectInputs.length > 0) {\r\n                return new ParsingError(`Value(s) ${incorrectInputs.map(v => v.input).join(',')} was not recognized as valid ip address or ip address with a subnet mask`);\r\n        }\r\n\r\n        const parsedObjects = matches.map(m => this.parseSingle(m.matches!, m.input));\r\n        const parsingErrors = parsedObjects.filter(p => p instanceof ParsingError);\r\n\r\n        if(parsingErrors.length > 0) {\r\n            return parsingErrors[0] as ParsingError;\r\n        }\r\n\r\n        return parsedObjects as ParsedIpObject[];\r\n        \r\n    },\r\n\r\n    getMaches(input : string) : { matches: RegExpExecArray | null, input: string }[] {\r\n\r\n        return input.\r\n            replace(/[\\t\\s]+/g, ' ')\r\n                .split(' ')\r\n                .filter(s => s.length>0)\r\n                .map(s => {\r\n                    const ipV4Regex = /^([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})(\\/\\d+)?$/;\r\n                    const matches = ipV4Regex.exec(s);\r\n                    \r\n                    if(matches == null || matches.length === 0)\r\n                        return {matches: null, input: s};\r\n                    \r\n                    return {matches, input: s};\r\n                });\r\n    },\r\n\r\n    parseSingle(matches : RegExpExecArray, input: string) : ParsedIpObject | ParsingError {\r\n        const invalid = (n: number) => n < 0 || n > 255;\r\n    \r\n        const first = parseInt(matches[1]);\r\n        const second = parseInt(matches[2]);\r\n        const third = parseInt(matches[3]);\r\n        const fourth = parseInt(matches[4]);\r\n\r\n        if(invalid(first) || invalid(second) || invalid(third) || invalid(fourth))\r\n            return new ParsingError(`${input} value doesn't fall within the valid range of the IP address space`);\r\n\r\n        const ipAddress = new IpAddress(first, second, third, fourth);\r\n\r\n        if(matches[5]) {\r\n            const maskPart = matches[5].substr(1);\r\n            const maskBits = parseInt(maskPart);\r\n\r\n            if(maskBits > 32) {\r\n                return new ParsingError(`Subnet mask value in ${input} is out of range`);\r\n            }\r\n\r\n            return new IpAddressWithSubnetMask(ipAddress, maskBits);\r\n        }\r\n\r\n        return ipAddress;\r\n    }\r\n}\r\n\r\nexport class ParsingError {\r\n    errorMessage: string;\r\n    constructor(message: string) {\r\n        this.errorMessage = message;\r\n    }\r\n}\r\n\r\nexport class IpAddressWithSubnetMask {\r\n    maskBits: number;\r\n    ipAddress: IpAddress;\r\n    \r\n    constructor(ipAddress : IpAddress, maskBits : number) {\r\n        this.ipAddress = ipAddress;\r\n        this.maskBits = maskBits;\r\n    }\r\n\r\n    toString() {\r\n        return `${this.ipAddress.toString()}/${this.maskBits}`;\r\n    }\r\n\r\n    createSubnetMaskIp() : IpAddress {\r\n\r\n        const mask = (bits: number) => 255<<(8-bits)&255;\r\n\r\n        if(this.maskBits <= 8) {\r\n            return new IpAddress(mask(this.maskBits), 0, 0, 0);\r\n        }\r\n        else if(this.maskBits <= 16) {\r\n            return new IpAddress(255, mask(this.maskBits-8), 0, 0);\r\n        }\r\n        else if(this.maskBits <= 24) {\r\n            return new IpAddress(255, 255, mask(this.maskBits-16), 0);\r\n        }\r\n        else {\r\n            return new IpAddress(255, 255, 255, mask(this.maskBits-24));\r\n        }\r\n    }\r\n}\r\n\r\nexport class IpAddress {\r\n\r\n    firstByte : number;\r\n    secondByte: number;\r\n    thirdByte : number;\r\n    fourthByte: number\r\n\r\n    constructor(firstByte : number, secondByte: number, thirdByte : number, fourthByte: number) {\r\n        this.firstByte = firstByte;\r\n        this.secondByte = secondByte;\r\n        this.thirdByte = thirdByte;\r\n        this.fourthByte = fourthByte;\r\n    }\r\n\r\n    toString() : string {\r\n        return `${this.firstByte}.${this.secondByte}.${this.thirdByte}.${this.fourthByte}`;\r\n    }\r\n\r\n    setOctet(octet: OctetNumber, value : number)  {\r\n        switch(octet) {\r\n            case 1:\r\n                this.firstByte = value;\r\n                break;\r\n            case 2:\r\n                this.secondByte = value;\r\n                break;\r\n            case 3:\r\n                this.thirdByte = value;\r\n                break;\r\n            case 4:\r\n                this.fourthByte = value;\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\nconst getNetworkClass = function (ipAddress: IpAddress) : NetworkClass {\r\n    const byte = ipAddress.firstByte;\r\n    const bineryRep = formatter.formatString(ipAddress.firstByte, 'bin');\r\n\r\n    const firstBitOne = (byte & 128) === 128;\r\n    const firstBitZero = (byte & 128) === 0;\r\n    const secondBitOne = (byte & 64) === 64;\r\n\r\n    const thirdBitOne = (byte & 32) === 32;\r\n    const thirdBitZero = (byte & 32) === 0;\r\n\r\n    const forthBitZero = (byte & 16) === 0;\r\n    const forthBitOne = (byte & 16) === 16;\r\n\r\n    // e: 1111\r\n\r\n    if(firstBitOne && secondBitOne && thirdBitOne && forthBitOne)\r\n        return 'e';\r\n\r\n    if(firstBitOne && secondBitOne && thirdBitOne && forthBitZero) // Start bits: 1110;\r\n        return 'd';\r\n\r\n    if(firstBitOne && secondBitOne && thirdBitZero) // Start bits: 110;\r\n        return 'c';\r\n   \r\n    return firstBitOne ? 'b' : 'a';\r\n};\r\n\r\nexport {ipAddressParser, getNetworkClass};","import { IpAddress, ipAddressParser, IpAddressWithSubnetMask } from '../ipaddress/ip';\r\nimport CommandResult from './CommandResult';\r\n\r\nexport default class IpAddressResult extends CommandResult {\r\n    ipAddresses: IpAddress[];\r\n    constructor(input: string, ipAddresses: IpAddress[]) {\r\n        super(input);\r\n        this.ipAddresses = ipAddresses;\r\n    }\r\n}","import HelpResult from './models/HelpResult';\r\nimport AboutResult from './models/AboutResult';\r\nimport UnknownCommandResult from './models/UnknownCommandResult';\r\nimport ExpressionResult from './models/ExpressionResult';\r\nimport {UnhandledErrorResult, ErrorResult} from './models/ErrorResults';\r\nimport WahtsnewResult from './models/WhatsnewResult';\r\nimport StringResult from './models/StringResult';\r\nimport * as expression from './expression/expression';\r\nimport uuid from 'uuid/v4';\r\nimport { CommandInput, CmdShell } from './core/cmd';\r\nimport { ExpressionInput } from './expression/expression-interfaces';\r\nimport AppState from './core/AppState';\r\nimport {ParsingError, IpAddress, ipAddressParser, IpAddressWithSubnetMask, ParsedIpObject} from './ipaddress/ip'\r\nimport IpAddressResult from './models/IpAddressResult';\r\nimport { isGetAccessor, isPrefixUnaryExpression } from 'typescript';\r\n\r\nexport default {\r\n    initialize (cmd: CmdShell, appState: AppState) {\r\n\r\n        cmd.debugMode = appState.debugMode;\r\n        appState.onChange(() => cmd.debugMode = appState.debugMode);\r\n\r\n        cmd.command(\"help\", (c: CommandInput) => appState.addCommandResult(new HelpResult(c.input)));\r\n        cmd.command(\"clear\", (c: CommandInput) => appState.clearCommandResults());\r\n        cmd.command(\"em\", (c: CommandInput) => appState.toggleEmphasizeBytes());\r\n        cmd.command(\"dark\", (c: CommandInput) => appState.setUiTheme('dark'));\r\n        cmd.command(\"light\", (c: CommandInput) => appState.setUiTheme('light'));\r\n        cmd.command(\"midnight\", (c: CommandInput) => appState.setUiTheme('midnight'));\r\n        cmd.command(\"about\", (c: CommandInput) => appState.addCommandResult(new AboutResult(c.input)));\r\n        cmd.command(\"whatsnew\", (c: CommandInput) => appState.addCommandResult(new WahtsnewResult(c.input)));\r\n        cmd.command(\"guid\", (c: CommandInput) => appState.addCommandResult(new StringResult(c.input, uuid())));\r\n        cmd.command(\"-notrack\", (c: CommandInput) => {});\r\n        cmd.command(\"-debug\", (c: CommandInput) => {\r\n            appState.toggleDebugMode();\r\n            appState.addCommandResult(new StringResult(c.input, `Debug Mode: ${appState.debugMode}`))\r\n        });            \r\n\r\n\r\n        // Ip Addresses\r\n        cmd.command({\r\n            canHandle: (input:string) => ipAddressParser.parse(input) != null,\r\n            handle: function(c: CommandInput) {\r\n                var result = ipAddressParser.parse(c.input);\r\n\r\n                if(result == null)\r\n                    return;\r\n\r\n                if(result instanceof ParsingError) {\r\n                    appState.addCommandResult(new ErrorResult(c.input, result.errorMessage));\r\n                    return;\r\n                }\r\n\r\n                const ipAddresses : IpAddress[] = [];\r\n                \r\n                (result as ParsedIpObject[]).forEach(r => {\r\n                    if(r instanceof IpAddressWithSubnetMask)\r\n                    {\r\n                        ipAddresses.push(r.ipAddress);\r\n                        ipAddresses.push(r.createSubnetMaskIp());\r\n                    }\r\n                    else if(r instanceof IpAddress) {\r\n                        ipAddresses.push(r);\r\n                    }\r\n                });\r\n            \r\n                appState.addCommandResult(new IpAddressResult(c.input, ipAddresses));\r\n            }         \r\n        })\r\n\r\n        // Bitwise Expressions\r\n        cmd.command({\r\n            canHandle: (input:string) => expression.parser.canParse(input),\r\n            handle: function(c: CommandInput) {\r\n                var expr = expression.parser.parse(c.input);\r\n                appState.addCommandResult(new ExpressionResult(c.input, expr as ExpressionInput));\r\n            }         \r\n        })\r\n\r\n        // Last command handler reports that input is unknown\r\n        cmd.command({\r\n            canHandle: () => true,\r\n            handle: (c: CommandInput) => appState.addCommandResult(new UnknownCommandResult(c.input))\r\n        });\r\n\r\n        cmd.onError((input: string, err: Error) => appState.addCommandResult(new UnhandledErrorResult(input, err)));\r\n    }\r\n }","import React from 'react';\r\nimport log from 'loglevel';\r\n\r\nexport interface IInputBoxProps\r\n{\r\n    onCommandEntered: (input :string) => void;\r\n}\r\n\r\nexport default class InputBox extends React.Component<IInputBoxProps> {\r\n    history: string[];\r\n    historyIndex: number;\r\n    nameInput:  HTMLInputElement | null;\r\n\r\n    constructor(props: IInputBoxProps) {\r\n        super(props);\r\n        this.nameInput = null;\r\n        this.history = [];\r\n        this.historyIndex = -1;\r\n    }\r\n\r\n    componentDidMount(){\r\n        if(this.nameInput != null)\r\n            this.nameInput.focus();\r\n    }\r\n\r\n    render() {\r\n        return <input id=\"in\" type=\"text\"\r\n                      ref={(input) => { this.nameInput = input; }} \r\n                      onKeyUp={e => this.onKeyUp(e)}\r\n                      onKeyDown={e => this.onKeyDown(e)}\r\n                      className=\"expressionInput mono\"\r\n                      placeholder=\"type expression like '1>>2' or 'help' \"/>;\r\n    }\r\n\r\n    onKeyUp(e: any) {\r\n        var input = e.target;\r\n        if (e.keyCode != 13 || input.value.trim().length == 0) {\r\n            return;\r\n        }\r\n        \r\n        var commandInput = input.value;\r\n        this.history.unshift(commandInput);\r\n        this.historyIndex = -1;\r\n\r\n        input.value = '';        \r\n        this.props.onCommandEntered(commandInput);\r\n    }\r\n\r\n    onKeyDown(args: any) {\r\n\r\n        if(args.keyCode == 38) {\r\n            var newIndex = this.historyIndex+1;\r\n\r\n            if (this.history.length > newIndex) { // up\r\n                args.target.value = this.history[newIndex];\r\n                this.historyIndex = newIndex;\r\n            }\r\n\r\n            args.preventDefault();\r\n            return;\r\n        }\r\n\r\n        if(args.keyCode == 40) {\r\n            if(this.historyIndex > 0) { // down\r\n                args.target.value = this.history[--this.historyIndex];\r\n            }\r\n\r\n            args.preventDefault();\r\n        }\r\n    }\r\n}","import React from 'react';\r\nimport cmd from '../core/cmd';\r\n\r\ntype CommandLinkProps = {\r\n    command?:string;\r\n    text:string;\r\n}\r\n\r\nfunction CommandLink(props: CommandLinkProps) {\r\n    return <a href=\"javascript:void(0)\" onClick={e => cmd.execute(props.command || props.text)}>{props.text}</a>\r\n}\r\n\r\nexport default CommandLink;","import React from 'react';\r\nimport CommandLink from '../CommandLink';\r\n\r\nfunction HelpResultView() {\r\n    \r\n        return <div className=\"help helpResultTpl\">\r\n                        <div style={{overflow: \"hidden\"}}>\r\n                            <div style={{float: \"left\", \"marginRight\": \"20px\"}}>\r\n                                <div className=\"section\">\r\n                                    <strong>Supported Commands</strong>\r\n                                <ul>\r\n                                    <li><code><CommandLink text=\"23 | 34\" /></code> — type bitwise expression to see result in binary (only positive integers are supported now)</li>\r\n                                    <li><code><CommandLink text=\"23 34\" /></code> — type one or more numbers to see their binary representations</li>\r\n                                    <li><code><CommandLink text=\"clear\" /></code> — clear output pane</li>\r\n                                    <li><code><CommandLink text=\"help\" /></code> — display this help</li>\r\n                                    <li><code><CommandLink text=\"whatsnew\" /></code> — display changelog</li>\r\n                                    <li><code><CommandLink text=\"em\" /></code> — turn On/Off Emphasize Bytes</li>\r\n                                    <li><code><CommandLink text=\"light\" /></code> — set Light theme</li>\r\n                                    <li><code><CommandLink text=\"dark\" /></code> — set Dark theme</li>\r\n                                    <li><code><CommandLink text=\"midnight\" /></code> — set Midnight theme</li>\r\n                                    <li><code><CommandLink text=\"about\" /></code> — about the app</li>\r\n                                    <li><code><CommandLink text=\"guid\" /></code> — generate <a href=\"https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_.28random.29\">v4</a> GUID</li>\r\n                                </ul>\r\n                                </div>\r\n                            </div>\r\n                            <div style={{\"float\":\"left\"}}>\r\n                                <div className=\"section\">\r\n                                    <strong>Supported Bitwise Operations</strong><br/>\r\n                                    <small>\r\n                                        <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators\">\r\n                                            as implemented in JavaScript engine\r\n                                        </a>\r\n                                    </small>\r\n                                    <ul>\r\n                                        <li><code>&amp;</code> — bitwise AND</li>\r\n                                        <li><code>|</code> — bitwise inclusive OR</li>\r\n                                        <li><code>^</code> — bitwise exclusive XOR</li>\r\n                                        <li><code>~</code> — bitwise NOT</li>\r\n                                        <li><code>&lt;&lt;</code> — left shift</li>\r\n                                        <li><code>&gt;&gt;</code> — sign propagating right shift</li>\r\n                                        <li><code>&gt;&gt;&gt;</code> — zero-fill right shift</li>\r\n                                    </ul>\r\n                                </div>\r\n                          </div>\r\n                     </div>\r\n                 </div>;\r\n}\r\n\r\nexport default HelpResultView;\r\n","import React from 'react'\r\n\r\nfunction AboutResultView() {\r\n\r\n        return   <div className=\"aboutTpl\" data-result-type=\"help\">\r\n                        <p> Created by <a href=\"http://boryslevytskyi.github.io/\">Borys Levytskyi</a>. Please give it a like if BitwiseCmd has helped you in your work.</p>\r\n                        <p>If you have an idea, suggestion or you've spotted a bug here, please send it to <a href=\"mailto:&#098;&#105;&#116;&#119;&#105;&#115;&#101;&#099;&#109;&#100;&#064;&#103;&#109;&#097;&#105;&#108;&#046;&#099;&#111;&#109;?subject=Feedback\">&#098;&#105;&#116;&#119;&#105;&#115;&#101;&#099;&#109;&#100;&#064;&#103;&#109;&#097;&#105;&#108;&#046;&#099;&#111;&#109;</a> or tweet on <a href=\"http://twitter.com/BitwiseCmd\">@BitwiseCmd</a>. Your feedback is greatly appreciated.</p>\r\n                        <p><a href=\"https://github.com/BorisLevitskiy/BitwiseCmd\">Project on <strong>GitHub</strong></a></p>\r\n                    </div>;\r\n};\r\n\r\nexport default AboutResultView;","import React from 'react';\r\n\r\nexport type BinaryStringViewProps = {\r\n    allowFlipBits: boolean;\r\n    binaryString: string;\r\n    onFlipBit?: (input: FlipBitEventArg) => void;\r\n    emphasizeBytes: boolean;\r\n};\r\n\r\nexport type FlipBitEventArg = {\r\n    index: number;\r\n    binaryString: string;\r\n    $event: any;\r\n    newBinaryString: string\r\n};\r\n\r\nexport default class BinaryStringView extends React.Component<BinaryStringViewProps> {\r\n    render() {\r\n        return <span>{this.getChildren()}</span>\r\n    }\r\n\r\n    onBitClick(index: number, e : any) {\r\n        if(!this.props.allowFlipBits || !this.props.onFlipBit) {\r\n            return;\r\n        }\r\n\r\n        if(!this.props.onFlipBit) {\r\n            \r\n        }\r\n\r\n        const arr = this.props.binaryString.split('');\r\n        arr[index] = arr[index] == '0' ? '1' : '0';\r\n        const newBinaryString = arr.join('');\r\n\r\n        this.props.onFlipBit({ index: index, binaryString: this.props.binaryString, $event: e, newBinaryString });        \r\n    }\r\n\r\n    getChildren() {\r\n        var bits = this.createBits(this.props.binaryString.split(''));\r\n        \r\n        if(this.props.emphasizeBytes) {\r\n            return this.splitIntoBytes(bits);\r\n        }\r\n\r\n        return bits;\r\n    }\r\n\r\n    createBits(bitChars:string[]) : JSX.Element[] {\r\n        const allowFlipBits = this.props.allowFlipBits || false;\r\n        const css = allowFlipBits ? ' flipable' : ''\r\n\r\n        return bitChars.map((c, i) => {\r\n            var className = c == '0' ? `zero${css}` : `one${css}`;\r\n            return <span className={className} key={i} onClick={e => this.onBitClick(i, e)}>{c}</span>\r\n        });\r\n    }\r\n\r\n    splitIntoBytes(bits: JSX.Element[]) {\r\n        const bytes = [];\r\n\r\n        var key = 0;\r\n        while(bits.length > 0) {\r\n            bytes.push(<span key={key++} className=\"byte\">{bits.splice(0, 8)}</span>);\r\n        }\r\n        \r\n        return bytes;\r\n    }\r\n}","import { NumericOperand, ListOfNumbersExpression, BitwiseOperationExpression, ExpressionOperand } from '../../../expression/expression';\r\nimport { ExpressionInputItem, ExpressionInput } from '../../../expression/expression-interfaces';\r\n\r\ntype Config = {\r\n    emphasizeBytes: boolean;\r\n    allowFlipBits: boolean;\r\n}\r\n\r\ntype ExpressionItemModel = {\r\n    sign: string;\r\n    css: string;\r\n    expressionItem: ExpressionInputItem;\r\n    allowFlipBits: boolean;\r\n    label: string;\r\n}\r\n\r\nexport default class BitwiseExpressionViewModel {\r\n\r\n    emphasizeBytes: boolean;\r\n    items: ExpressionItemModel[];\r\n    maxNumberOfBits: number;\r\n    allowFlipBits: boolean;\r\n\r\n    constructor({ emphasizeBytes = false, allowFlipBits = false} : Config) {\r\n        this.emphasizeBytes = emphasizeBytes;\r\n        this.items = [];\r\n        this.maxNumberOfBits = 0;\r\n        this.allowFlipBits = allowFlipBits === true;\r\n    }\r\n\r\n    static buildListOfNumbers(expr : ListOfNumbersExpression, config : Config) {\r\n        var model = new BitwiseExpressionViewModel(config);\r\n        expr.numbers.forEach(op => model.addOperandRow(op));\r\n        model.maxNumberOfBits = BitwiseExpressionViewModel.getNumberOfBits(model.maxNumberOfBits, model.emphasizeBytes);\r\n        return model;\r\n    }\r\n\r\n    static buildMultiple (expr : BitwiseOperationExpression, config : Config) {\r\n\r\n        var op = expr.expressionItems[0],\r\n            i = 0, len = expr.expressionItems.length,\r\n            ex, m = new BitwiseExpressionViewModel(config);\r\n\r\n        var prev : NumericOperand | null = null;\r\n\r\n        for (;i<len;i++) {\r\n            ex = expr.expressionItems[i];\r\n            if(ex instanceof NumericOperand) {\r\n                m.addOperandRow(ex);\r\n                prev = ex;\r\n                continue;\r\n            }\r\n\r\n            var eo = ex as ExpressionOperand;\r\n\r\n            // If it a single NOT expression\r\n            if(eo.isNotExpression) {\r\n                m.addExpressionOperandRow(eo);\r\n                var notResult = eo.evaluate();\r\n                m.addExpressionResultRow(notResult);\r\n                prev = notResult;\r\n            }\r\n            else if(eo.isShiftExpression){\r\n                prev = eo.evaluate(prev as NumericOperand);\r\n                m.addShiftExpressionResultRow(eo, prev);\r\n            } else {\r\n\r\n                prev = eo.evaluate(prev as NumericOperand);\r\n                m.addExpressionOperandRow(eo);\r\n                m.addExpressionResultRow(prev);\r\n            }\r\n        }\r\n\r\n        m.maxNumberOfBits = BitwiseExpressionViewModel.getNumberOfBits(m.maxNumberOfBits, m.emphasizeBytes);\r\n        return m;\r\n    };\r\n\r\n    static buildNot (expression: ExpressionOperand, config : Config) {\r\n        \r\n        var m = new BitwiseExpressionViewModel(config);\r\n        m.addExpressionOperandRow(expression);\r\n        m.addExpressionResultRow(expression.evaluate());\r\n        m.maxNumberOfBits = BitwiseExpressionViewModel.getNumberOfBits(m.maxNumberOfBits, m.emphasizeBytes);\r\n        return m;\r\n    };\r\n\r\n    addOperandRow(operand: NumericOperand) {\r\n        this.maxNumberOfBits = Math.max(operand.getLengthInBits(), this.maxNumberOfBits);\r\n        this.items.push({ \r\n            sign:'', \r\n            css: '',\r\n            expressionItem: operand,\r\n            allowFlipBits: this.allowFlipBits,\r\n            label: ''\r\n        });\r\n    };\r\n\r\n    addExpressionOperandRow(expression: ExpressionOperand) {\r\n        const resultNumber = expression.isNotExpression ? expression.evaluate() : expression.getUnderlyingOperand();\r\n        this.maxNumberOfBits = Math.max(resultNumber.getLengthInBits(), this.maxNumberOfBits);\r\n        \r\n        this.items.push({ \r\n            sign: expression.sign, \r\n            css: '',\r\n            label: this.getLabel(resultNumber),\r\n            expressionItem: expression.operand,\r\n            allowFlipBits: this.allowFlipBits\r\n        });\r\n    };\r\n\r\n    addShiftExpressionResultRow(expression : ExpressionOperand, resultOperand : NumericOperand) {\r\n        this.maxNumberOfBits = Math.max(resultOperand.getLengthInBits(), this.maxNumberOfBits);\r\n        this.items.push({\r\n            sign: expression.sign + expression.operand.toString(),\r\n            css: 'expression-result',\r\n            expressionItem: resultOperand,\r\n            allowFlipBits: false,\r\n            label: ''\r\n        });\r\n    };\r\n\r\n    addExpressionResultRow(operand : NumericOperand) {\r\n        this.maxNumberOfBits = Math.max(operand.getLengthInBits(), this.maxNumberOfBits);\r\n        this.items.push({ \r\n            sign:'=', \r\n            css: 'expression-result',\r\n            expressionItem: operand, \r\n            allowFlipBits: false,\r\n            label: '',\r\n        });\r\n    };\r\n\r\n    getLabel (op: NumericOperand) : string {\r\n        \r\n        if(op.base == 'bin') {\r\n            return op.toString(\"dec\");\r\n        }\r\n\r\n        return op.toString();\r\n    }\r\n\r\n    // TODO: move this method elsewhere. It is also used in LisOfNumbersExpressionView.js\r\n    static getNumberOfBits = function (bits : number, emphasizeBytes : boolean) : number {\r\n        if(emphasizeBytes && bits % 8 != 0) {\r\n             if(bits < 8) {\r\n                 return 8;\r\n             }\r\n\r\n             var n = bits - (bits % 8);\r\n             return n + 8;\r\n        }\r\n\r\n        return bits;\r\n    };\r\n\r\n    static createModel(expr : ExpressionInput, emphasizeBytes: boolean) : BitwiseExpressionViewModel {\r\n        if(expr instanceof ListOfNumbersExpression) {\r\n            return BitwiseExpressionViewModel.buildListOfNumbers(expr, { \r\n                emphasizeBytes: emphasizeBytes, \r\n                allowFlipBits: true \r\n            });\r\n        }\r\n\r\n        if(expr instanceof BitwiseOperationExpression) {\r\n            return BitwiseExpressionViewModel.buildMultiple(expr, { \r\n                emphasizeBytes: emphasizeBytes,\r\n                allowFlipBits: false \r\n            });\r\n        }\r\n\r\n        throw new Error(\"Cannot build BitwiseExpressionViewModel out of expression \" + expr);\r\n    }\r\n}","import React from 'react';\r\nimport formatter from '../../../core/formatter';\r\nimport BinaryStringView, { FlipBitEventArg } from '../BinaryString';\r\nimport BitwiseExpressionViewModel from './BitwiseExpressionModel';\r\nimport { ExpressionInput, ExpressionInputItem } from '../../../expression/expression-interfaces';\r\nimport { ExpressionOperand, NumericOperand } from '../../../expression/expression';\r\n\r\ntype BitwiseOperationExpressionViewProps = {\r\n    expression: ExpressionInput;\r\n    emphasizeBytes: boolean;\r\n}\r\n\r\ntype BitwiseOperationExpressionViewState = {\r\n\r\n}\r\n\r\nexport default class BitwiseOperationExpressionView extends React.Component<BitwiseOperationExpressionViewProps, BitwiseOperationExpressionViewState>  {\r\n    constructor(props: BitwiseOperationExpressionViewProps) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n    render() {\r\n        var rows = this.getRows();\r\n        if(!rows) {\r\n            return null;\r\n        }\r\n\r\n        return <table className=\"expression\">\r\n                    <tbody>\r\n                            {rows}\r\n                    </tbody>\r\n                </table>\r\n    }\r\n\r\n    getRows() : JSX.Element[] | null {\r\n        var model = BitwiseExpressionViewModel.createModel(this.props.expression, this.props.emphasizeBytes);\r\n\r\n        return model.items.map((itm, i) => \r\n            <ExpressionRow \r\n                key={i} \r\n                sign={itm.sign}\r\n                css={itm.css}\r\n                allowFlipBits={itm.allowFlipBits}\r\n                expressionItem={itm.expressionItem}\r\n                emphasizeBytes={this.props.emphasizeBytes} \r\n                maxNumberOfBits={model.maxNumberOfBits} \r\n                onBitFlipped={() => this.onBitFlipped()} />);\r\n    }\r\n\r\n    onBitFlipped() {\r\n        this.forceUpdate();\r\n        //this.setState({d:new Date()});\r\n    }\r\n}\r\n\r\ntype ExpressionRowProps = {\r\n    sign: string, \r\n    css: string, \r\n    maxNumberOfBits: number, \r\n    emphasizeBytes: boolean, \r\n    allowFlipBits: boolean, \r\n    expressionItem: ExpressionInputItem,\r\n    onBitFlipped: any\r\n}\r\n\r\nclass ExpressionRow extends React.Component<ExpressionRowProps> {\r\n    constructor(props: ExpressionRowProps) {\r\n       super(props);\r\n       this.state = { operand: null };\r\n   }\r\n    render() {\r\n        const { sign, css, maxNumberOfBits, emphasizeBytes, allowFlipBits } = this.props;\r\n        \r\n        return <tr className={css}>\r\n                    <td className=\"sign\">{sign}</td>\r\n                    <td className=\"label\">{this.getLabel()}</td>\r\n                    <td className=\"bin\">\r\n                        <BinaryStringView\r\n                            emphasizeBytes={emphasizeBytes} \r\n                            binaryString={formatter.padLeft(this.getBinaryString(), maxNumberOfBits, '0')} \r\n                            allowFlipBits={allowFlipBits} \r\n                            onFlipBit={args => this.flipBit(args)}/>\r\n                    </td>\r\n                    <td className=\"other\">{this.getOther()}</td>\r\n                </tr>;;\r\n    }\r\n\r\n    getBinaryString() : string {            \r\n        return this.props.expressionItem.evaluate().toBinaryString();\r\n    }\r\n\r\n    getLabel(): string {\r\n\r\n        // For expressions like |~2 \r\n        // TODO: find a better way...\r\n        if(this.props.expressionItem.isExpression) {\r\n            const ex = this.props.expressionItem as ExpressionOperand;\r\n            return ex.sign + this.getLabelString(ex.getUnderlyingOperand());\r\n        }\r\n\r\n        return this.getLabelString(this.props.expressionItem.getUnderlyingOperand());         \r\n    }\r\n\r\n    getOther() {\r\n\r\n        if(this.props.expressionItem.isExpression) {\r\n            const ex = this.props.expressionItem as ExpressionOperand;\r\n            const op = ex.evaluate();\r\n\r\n            return op.toString();\r\n        }\r\n\r\n        return this.props.expressionItem.evaluate().toOtherKindString();\r\n    }\r\n\r\n    getLabelString (op: NumericOperand) : string {\r\n        return op.toString(op.base == 'bin' ? 'dec' : op.base);\r\n    }\r\n\r\n     flipBit(args: FlipBitEventArg) {    \r\n\r\n        const op  = this.props.expressionItem.getUnderlyingOperand();\r\n        const { index, binaryString } = args;\r\n\r\n        var arr = binaryString.split('');\r\n        arr[index] = arr[index] == '0' ? '1' : '0';\r\n        var bin = arr.join('');\r\n\r\n        var newValue = parseInt(bin, 2);\r\n        op.setValue(newValue);\r\n\r\n        this.props.onBitFlipped();\r\n    }\r\n}","import React from 'react'\r\nimport CommandLink from '../CommandLink'\r\n\r\nfunction WhatsnewResultView() {\r\n    \r\n        return <div className=\"changelog\">\r\n                    <h3>Changelog</h3>\r\n                    <div className=\"item item-new\">\r\n                        <p><span className=\"soft date\">Jun 6th, 2017</span> <br/>\r\n                        Added <code><CommandLink text=\"guid\" /></code> command. Use it for generating v4 GUIDs </p>\r\n                    </div>\r\n                    <div className=\"item\">\r\n                        <p><span className=\"soft date\">May 27th, 2017</span> <br/>\r\n                        Added support of binary number notation (e.g. <code><CommandLink text=\"0b10101\" /></code>). </p>\r\n                    </div>  \r\n                    <div className=\"item\">\r\n                        <p><span className=\"soft\">May 20th, 2017</span> <br/>\r\n                        New <CommandLink text=\"Midnight\" /> theme added. </p>\r\n                    </div>  \r\n                    <div className=\"item\">\r\n                        <p><span className=\"soft\">May 16th, 2017</span> <br/>\r\n                        Complete rewrite using React. Old implementation is available at <a href=\"http://bitwisecmd.com/old\">http://bitwisecmd.com/old</a>. Please let me know if you have problems with this release by <a href=\"https://github.com/BorysLevytskyi/BitwiseCmd/issues\">creating issue</a> in Github Repo.</p>\r\n                    </div>  \r\n              </div>;\r\n}\r\n\r\nexport default WhatsnewResultView;","import React from 'react';\r\nimport { IpAddress, OctetNumber, getNetworkClass } from '../../ipaddress/ip';\r\nimport formatter from '../../core/formatter'\r\nimport BinaryStringView from './BinaryString';\r\nimport './IpAddressView.css';\r\ntype IpAddressViewProps = {\r\n    ipAddresses: IpAddress[]\r\n};\r\n\r\nexport class IpAddressView extends React.Component<IpAddressViewProps> \r\n{\r\n    \r\n    render() {\r\n        if(this.props.ipAddresses.length === 1)\r\n            return this.renderSingleIp(this.props.ipAddresses[0]);\r\n        \r\n        return this.renderMultipleIps();\r\n    }\r\n\r\n    renderMultipleIps() {\r\n        return <table>\r\n            <tbody>\r\n                {this.props.ipAddresses.map((ip, i) => <tr key={i}>\r\n                        <td>{ip.toString()}</td>\r\n                        <td>\r\n                            {this.bin(ip.firstByte, 1, ip)}.{this.bin(ip.secondByte, 2, ip)}.{this.bin(ip.thirdByte, 3, ip)}.{this.bin(ip.fourthByte, 4, ip)}\r\n                        </td>\r\n                    </tr>)}\r\n            </tbody>\r\n        </table>\r\n    }\r\n\r\n    renderSingleIp(ip: IpAddress) {\r\n        return <div>\r\n            <table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>{ip.firstByte}</th>\r\n                        <th>{ip.secondByte}</th>\r\n                        <th>{ip.thirdByte}</th>\r\n                        <th>{ip.fourthByte}</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr>\r\n                        <td>{this.bin(ip.firstByte, 1, ip)}</td>\r\n                        <td>{this.bin(ip.secondByte, 2, ip)}</td>\r\n                        <td>{this.bin(ip.thirdByte, 3, ip)}</td>\r\n                        <td>{this.bin(ip.fourthByte, 4, ip)}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td colSpan={2} className=\"ip-address-info\">\r\n                            <a href=\"https://www.wikiwand.com/en/Classful_network\" target=\"_blank\">Network Class: {getNetworkClass(ip).toUpperCase()}</a>\r\n                        </td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>            \r\n        </div>\r\n    }\r\n\r\n    bin(value: number, octetNumber: OctetNumber, ip: IpAddress) {\r\n        return <BinaryStringView \r\n            binaryString={fmt(value)} \r\n            key={octetNumber} \r\n            emphasizeBytes={false} \r\n            allowFlipBits={true} \r\n            onFlipBit={e => this.onFlippedBit(e.newBinaryString, octetNumber, ip)} />;\r\n    }\r\n    \r\n    onFlippedBit(binaryString: string, number: OctetNumber, ip : IpAddress) {\r\n        ip.setOctet(number, parseInt(binaryString, 2));\r\n        this.forceUpdate();\r\n    }\r\n};\r\n\r\nfunction fmt(num: number) : string {\r\n    return formatter.padLeft(formatter.formatString(num, 'bin'), 8, '0');\r\n}\r\n\r\nexport default IpAddressView;","import React from 'react';\r\nimport HelpResult from '../models/HelpResult';\r\nimport AboutResult from '../models/AboutResult';\r\nimport HelpResultView from './results/HelpResultView';\r\nimport AboutResultView from './results/AboutResultView';\r\nimport ExpressionResult from '../models/ExpressionResult';\r\nimport BitwiseOperationExpressionView from './results/expressions/BitwiseOperationExpressionView';\r\nimport WhatsnewResult from '../models/WhatsnewResult';\r\nimport WhatsnewResultView from './results/WhatsNewResultView';\r\nimport {UnhandledErrorResult, ErrorResult} from '../models/ErrorResults';\r\nimport StringResult from '../models/StringResult';\r\nimport IpAddressView from './results/IpAddressView';\r\n\r\nimport CommandResult from '../models/CommandResult';\r\nimport AppState from '../core/AppState';\r\nimport IpAddressResult from '../models/IpAddressResult';\r\n\r\ntype DisplayResultProps = {\r\n    content : CommandResult,\r\n    appState: AppState,\r\n    inputHash: string,\r\n    input: string,\r\n    key: number\r\n}\r\n\r\nexport default class DisplayResult extends React.Component<DisplayResultProps> {\r\n    render() {\r\n\r\n        return <div className=\"result\">\r\n                        <div className=\"input mono\"><span className=\"cur\">&gt;</span>{this.props.content.input}<a className=\"hashLink\" title=\"Link for this expression\" href={window.location.pathname + '#' + this.props.inputHash}>#</a></div>\r\n                        <div className=\"content\">\r\n                            {this.findResultComponent(this.props.content)}\r\n                        </div>\r\n                    </div>;\r\n    }\r\n\r\n    findResultComponent(result: CommandResult) : JSX.Element  {\r\n\r\n        if(result instanceof HelpResult) {\r\n            return <HelpResultView  />\r\n        }\r\n\r\n        if(result instanceof AboutResult) {\r\n            return <AboutResultView />\r\n        }\r\n\r\n        if(result instanceof ExpressionResult) {\r\n            return <BitwiseOperationExpressionView expression={result.expression} emphasizeBytes={this.props.appState.emphasizeBytes} /> \r\n        }\r\n\r\n        if(result instanceof WhatsnewResult) {\r\n            return <WhatsnewResultView />\r\n        }\r\n\r\n        if(result instanceof StringResult) {\r\n            return <p>{result.value}</p>\r\n        }\r\n\r\n        if (result instanceof UnhandledErrorResult) {\r\n            return <div className=\"result\">\r\n                    <div className=\"error\">(X_X) Ooops.. Something ain' right: <strong>{result.error.message}</strong></div>\r\n               </div>\r\n        }\r\n\r\n        if (result instanceof ErrorResult) {\r\n            return <div className=\"result\">\r\n                    <div className=\"error\">{result.errorMessage}</div>\r\n               </div>\r\n        }\r\n\r\n        if(result instanceof IpAddressResult) {\r\n            const ipResult = result as IpAddressResult;\r\n\r\n            return <IpAddressView ipAddresses={ipResult.ipAddresses} />\r\n        }\r\n\r\n        return <div className=\"result\">\r\n                    <div className=\"error\">¯\\_(ツ)_/¯ Sorry, i don&prime;t know what <strong>{this.props.content.input}</strong> is</div>\r\n               </div>\r\n    }\r\n}","import AppState from \"../core/AppState\";\r\nimport React from \"react\";\r\n\r\ntype IndicatorsProps = {\r\n    appState: AppState\r\n};\r\n\r\nfunction Indicators(props:  IndicatorsProps) {\r\n\r\n    const list = [];\r\n    const state = props.appState;\r\n\r\n    if(props.appState.env != 'prod') {\r\n        list.push(state.env);\r\n    }\r\n\r\n    if(props.appState.debugMode) {\r\n        list.push(\"debug\");\r\n    }\r\n\r\n    if(localStorage.getItem('TrackAnalytics') === 'false') {\r\n        list.push(\"notrack\");\r\n    }\r\n\r\n    if(list.length == 0)\r\n        return null;\r\n\r\n    return <div>\r\n            {list.map(i => <span>{i}&nbsp;</span>)}\r\n        </div>\r\n}\r\n\r\nexport default Indicators;","import React from 'react';\r\nimport InputBox from './components/InputBox';\r\nimport DisplayResultView from './components/DisplayResultView';\r\nimport AppState from './core/AppState';\r\nimport cmd from './core/cmd';\r\nimport CommandResult from './models/CommandResult';\r\nimport log from 'loglevel';\r\nimport Indicators from './components/Indicators';\r\n\r\ntype AppRootProps = {\r\n    appState: AppState,    \r\n};\r\n\r\ntype AppRootState = {\r\n    uiTheme: string,\r\n    emphasizeBytes: boolean,\r\n    commandResults: CommandResult[]\r\n}\r\n\r\nexport default class AppRoot extends React.Component<AppRootProps, AppRootState> {\r\n    \r\n    componentWillMount() {\r\n        this.refresh();\r\n        this.props.appState.onChange(() => this.refresh());\r\n    }\r\n\r\n    refresh() {\r\n        this.setState(this.props.appState);\r\n    }\r\n    \r\n    getIndicator(value : boolean) {\r\n        return value ? 'on' : 'off';\r\n    }\r\n\r\n    getResultViews() : JSX.Element[] {\r\n        log.debug('getting result views')\r\n        var results = this.state.commandResults.map((r, i) => <DisplayResultView key={i} content={r} input={r.input} inputHash={r.inputHash} appState={this.props.appState} />);\r\n        return results;\r\n    }\r\n\r\n    toggleEmphasizeBytes() {\r\n        this.props.appState.toggleEmphasizeBytes();\r\n    }\r\n\r\n    render() {\r\n        return <div className={`app-root ${this.state.uiTheme}`}>\r\n                    <Indicators appState={this.props.appState} />\r\n                    <div className=\"header\">\r\n                        <h1>Bitwise<span className=\"header-cmd\">Cmd</span>\r\n                        </h1>\r\n                        <ul className=\"top-links\">\r\n                            <li>\r\n                                <a href=\"https://github.com/BorisLevitskiy/BitwiseCmd\"><i className=\"icon github\">&nbsp;</i><span className=\"link-text\">Project on GitHub</span></a>\r\n                            </li>\r\n                            <li>\r\n                                <a href=\"https://twitter.com/BitwiseCmd\"><i className=\"icon twitter\">&nbsp;</i><span className=\"link-text\">Twitter</span></a>\r\n                            </li>\r\n                            <li>\r\n                                <a href=\"mailto:&#098;&#105;&#116;&#119;&#105;&#115;&#101;&#099;&#109;&#100;&#064;&#103;&#109;&#097;&#105;&#108;&#046;&#099;&#111;&#109;?subject=Feedback\"><i className=\"icon feedback\">&nbsp;</i><span className=\"link-text\">Send Feedback</span></a>\r\n                            </li>\r\n                        </ul>\r\n                    </div>\r\n\r\n                    <div className=\"expressionInput-container\">\r\n                        <InputBox onCommandEntered={(input) => cmd.execute(input)} />\r\n\r\n                        <span className=\"configPnl\">\r\n                            <span id=\"emphasizeBytes\" data-cmd=\"em\" className={\"indicator \" + this.getIndicator(this.state.emphasizeBytes)} title=\"Toggle Emphasize Bytes\" onClick={e => this.toggleEmphasizeBytes()}>[em]</span>\r\n                        </span>\r\n                    </div>\r\n\r\n                    <div id=\"output\">\r\n                    {this.getResultViews()}\r\n                    </div>\r\n                </div>;\r\n    }\r\n}","export default {\r\n    encodeHash: function(input:string):string {\r\n        return encodeURI(input.trim().replace(/\\s/g,','));\r\n    },\r\n    decodeHash: function(hashValue:string):string {\r\n        return decodeURI(hashValue).replace(/^\\#/, '').replace(/,/g,' ');\r\n    },\r\n    getArgs: function (hashValue:string) : string[] {\r\n\r\n        var decodedHash = this.decodeHash(hashValue);\r\n        var args : string[] = [];\r\n\r\n        splitHashList(decodedHash).forEach(function(value) {\r\n            args.push(value);\r\n        });\r\n\r\n        return args;\r\n    }\r\n};\r\n\r\nfunction splitHashList(str: string) : string[] {\r\n    var values = [];\r\n\r\n    if(str.indexOf('||')) {\r\n    str.split('||').forEach(function (v) {\r\n        if (v.length > 0) {\r\n            values.push(v);\r\n        }\r\n    });\r\n    } else {\r\n        values.push(str);\r\n    }\r\n\r\n    return values;\r\n}","import AppState from './core/AppState';\r\nimport appStateStore from './core/appStateStore';\r\nimport cmd from './core/cmd';\r\nimport commands from './commands';\r\nimport AppRoot from './AppRoot';\r\nimport hash from './core/hash';\r\nimport log from 'loglevel';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nconst env = window.location.host === \"bitwisecmd.com\" ? 'prod' : 'stage';\r\nsetupLogger(env);\r\n\r\nconst appState = createAppState(env);\r\n\r\ncommands.initialize(cmd, appState);\r\n\r\nexecuteStartupCommands();\r\n\r\nvar root = <AppRoot appState={appState} />;\r\nReactDOM.render(root, document.getElementById('root'));\r\n\r\nlog.debug(\"started\");\r\n\r\nfunction createAppState(env:string) {\r\n    var stateData = appStateStore.getPersistedData();\r\n    const appState = new AppState(stateData, env);\r\n    appStateStore.watch(appState);\r\n    log.debug(\"appState initialized\", appState);\r\n    return appState;\r\n}\r\n\r\nfunction setupLogger(env: Env) {\r\n    if(env != 'prod'){\r\n        log.setLevel(\"debug\");\r\n        log.debug(`Log level is set to debug. Env: ${env}`)\r\n    } else {\r\n        log.setLevel(\"warn\");\r\n    }\r\n}\r\n\r\nfunction executeStartupCommands() {\r\n    var hashArgs = hash.getArgs(window.location.hash);\r\n\r\n    var startupCommands = ['127.0.0.1']; // ['help', '1|2&6','1 2 4 8 16 32 0b1000000 0x80'];\r\n\r\n    if(appState.wasOldVersion) {\r\n        startupCommands = [\"whatsnew\"];\r\n    }\r\n\r\n    if(hashArgs.length > 0) {\r\n        startupCommands = hashArgs;\r\n    }\r\n\r\n    startupCommands.forEach(cmd.execute.bind(cmd));\r\n}\r\n\r\ntype Env = 'prod' | 'stage';\r\n","import { NumberBase } from \"./expression-interfaces\";\r\n\r\nconst decimalRegex = /^-?\\d+$/;\r\nconst hexRegex = /^-?0x[0-9,a-f]+$/i;\r\nconst binRegex = /^-?0b[0-1]+$/i;\r\nconst operatorRegex = /^<<|>>|<<<|\\&|\\|\\^|~$/;\r\n\r\ninterface ParserConfig {\r\n    regex: RegExp,\r\n    radix: number,\r\n    base: NumberBase,\r\n    prefix: string|RegExp\r\n}\r\n\r\nexport interface ParsedNumber {\r\n    value: number;\r\n    base: NumberBase;\r\n    input: string;\r\n}\r\n\r\nvar knownParsers : ParserConfig[] = [\r\n    { regex: decimalRegex, radix: 10, base: 'dec', prefix: '^$' },\r\n    { regex: hexRegex, radix: 16, base: 'hex', prefix:/0x/i },\r\n    { regex: binRegex, radix: 2, base: 'bin', prefix:/0b/i }];\r\n\r\n\r\nclass NumberParser {\r\n\r\n    parsers: ParserConfig[];\r\n\r\n    constructor(parsers: ParserConfig[])\r\n    {\r\n        this.parsers = parsers;\r\n    }\r\n\r\n    parse (input : string) : ParsedNumber | null {\r\n        return this.parsers.map(p => this.applyParser(p, input)).reduce((c, n) => c || n);\r\n    };\r\n\r\n    parseOperator (input: string) : string | null {\r\n        var m = input.match(input);\r\n        \r\n        if(m == null || m.length == 0) {\r\n            return null;\r\n        }\r\n\r\n        return m[0];\r\n    };\r\n\r\n    applyParser(parser : ParserConfig, rawInput: string) : ParsedNumber | null {\r\n    \r\n        if(!parser.regex.test(rawInput)) {\r\n            return null;\r\n        }\r\n            \r\n        var value = parseInt(rawInput.replace(parser.prefix, ''), parser.radix);\r\n    \r\n        return  {\r\n            value: value,\r\n            base: parser.base,\r\n            input: rawInput\r\n        }    \r\n    }\r\n}\r\n\r\nconst numberParser = new NumberParser(knownParsers);\r\n\r\nexport {numberParser};","import {numberParser} from './numberParser';\r\nimport { ExpressionInputItem, NumberBase } from './expression-interfaces';\r\n\r\nvar globalId : number = 1;\r\n\r\n// Represents numeric value\r\nexport default class NumericOperand implements ExpressionInputItem {\r\n    id: number;\r\n    value: number;\r\n    base: NumberBase;\r\n    lengthInBits: number;\r\n    isExpression: boolean;\r\n\r\n    constructor(value : number, base?: NumberBase) {\r\n        this.id = globalId++;\r\n        this.value = value;\r\n        this.base = base || \"dec\";\r\n        this.lengthInBits = NumericOperand.getBitLength(this.value);\r\n        this.isExpression = false;\r\n    }\r\n            \r\n    getLengthInBits() {\r\n        if(this.value < 0) {\r\n            return 32;\r\n        }\r\n        return Math.floor(Math.log(this.value) / Math.log(2)) + 1;\r\n    };\r\n\r\n    getOtherBase(kind?: NumberBase) : NumberBase {\r\n        switch(kind || this.base) {\r\n            case 'dec': \r\n            case 'bin':\r\n                return 'hex';\r\n            case 'hex': return 'dec';\r\n            default : throw new Error(kind + \" kind doesn't have opposite kind\")\r\n        }\r\n    };\r\n\r\n    toString(base?: NumberBase) : string {\r\n        return NumericOperand.toBaseString(this.value, base || this.base);\r\n    }\r\n\r\n    toOtherKindString() : string {\r\n        return this.toString(this.getOtherBase());\r\n    }\r\n\r\n    toDecimalString() {\r\n        return this.toString('dec');\r\n    }\r\n\r\n    toHexString() {\r\n        return this.toString('hex');\r\n    }\r\n\r\n    toBinaryString() : string {\r\n        return this.toString('bin');\r\n    }\r\n\r\n    setValue(value : number) {\r\n        this.value = value;\r\n        this.lengthInBits = NumericOperand.getBitLength(value);\r\n    }\r\n\r\n    evaluate() : NumericOperand {\r\n        return this;\r\n    }\r\n\r\n    getUnderlyingOperand() : NumericOperand  {\r\n        return this\r\n    }\r\n        \r\n    static getBitLength(num : number) {\r\n        return Math.floor(Math.log(num) / Math.log(2)) + 1;\r\n    }    \r\n    \r\n    static getBase(kind : string){\r\n        switch (kind){\r\n            case 'bin': return 2;\r\n            case 'hex': return 16;\r\n            case 'dec': return 10;\r\n        }\r\n    };\r\n\r\n    static create(value : number, base? : NumberBase) {\r\n        return new NumericOperand(value, base || \"dec\");\r\n    };\r\n\r\n    static parse(input: string) : NumericOperand {\r\n                    \r\n        var parsed = numberParser.parse(input);\r\n\r\n        if(!parsed) {\r\n            throw new Error(input + \" is not a valid number\");\r\n        }\r\n\r\n        return new NumericOperand(parsed.value, parsed.base);\r\n    }\r\n\r\n    static toBaseString(value : number, base : NumberBase) : string {\r\n        switch(base) {\r\n            case 'hex':\r\n                var hexVal = Math.abs(value).toString(16);\r\n                return value >= 0 ? '0x' + hexVal : '-0x' + hexVal;\r\n            case 'bin':\r\n                return (value>>>0).toString(2);\r\n            case 'dec':\r\n                return value.toString(10);\r\n            default:\r\n                throw new Error(\"Unexpected kind: \" + base)\r\n        }\r\n    };\r\n\r\n     static toHexString (hex : string) {\r\n            return hex.indexOf('-') === 0 ? '-0x' + hex.substr(1) : '0x' + hex;\r\n     };\r\n}","import NumericOperand from './NumericOperand';\r\nimport { ExpressionInputItem } from './expression-interfaces';\r\n\r\nexport default class ExpressionOperand implements ExpressionInputItem {\r\n    expressionString: string;\r\n    operand: ExpressionInputItem;\r\n    sign: string;\r\n    isExpression: boolean;\r\n    isShiftExpression: boolean;\r\n    isNotExpression: boolean;\r\n\r\n    constructor(expressionString : string, operand : ExpressionInputItem, sign : string) {\r\n        this.expressionString = expressionString;\r\n        this.operand = operand;\r\n        this.sign = sign;\r\n        this.isExpression = true;\r\n        this.isShiftExpression = this.sign.indexOf('<') >= 0 || this.sign.indexOf('>')>= 0;\r\n        this.isNotExpression = this.sign === '~';\r\n    }\r\n        \r\n    evaluate(operand?: NumericOperand) : NumericOperand {\r\n        if (operand instanceof ExpressionOperand) {\r\n            throw new Error('value shouldnt be expression'); \r\n        }\r\n\r\n        var evaluatedOperand = this.operand.evaluate();\r\n\r\n        var str = '';\r\n        if(this.sign == '~'){\r\n            str = '~' + evaluatedOperand.value;\r\n        } else {\r\n            if(operand == null)\r\n            throw new Error(\"Other is required for expression: \" + this.expressionString)\r\n\r\n            str = operand.value + this.sign + evaluatedOperand.value;\r\n        }\r\n\r\n        return NumericOperand.create(eval(str), evaluatedOperand.base);\r\n    }\r\n\r\n    getUnderlyingOperand() : NumericOperand {\r\n        return this.operand.getUnderlyingOperand();\r\n    }\r\n\r\n    toString(): string {\r\n        return this.sign + this.operand.toString();\r\n    }\r\n}"],"sourceRoot":""}