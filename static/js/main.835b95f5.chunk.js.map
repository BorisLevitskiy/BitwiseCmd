{"version":3,"sources":["expression/numberParser.ts","expression/NumericOperand.ts","expression/ExpressionOperand.ts","core/is.ts","shell/cmd.ts","shell/components/InputBox.tsx","shell/components/DisplayResultView.tsx","shell/components/DebugIndicators.tsx","core/hash.ts","core/components/CommandLink.tsx","shell/components/TopLinks.tsx","shell/components/Toggle.tsx","shell/components/AppRoot.tsx","shell/components/ErrorResultView.tsx","core/formatter.ts","core/components/BinaryString.tsx","networking/components/IpAddressView.tsx","core/byte.ts","networking/subnet-utils.tsx","networking/models.ts","networking/ip-parser.ts","networking/components/IpAddressBinaryString.tsx","networking/components/SubnetView.tsx","shell/analytics.ts","networking/components/VpcView.tsx","networking/module.tsx","expression/ListOfNumbersExpression.ts","expression/BitwiseOperationExpression.ts","expression/expression.ts","expression/components/BitwiseExpressionModel.ts","expression/components/BitwiseOperationExpressionView.tsx","expression/module.tsx","shell/components/AboutResultView.tsx","shell/components/DonateResultView.tsx","shell/components/HelpResultView.tsx","shell/components/TextResultView.tsx","shell/components/WhatsNewResultView.tsx","shell/AppState.ts","shell/appStateStore.ts","shell/startup.ts","shell/module.tsx","shell/components/UnknownInputResultView.tsx","index.tsx"],"names":["knownParsers","regex","radix","base","prefix","numberParser","NumberParser","parsers","Object","classCallCheck","this","input","_this","map","p","applyParser","reduce","c","n","m","match","length","parser","rawInput","test","value","parseInt","replace","globalId","NumericOperand","id","lengthInBits","isExpression","getBitLength","Math","floor","log","kind","Error","toBaseString","toString","getOtherBase","num","parsed","parse","hexVal","abs","hex","indexOf","substr","ExpressionOperand","expressionString","operand","sign","D_MyStuff_Pet_BitwiseCmd_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","isShiftExpression","isNotExpression","evaluatedOperand","evaluate","str","create","eval","getUnderlyingOperand","is","obj","Array","DEFUALT_COMMAND_OPTIONS","doNotTrack","shell_cmd","CmdShell","debugMode","handlers","errorHandler","createClass","key","ops","debug","concat","assign","trim","toLowerCase","handler","findHandler","invokeHandler","e","handleError","h","cmd","createHandler","canHandle","handle","push","console","warn","JSON","stringify","arguments","filter","options","cmdResult","err","error","InputBox","props","possibleConstructorReturn","getPrototypeOf","call","history","historyIndex","nameInput","focus","_this2","react_default","a","createElement","type","ref","onKeyUp","onKeyDown","className","placeholder","autoComplete","target","keyCode","commandInput","unshift","onCommandEntered","args","newIndex","preventDefault","React","Component","DisplayResultView","resultKey","appState","title","href","window","location","pathname","inputHash","react_fontawesome_index_es","icon","faHashtag","size","onClick","removeResult","resultIndex","faTrashAlt","children","DebugIndicators","list","state","env","localStorage","getItem","i","substring","hash","encodeHash","encodeURIComponent","decodeHash","hashValue","decodeURIComponent","getArgs","decodedHash","split","s","forEach","CommandLink","_ref","command","text","textClassName","execute","TopLinks","components_CommandLink","faDonate","faGithub","faTwitter","faEnvelope","Toggle","elementId","isOn","AppRoot","refresh","onChange","setState","commandResults","r","components_DisplayResultView","view","toggleEmphasizeBytes","_this3","uiTheme","components_DebugIndicators","components_TopLinks","InputBox_InputBox","components_Toggle","emphasizeBytes","getResultViews","ErrorResultView","errorMessage","formatter","formatString","getBase","padLeft","symbol","sb","prototype","slice","join","bin","number","emBin","splitByMasks","ipAddrBin","mask1","mask2","res","tmp","mask","b","ch","vpc","subnet","hosts","bind","BinaryStringView","getChildren","index","allowFlipBits","onFlipBit","arr","binaryString","newBinaryString","$event","bits","createBits","splitIntoBytes","bitChars","css","disableHighlight","onBitClick","bytes","splice","IpAddressView","_React$Component","apply","inherits","ipAddresses","ip","firstByte","secondByte","thirdByte","fourthByte","octetNumber","BinaryString_BinaryStringView","onFlippedBit","setOctet","forceUpdate","flipBitsToZero","byte","numberOfBits","pow","flipBitsToOne","createSubnetMaskByte","createSubnetMaskIp","ipm","maskBits","IpAddress","getNetworkAddress","flipSubnetMaskBits","getAddressSpaceSize","maskSize","spaceLengthInBits","flipper","fullByte","flip","ipAddress","IpAddressWithSubnetMask","skipDots","octet","SubnetCommand","cidr","VpcCommand","subnetBits","ipAddressParser","result","parseCommand","matches","getMaches","nextInput","correctInputs","incorrectInputs","ParsingError","v","parsedObjects","parseSingle","parsingErrors","createSubnetDefinition","createVpcDefinition","startsWith","exec","invalid","first","second","third","fourth","maskPart","items","message","IpAddressBinaryString","Fragment","SubnetRow","descr","data-test-name","components_IpAddressBinaryString","SubnetView","_useState","useState","_useState2","slicedToArray","setSubnet","getAdressSpaceSize","newInput","disabled","sendAnalyticsEvent","evt","bitwiseCmdAnalyticsHandler","delivered","MAX_NON_HOSTS_BITS","VpcModel","setVpc","subnetMaskSize","maxSubnets","hostsPerSubnet","networkAddress","decrSubnet","changeSubnetBits","incrSubnet","toBinaryString","showLegend","toggleLegend","faQuestionCircle","style","display","changeVpcCidr","subnetNum","newCidr","trackCommand","action","eventCategory","eventAction","networkingAppModule","setup","addCommandResult","components_ErrorResultView","components_SubnetView","components_VpcView","networking_components_IpAddressView","ListOfNumbersExpression","numbers","maxBitsLength","BitwiseOperationExpression","expressions","expressionItems","ExpressionParser","factories","trimmed","canCreate","factory","l","ListOfNumbersExpressionFactory","BitwiseOperationExpressionFactory","fullRegex","lastIndex","normalizeString","operands","normalizedString","parseMatch","addFactory","BitwiseExpressionViewModel","_ref$emphasizeBytes","_ref$allowFlipBits","maxNumberOfBits","max","getLengthInBits","expressionItem","label","expression","resultNumber","getLabel","resultOperand","op","expr","config","model","addOperandRow","getNumberOfBits","ex","len","prev","eo","addExpressionOperandRow","notResult","addExpressionResultRow","addShiftExpressionResultRow","buildListOfNumbers","buildMultiple","BitwiseOperationExpressionView","rows","getRows","createModel","itm","BitwiseOperationExpressionView_ExpressionRow","onBitFlipped","ExpressionRow","_this4","_this$props","getBinaryString","flipBit","getOther","getLabelString","toOtherKindString","newValue","setValue","expressionAppModule","canParse","BitwiseOperationExpressionView_BitwiseOperationExpressionView","AboutResultView","data-result-type","DonateResultView","copyCss","navigator","clipboard","copiedCss","addr","writeText","setTimeout","faClipboard","shape-rendering","height","width","viewBox","fill","d","HelpResultView","TextResultView","WhatsnewResultView","APP_VERSION","AppState","persistData","version","changeHandlers","persistedVersion","wasOldVersion","pageVisitsCount","donationClicked","pageVisistsCount","ceil","random","Date","now","triggerChanged","theme","appStateStore","getPersistedData","json","watch","setItem","getPersistData","STARTUP_COMMAND_KEY","DEFAULT_COMMANDS","bootstrapAppData","shellModule","components_HelpResultView","clearCommandResults","setUiTheme","components_AboutResultView","components_WhatsNewResultView","components_TextResultView","uuid","toggleDebugMode","onDonationClicked","components_DonateResultView","removeItem","onError","UnknownInputResultView","appData","host","setLevel","setupLogger","stateData","createAppState","startupCommands","hashArgs","loadStoredCommands","getStartupCommands","components_UnknownInputResultView","root","AppRoot_AppRoot","ReactDOM","render","document","getElementById","registerVisit"],"mappings":"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","file":"static/js/main.835b95f5.chunk.js","sourcesContent":["import { NumberBase } from \"./expression-interfaces\";\r\n\r\nconst decimalRegex = /^-?\\d+$/;\r\nconst hexRegex = /^-?0x[0-9,a-f]+$/i;\r\nconst binRegex = /^-?0b[0-1]+$/i;\r\nconst operatorRegex = /^<<|>>|<<<|\\&|\\|\\^|~$/;\r\n\r\ninterface ParserConfig {\r\n    regex: RegExp,\r\n    radix: number,\r\n    base: NumberBase,\r\n    prefix: string|RegExp\r\n}\r\n\r\nexport interface ParsedNumber {\r\n    value: number;\r\n    base: NumberBase;\r\n    input: string;\r\n}\r\n\r\nvar knownParsers : ParserConfig[] = [\r\n    { regex: decimalRegex, radix: 10, base: 'dec', prefix: '^$' },\r\n    { regex: hexRegex, radix: 16, base: 'hex', prefix:/0x/i },\r\n    { regex: binRegex, radix: 2, base: 'bin', prefix:/0b/i }];\r\n\r\n\r\nclass NumberParser {\r\n\r\n    parsers: ParserConfig[];\r\n\r\n    constructor(parsers: ParserConfig[])\r\n    {\r\n        this.parsers = parsers;\r\n    }\r\n\r\n    parse (input : string) : ParsedNumber | null {\r\n        return this.parsers.map(p => this.applyParser(p, input)).reduce((c, n) => c || n);\r\n    };\r\n\r\n    parseOperator (input: string) : string | null {\r\n        var m = input.match(input);\r\n        \r\n        if(m == null || m.length == 0) {\r\n            return null;\r\n        }\r\n\r\n        return m[0];\r\n    };\r\n\r\n    applyParser(parser : ParserConfig, rawInput: string) : ParsedNumber | null {\r\n    \r\n        if(!parser.regex.test(rawInput)) {\r\n            return null;\r\n        }\r\n            \r\n        var value = parseInt(rawInput.replace(parser.prefix, ''), parser.radix);\r\n    \r\n        return  {\r\n            value: value,\r\n            base: parser.base,\r\n            input: rawInput\r\n        }    \r\n    }\r\n}\r\n\r\nconst numberParser = new NumberParser(knownParsers);\r\n\r\nexport {numberParser};","import {numberParser} from './numberParser';\r\nimport { ExpressionInputItem, NumberBase } from './expression-interfaces';\r\n\r\nvar globalId : number = 1;\r\n\r\n// Represents numeric value\r\nexport default class NumericOperand implements ExpressionInputItem {\r\n    id: number;\r\n    value: number;\r\n    base: NumberBase;\r\n    lengthInBits: number;\r\n    isExpression: boolean;\r\n\r\n    constructor(value : number, base?: NumberBase) {\r\n        this.id = globalId++;\r\n        this.value = value;\r\n        this.base = base || \"dec\";\r\n        this.lengthInBits = NumericOperand.getBitLength(this.value);\r\n        this.isExpression = false;\r\n    }\r\n            \r\n    getLengthInBits() {\r\n        if(this.value < 0) {\r\n            return 32;\r\n        }\r\n        return Math.floor(Math.log(this.value) / Math.log(2)) + 1;\r\n    };\r\n\r\n    getOtherBase(kind?: NumberBase) : NumberBase {\r\n        switch(kind || this.base) {\r\n            case 'dec': \r\n            case 'bin':\r\n                return 'hex';\r\n            case 'hex': return 'dec';\r\n            default : throw new Error(kind + \" kind doesn't have opposite kind\")\r\n        }\r\n    };\r\n\r\n    toString(base?: NumberBase) : string {\r\n        return NumericOperand.toBaseString(this.value, base || this.base);\r\n    }\r\n\r\n    toOtherKindString() : string {\r\n        return this.toString(this.getOtherBase());\r\n    }\r\n\r\n    toDecimalString() {\r\n        return this.toString('dec');\r\n    }\r\n\r\n    toHexString() {\r\n        return this.toString('hex');\r\n    }\r\n\r\n    toBinaryString() : string {\r\n        return this.toString('bin');\r\n    }\r\n\r\n    setValue(value : number) {\r\n        this.value = value;\r\n        this.lengthInBits = NumericOperand.getBitLength(value);\r\n    }\r\n\r\n    evaluate() : NumericOperand {\r\n        return this;\r\n    }\r\n\r\n    getUnderlyingOperand() : NumericOperand  {\r\n        return this\r\n    }\r\n        \r\n    static getBitLength(num : number) {\r\n        return Math.floor(Math.log(num) / Math.log(2)) + 1;\r\n    }    \r\n    \r\n    static getBase(kind : string){\r\n        switch (kind){\r\n            case 'bin': return 2;\r\n            case 'hex': return 16;\r\n            case 'dec': return 10;\r\n        }\r\n    };\r\n\r\n    static create(value : number, base? : NumberBase) {\r\n        return new NumericOperand(value, base || \"dec\");\r\n    };\r\n\r\n    static parse(input: string) : NumericOperand {\r\n                    \r\n        var parsed = numberParser.parse(input);\r\n\r\n        if(!parsed) {\r\n            throw new Error(input + \" is not a valid number\");\r\n        }\r\n\r\n        return new NumericOperand(parsed.value, parsed.base);\r\n    }\r\n\r\n    static toBaseString(value : number, base : NumberBase) : string {\r\n        switch(base) {\r\n            case 'hex':\r\n                var hexVal = Math.abs(value).toString(16);\r\n                return value >= 0 ? '0x' + hexVal : '-0x' + hexVal;\r\n            case 'bin':\r\n                return (value>>>0).toString(2);\r\n            case 'dec':\r\n                return value.toString(10);\r\n            default:\r\n                throw new Error(\"Unexpected kind: \" + base)\r\n        }\r\n    };\r\n\r\n     static toHexString (hex : string) {\r\n            return hex.indexOf('-') === 0 ? '-0x' + hex.substr(1) : '0x' + hex;\r\n     };\r\n}","import NumericOperand from './NumericOperand';\r\nimport { ExpressionInputItem } from './expression-interfaces';\r\n\r\nexport default class ExpressionOperand implements ExpressionInputItem {\r\n    expressionString: string;\r\n    operand: ExpressionInputItem;\r\n    sign: string;\r\n    isExpression: boolean;\r\n    isShiftExpression: boolean;\r\n    isNotExpression: boolean;\r\n\r\n    constructor(expressionString : string, operand : ExpressionInputItem, sign : string) {\r\n        this.expressionString = expressionString;\r\n        this.operand = operand;\r\n        this.sign = sign;\r\n        this.isExpression = true;\r\n        this.isShiftExpression = this.sign.indexOf('<') >= 0 || this.sign.indexOf('>')>= 0;\r\n        this.isNotExpression = this.sign === '~';\r\n    }\r\n        \r\n    evaluate(operand?: NumericOperand) : NumericOperand {\r\n        if (operand instanceof ExpressionOperand) {\r\n            throw new Error('value shouldnt be expression'); \r\n        }\r\n\r\n        var evaluatedOperand = this.operand.evaluate();\r\n\r\n        var str = '';\r\n        if(this.sign == '~'){\r\n            str = '~' + evaluatedOperand.value;\r\n        } else {\r\n            if(operand == null)\r\n            throw new Error(\"Other is required for expression: \" + this.expressionString)\r\n\r\n            str = operand.value + this.sign + evaluatedOperand.value;\r\n        }\r\n\r\n        return NumericOperand.create(eval(str), evaluatedOperand.base);\r\n    }\r\n\r\n    getUnderlyingOperand() : NumericOperand {\r\n        return this.operand.getUnderlyingOperand();\r\n    }\r\n\r\n    toString(): string {\r\n        return this.sign + this.operand.toString();\r\n    }\r\n}","export default {\r\n    plainObject: function(obj : any) : boolean {\r\n        return typeof obj == \"object\" && !(obj instanceof Array) && obj instanceof Object;\r\n    },\r\n\r\n    aFunction: function(obj : any) : boolean {\r\n        return typeof obj == \"function\";\r\n    },\r\n\r\n    string: function(obj : any) : boolean {\r\n        return typeof obj == \"string\";\r\n    },\r\n\r\n    array: function(obj : any) : boolean  {\r\n        return obj instanceof Array;\r\n    },\r\n\r\n    number: function(obj : any) : boolean  {\r\n        return typeof obj == \"number\" && !isNaN(obj)\r\n    }\r\n}","import is from '../core/is';\r\nimport log from 'loglevel';\r\n\r\nexport type CommandInput = {\r\n    input: string;\r\n    options: CommandOptions\r\n}\r\n\r\nexport type CommandOptions = {\r\n    doNotTrack: boolean;\r\n}\r\n\r\ntype HandleFunction = (input: CommandInput) => void;\r\ntype InputErrorHandler = (input:string, error: Error) => void;\r\n\r\nconst DEFUALT_COMMAND_OPTIONS : CommandOptions = {\r\n    doNotTrack: false\r\n};\r\n\r\nexport interface ICommandHandler {\r\n    canHandle (input:string) : boolean;\r\n    handle: HandleFunction;\r\n}\r\n\r\nexport class CmdShell {\r\n    debugMode: boolean;\r\n    handlers: ICommandHandler[];\r\n    errorHandler: InputErrorHandler | null; \r\n    constructor() {\r\n        this.handlers = [];\r\n        this.debugMode = false;\r\n        this.errorHandler = null;\r\n    };\r\n\r\n    execute (rawInput: string, ops?: CommandOptions ) {\r\n\r\n        log.debug(`Executing command: ${rawInput}`);\r\n\r\n        ops = ops || Object.assign({}, DEFUALT_COMMAND_OPTIONS);\r\n\r\n        var input = rawInput.trim().toLowerCase();\r\n        var handler = this.findHandler(input);\r\n\r\n        if(handler != null) {\r\n            if(this.debugMode) {\r\n                this.invokeHandler(input, handler, ops);\r\n            } else {\r\n                try {\r\n                    this.invokeHandler(input, handler, ops);\r\n                } catch (e) {\r\n                     this.handleError(input, e);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            log.debug(`Handled is not found for command: ${rawInput}`)\r\n            this.handleError(input, new Error(\"Unsupported expression: \" + input.trim()));\r\n        }\r\n    };\r\n\r\n    onError(h: InputErrorHandler) {\r\n        this.errorHandler = h;\r\n    }\r\n   \r\n    command (cmd : string | object, handler? : any) {\r\n        var h = this.createHandler(cmd, handler);\r\n        if(h == null){\r\n            console.warn('unexpected set of arguments: ', JSON.stringify(arguments));\r\n            return;\r\n        }\r\n\r\n        if(!is.aFunction(h.canHandle)) {\r\n            console.warn('handler is missing \"canHandle\" function. registration denied.');\r\n            return;\r\n        }\r\n\r\n        if(!is.aFunction(h.handle)) {\r\n            console.warn('handler is missing \"handle\" function. registration denied.');\r\n            return;\r\n        }\r\n\r\n        this.handlers.push(h);\r\n    };\r\n\r\n    createHandler (cmd : string | object, handler : HandleFunction) : ICommandHandler | null {\r\n        if(is.plainObject(cmd)) {\r\n            return cmd as ICommandHandler;\r\n        }\r\n\r\n        if(is.string(cmd)) {\r\n            return { canHandle: function (input) { return input === cmd; }, handle: handler };\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    findHandler (input: string) : ICommandHandler | null {\r\n        return this.handlers.filter(h => h.canHandle(input))[0];\r\n    };\r\n\r\n    invokeHandler (input : string, handler : ICommandHandler, options: CommandOptions) {\r\n\r\n        var cmdResult = handler.handle({ input: input, options });\r\n        if(cmdResult != null) {\r\n            log.debug(cmdResult);\r\n        }\r\n    };\r\n\r\n    handleError (input: string, err: Error) {\r\n        if(this.debugMode)\r\n            console.error(input, err);\r\n\r\n        if(this.errorHandler != null)\r\n            this.errorHandler(input, err);\r\n    }\r\n}\r\n\r\nexport default new CmdShell();","import React from 'react';\r\nimport log from 'loglevel';\r\n\r\nexport interface IInputBoxProps\r\n{\r\n    onCommandEntered: (input :string) => void;\r\n}\r\n\r\nexport default class InputBox extends React.Component<IInputBoxProps> {\r\n    history: string[];\r\n    historyIndex: number;\r\n    nameInput:  HTMLInputElement | null;\r\n\r\n    constructor(props: IInputBoxProps) {\r\n        super(props);\r\n        this.nameInput = null;\r\n        this.history = [];\r\n        this.historyIndex = -1;\r\n    }\r\n\r\n    componentDidMount(){\r\n        if(this.nameInput != null)\r\n            this.nameInput.focus();\r\n    }\r\n\r\n    render() {\r\n        return <input id=\"in\" type=\"text\"\r\n                      ref={(input) => { this.nameInput = input; }} \r\n                      onKeyUp={e => this.onKeyUp(e)}\r\n                      onKeyDown={e => this.onKeyDown(e)}\r\n                      className=\"expressionInput mono\"\r\n                      placeholder=\"type expression like '1>>2' or 'help' \"\r\n                      autoComplete=\"off\"/>;\r\n    }\r\n\r\n    onKeyUp(e: any) {\r\n        var input = e.target;\r\n        if (e.keyCode != 13 || input.value.trim().length == 0) {\r\n            return;\r\n        }\r\n        \r\n        var commandInput = input.value;\r\n        this.history.unshift(commandInput);\r\n        this.historyIndex = -1;\r\n\r\n        input.value = '';        \r\n        this.props.onCommandEntered(commandInput);\r\n    }\r\n\r\n    onKeyDown(args: any) {\r\n\r\n        if(args.keyCode == 38) {\r\n            var newIndex = this.historyIndex+1;\r\n\r\n            if (this.history.length > newIndex) { // up\r\n                args.target.value = this.history[newIndex];\r\n                this.historyIndex = newIndex;\r\n            }\r\n\r\n            args.preventDefault();\r\n            return;\r\n        }\r\n\r\n        if(args.keyCode == 40) {\r\n            if(this.historyIndex > 0) { // down\r\n                args.target.value = this.history[--this.historyIndex];\r\n            }\r\n\r\n            args.preventDefault();\r\n        }\r\n    }\r\n}","import { faTrashAlt, faHashtag } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport AppState from '../AppState';\r\n\r\n\r\ntype DisplayResultProps = {\r\n    appState: AppState,\r\n    inputHash: string,\r\n    input: string,\r\n    resultKey: number,\r\n    resultIndex: number,\r\n    onRemove?: (i: number) => void;\r\n}\r\n\r\nconst DisplayResultView: React.FunctionComponent<DisplayResultProps> = (props) => {\r\n\r\n        const resultKey : number = props.resultKey;\r\n        const appState = props.appState;\r\n\r\n        return <div className=\"result\">\r\n                        <div className=\"input mono\">\r\n                                <span className=\"cur\">\r\n                                    &gt;</span>{props.input}\r\n                                    <a className=\"hashLink\" title=\"Link for this expression\" href={window.location.pathname + '#' + props.inputHash}>\r\n                                        <FontAwesomeIcon className=\"icon\" icon={faHashtag} size=\"xs\" />\r\n                                    </a>\r\n                                    <button className=\"hashLink\" title=\"Remove this result\" onClick={() => appState.removeResult(props.resultIndex)}>\r\n                                        <FontAwesomeIcon className=\"icon\" icon={faTrashAlt} size=\"xs\" />\r\n                                    </button>\r\n                            </div>\r\n                        <div className=\"content\">\r\n                            {props.children}\r\n                        </div>\r\n                    </div>;\r\n}\r\n\r\nexport default DisplayResultView;\r\n\r\n","import AppState from \"../AppState\";\r\nimport React from \"react\";\r\nimport './DebugIndicators.css';\r\n\r\nfunction DebugIndicators(props:  {appState: AppState}) {\r\n\r\n    const list = [];\r\n    const state = props.appState;\r\n\r\n    if(props.appState.env != 'prod') {\r\n        list.push(state.env);\r\n    }\r\n\r\n    if(props.appState.debugMode) {\r\n        list.push(\"debug\");\r\n    }\r\n\r\n    if(localStorage.getItem('TrackAnalytics') === 'false') {\r\n        list.push(\"notrack\");\r\n    }\r\n\r\n    if(list.length == 0)\r\n        return null;\r\n\r\n    return <div className=\"debug-indicators\">\r\n            {list.map(i => <span title={i} key={i}>[{i.substring(0,1)}]&nbsp;</span>)}\r\n        </div>\r\n}\r\n\r\nexport default DebugIndicators;","export default {\r\n    encodeHash: function(input:string):string {\r\n        return encodeURIComponent(input.trim().replace(/\\s/g,','));\r\n    },\r\n    decodeHash: function(hashValue:string):string {\r\n        return decodeURIComponent(hashValue.replace(/^\\#/, '')).replace(/,/g,' ');\r\n    },\r\n    getArgs: function (hashValue:string) : string[] {\r\n\r\n        var decodedHash = this.decodeHash(hashValue);\r\n        var args : string[] = [];\r\n\r\n        splitHashList(decodedHash).forEach(function(value) {\r\n            args.push(value);\r\n        });\r\n\r\n        return args;\r\n    }\r\n};\r\n\r\nfunction splitHashList(str: string) : string[] {\r\n\r\n    return str.split('||').filter(s => s.length > 0);\r\n}","import { IconDefinition } from '@fortawesome/fontawesome-svg-core';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport cmd from '../../shell/cmd';\r\n\r\ntype CommandLinkProps = {\r\n    command?:string;\r\n    text:string;\r\n    textClassName?: string\r\n    icon?: IconDefinition\r\n}\r\n\r\nfunction CommandLink({icon, command, text, textClassName}: CommandLinkProps) {\r\n    \r\n    const onClick = () => cmd.execute(command || text);\r\n\r\n    if(icon != null)\r\n        return <a href=\"javascript:void(0)\" onClick={onClick}><FontAwesomeIcon icon={icon} className=\"icon\" /><span className={textClassName}>{text}</span></a>;\r\n\r\n    return <a href=\"javascript:void(0)\" onClick={onClick}><span className={textClassName}>{text}</span></a>;\r\n}\r\n\r\nexport default CommandLink;","import React from 'react';\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport { faEnvelope, faDonate } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faTwitter, faGithub} from \"@fortawesome/free-brands-svg-icons\";\r\nimport './TopLinks.css';\r\nimport CommandLink from '../../core/components/CommandLink';\r\n\r\nfunction TopLinks() {\r\n    return <ul className=\"top-links\">                \r\n                <li>\r\n                    <CommandLink text=\"donate\" icon={faDonate} textClassName=\"link-text\" />\r\n                </li>\r\n                <li>\r\n                    <a href=\"https://github.com/BorisLevitskiy/BitwiseCmd\"><FontAwesomeIcon className=\"icon\" icon={faGithub} size=\"lg\" /><span className=\"link-text\">github</span></a>\r\n                </li>\r\n                <li>\r\n                    <a href=\"https://twitter.com/BitwiseCmd\"><FontAwesomeIcon className=\"icon\" icon={faTwitter} size=\"lg\" /><span className=\"link-text\">twitter</span></a>\r\n                </li>\r\n                <li>\r\n                    <a href=\"mailto:&#098;&#105;&#116;&#119;&#105;&#115;&#101;&#099;&#109;&#100;&#064;&#103;&#109;&#097;&#105;&#108;&#046;&#099;&#111;&#109;?subject=Feedback\"><FontAwesomeIcon className=\"icon\" icon={faEnvelope} size=\"lg\" /><span className=\"link-text\">idea or feedback</span></a>\r\n                </li>\r\n    </ul>;\r\n}\r\n\r\nexport default TopLinks;","\r\nimport React from \"react\";\r\n\r\nexport type ToggleProps = {\r\n    text?: string,\r\n    isOn: boolean,\r\n    title: string,\r\n    elementId?: string\r\n    onClick: () => void\r\n};\r\n\r\nconst Toggle: React.FunctionComponent<ToggleProps> = (props) => {\r\n\r\n    return <span id={props.elementId} \r\n        className={\"indicator \" + getIndicator(props.isOn)} \r\n        title={props.title} \r\n        onClick={() => props.onClick()}>\r\n            { !props.children ? props.text : props.children }\r\n        </span>\r\n}\r\n\r\nfunction getIndicator(value : boolean) {\r\n    return value ? 'on' : 'off';\r\n}\r\n\r\nexport default Toggle;","import React from 'react';\r\nimport InputBox from './InputBox';\r\nimport DisplayResultView from './DisplayResultView';\r\nimport AppState, { CommandResultView } from '../AppState';\r\nimport cmd from '../cmd';\r\nimport log from 'loglevel';\r\nimport DebugIndicators from './DebugIndicators';\r\nimport hash from '../../core/hash';\r\nimport TopLinks from './TopLinks';\r\nimport Toggle from './Toggle';\r\n\r\n\r\ntype AppRootProps = {\r\n    appState: AppState,    \r\n};\r\n\r\ntype AppRootState = {\r\n    uiTheme: string,\r\n    emphasizeBytes: boolean,\r\n    commandResults: CommandResultView[]\r\n}\r\n\r\nexport default class AppRoot extends React.Component<AppRootProps, AppRootState> {\r\n    \r\n    componentWillMount() {\r\n        this.refresh();\r\n        this.props.appState.onChange(() => this.refresh());\r\n    }\r\n\r\n    refresh() {\r\n        this.setState(this.props.appState);\r\n    }\r\n    \r\n    getIndicator(value : boolean) {\r\n        return value ? 'on' : 'off';\r\n    }\r\n\r\n    getResultViews() : JSX.Element[] {\r\n\r\n        var results = this.state.commandResults.map((r, i) => \r\n            <DisplayResultView resultIndex={i} resultKey={r.key} key={r.key} input={r.input} inputHash={hash.encodeHash(r.input)} appState={this.props.appState}>\r\n                {r.view}\r\n            </DisplayResultView>);\r\n        return results;\r\n    }\r\n\r\n    toggleEmphasizeBytes() {\r\n        this.props.appState.toggleEmphasizeBytes();\r\n    }\r\n\r\n    render() {\r\n        return <div className={`app-root ${this.state.uiTheme}`}>\r\n                    <DebugIndicators appState={this.props.appState} />\r\n                    <div className=\"header\">\r\n                        <h1>Bitwise<span className=\"header-cmd\">Cmd</span>\r\n                        </h1>\r\n                       <TopLinks />\r\n                    </div>\r\n\r\n                    <div className=\"expressionInput-container\">\r\n                        <InputBox onCommandEntered={(input) => cmd.execute(input)} />\r\n\r\n                        <span className=\"configPnl\">\r\n                            <Toggle elementId=\"emphasizeBytes\" text=\"[em]\" isOn={this.state.emphasizeBytes} onClick={() => this.toggleEmphasizeBytes()} title=\"Toggle Emphasize Bytes\"  />                            \r\n                        </span>\r\n                    </div>\r\n\r\n                    <div id=\"output\">\r\n                    {this.getResultViews()}\r\n                    </div>\r\n                </div>;\r\n    }\r\n}","import React from 'react';\r\n\r\nfunction ErrorResultView(props : {errorMessage:string}) {\r\n    \r\n    return <div className=\"result\">\r\n                <div className=\"error\">{props.errorMessage}</div>\r\n        </div>;\r\n}\r\n\r\nexport default ErrorResultView;\r\n","const formatter = {\r\n    formatString: function(num: number, kind: string) : string {\r\n        return num.toString(getBase(kind || \"bin\"));\r\n    },\r\n    padLeft: function (str: string, length: number, symbol: string) : string {\r\n        var sb = Array.prototype.slice.call(str), symbol = symbol || \"0\";\r\n\r\n        if(length == null) {\r\n            return str;\r\n        }\r\n\r\n        while(length > sb.length) {\r\n            sb.unshift(symbol);\r\n        }\r\n\r\n        return sb.join('');\r\n    },\r\n    bin(number: number) {\r\n        return this.formatString(number, 'bin');\r\n    },\r\n    emBin(number: number) {\r\n        return this.padLeft(this.bin(number), 8, '0');\r\n    },\r\n    \r\n    splitByMasks(ipAddrBin: string, mask1: number, mask2: number) : {vpc: string, subnet: string, hosts:string} {\r\n\r\n        var res = [];\r\n        var tmp : string[] = [];\r\n        var mask = 0;\r\n        var b = mask1;\r\n\r\n        ipAddrBin.split('').forEach(ch => {\r\n            \r\n            tmp.push(ch);\r\n\r\n            if(ch === \".\") {\r\n                return;\r\n            }\r\n\r\n            mask++;\r\n\r\n            if(mask == b) {\r\n                b = mask2;\r\n                res.push(tmp.join(''));\r\n                tmp = [];\r\n            }\r\n        });\r\n\r\n        if(tmp.length > 0) res.push(tmp.join(''));\r\n\r\n        return { vpc: res[0], subnet: res[1], hosts: res[2]};\r\n    }\r\n};\r\n\r\nfunction getBase(kind:string) : number {\r\n    switch (kind){\r\n        case 'bin': return 2;\r\n        case 'hex': return 16;\r\n        case 'dec': return 10;\r\n    }\r\n\r\n    throw new Error(\"Unsupported kind: \" + kind);\r\n}\r\n\r\nconst emBin = formatter.emBin.bind(formatter);\r\nconst padLeft = formatter.padLeft.bind(formatter);\r\n\r\nexport {emBin, padLeft}\r\nexport default formatter;","import React from 'react';\r\n\r\nexport type BinaryStringViewProps = {\r\n    allowFlipBits?: boolean;\r\n    binaryString: string;\r\n    onFlipBit?: (input: FlipBitEventArg) => void;\r\n    emphasizeBytes?: boolean;\r\n    className?:string;\r\n    disableHighlight?:boolean\r\n};\r\n\r\nexport type FlipBitEventArg = {\r\n    index: number;\r\n    binaryString: string;\r\n    $event: any;\r\n    newBinaryString: string\r\n};\r\n\r\nexport default class BinaryStringView extends React.Component<BinaryStringViewProps> {\r\n    render() {\r\n        return <span className={this.props.className}>{this.getChildren()}</span>\r\n    }\r\n\r\n    onBitClick(index: number, e : any) {\r\n        if(!this.props.allowFlipBits || !this.props.onFlipBit) {\r\n            return;\r\n        }\r\n\r\n        if(!this.props.onFlipBit) {\r\n            \r\n        }\r\n\r\n        const arr = this.props.binaryString.split('');\r\n        arr[index] = arr[index] == '0' ? '1' : '0';\r\n        const newBinaryString = arr.join('');\r\n\r\n        this.props.onFlipBit({ index: index, binaryString: this.props.binaryString, $event: e, newBinaryString });        \r\n    }\r\n\r\n    getChildren() {\r\n        var bits = this.createBits(this.props.binaryString.split(''));\r\n        \r\n        if(this.props.emphasizeBytes) {\r\n            return this.splitIntoBytes(bits);\r\n        }\r\n\r\n        return bits;\r\n    }\r\n\r\n    createBits(bitChars:string[]) : JSX.Element[] {\r\n        const allowFlipBits = this.props.allowFlipBits || false;\r\n        const css = allowFlipBits ? ' flipable' : ''\r\n\r\n        const disableHighlight = this.props.disableHighlight || false;\r\n\r\n        return bitChars.map((c, i) => {\r\n\r\n            var className = c == '1' ? `one${css}` : `zero${css}`;\r\n\r\n            if(disableHighlight) \r\n                className = css;\r\n\r\n            return <span className={className} key={i} onClick={e => this.onBitClick(i, e)}>{c}</span>\r\n        });\r\n    }\r\n\r\n    splitIntoBytes(bits: JSX.Element[]) {\r\n        const bytes = [];\r\n\r\n        var key = 0;\r\n        while(bits.length > 0) {\r\n            bytes.push(<span key={key++} className=\"byte\">{bits.splice(0, 8)}</span>);\r\n        }\r\n        \r\n        return bytes;\r\n    }\r\n}","import React from 'react';\r\nimport formatter from '../../core/formatter'\r\nimport BinaryStringView from '../../core/components/BinaryString';\r\nimport './IpAddressView.css';\r\nimport { IpAddress, OctetNumber } from '../models';\r\n\r\ntype IpAddressViewProps = {\r\n    ipAddresses: IpAddress[]\r\n};\r\n\r\nexport class IpAddressView extends React.Component<IpAddressViewProps> \r\n{\r\n    \r\n    render() {        \r\n        return <table className=\"expression\">\r\n            <tbody>\r\n                {this.props.ipAddresses.map((ip, i) => <tr key={i}>\r\n                        <td className=\"label\"><strong>{ip.toString()}</strong></td>\r\n                        <td className=\"bin\">\r\n                            {this.bin(ip.firstByte, 1, ip)}<span className=\"soft\">.</span>\r\n                            {this.bin(ip.secondByte, 2, ip)}<span className=\"soft\">.</span>\r\n                            {this.bin(ip.thirdByte, 3, ip)}<span className=\"soft\">.</span>\r\n                            {this.bin(ip.fourthByte, 4, ip)}\r\n                        </td>\r\n                    </tr>)}\r\n            </tbody>\r\n        </table>;\r\n    }\r\n\r\n    bin(value: number, octetNumber: OctetNumber, ip: IpAddress) {\r\n        return <BinaryStringView \r\n            binaryString={fmt(value)} \r\n            key={octetNumber} \r\n            emphasizeBytes={false} \r\n            allowFlipBits={true}\r\n            className={`octet-${octetNumber}`}\r\n            onFlipBit={e => this.onFlippedBit(e.newBinaryString, octetNumber, ip)} />;\r\n    }\r\n    \r\n    onFlippedBit(binaryString: string, number: OctetNumber, ip : IpAddress) {\r\n        ip.setOctet(number, parseInt(binaryString, 2));\r\n        this.forceUpdate();\r\n    }\r\n};\r\n\r\nfunction fmt(num: number) : string {\r\n    return formatter.padLeft(formatter.formatString(num, 'bin'), 8, '0');\r\n}\r\n\r\nexport default IpAddressView;","function flipBitsToZero(byte: number, numberOfBits : number) : number {\r\n    if(numberOfBits == 0)\r\n        return byte;\r\n    \r\n    const zerouOutMask = Math.pow(2, 8-numberOfBits)-1<<numberOfBits; // E.g. 11111000 for flipping first three bits\r\n    const result = byte & zerouOutMask; \r\n\r\n    return result;\r\n}\r\n\r\n// TODO: continue here to implement getting broadcast address\r\n\r\nfunction flipBitsToOne(byte : number, numberOfBits : number) : number {\r\n    if(numberOfBits == 0) return byte;\r\n\r\n    const zerouOutMask = Math.pow(2, numberOfBits)-1; // E.g. 00000111 for flipping first three bits\r\n    const result = byte | zerouOutMask; \r\n\r\n    return result;\r\n}\r\n\r\nfunction createSubnetMaskByte(numberOfBits: number) {\r\n    return 255<<(8-numberOfBits)&255;;\r\n}\r\n\r\nexport {flipBitsToZero, createSubnetMaskByte, flipBitsToOne};","import { createSubnetMaskByte } from \"../core/byte\";\r\nimport { flipBitsToOne, flipBitsToZero } from '../core/byte';\r\nimport { IpAddress, IpAddressWithSubnetMask, NetworkClass } from \"./models\";\r\n\r\nfunction createSubnetMaskIp(ipm: IpAddressWithSubnetMask) : IpAddress {\r\n\r\n    const mask = createSubnetMaskByte;\r\n    const maskBits = ipm.maskBits;\r\n\r\n    if (maskBits <= 8) {\r\n        return new IpAddress(mask(maskBits), 0, 0, 0);\r\n    }\r\n    else if (maskBits <= 16) {\r\n        return new IpAddress(255, mask(maskBits - 8), 0, 0);\r\n    }\r\n    else if (maskBits <= 24) {\r\n        return new IpAddress(255, 255, mask(maskBits - 16), 0);\r\n    }\r\n    else {\r\n        return new IpAddress(255, 255, 255, mask(maskBits - 24));\r\n    }\r\n}\r\n\r\nfunction getNetworkAddress(ipm: IpAddressWithSubnetMask) : IpAddress {\r\n    return flipSubnetMaskBits(ipm, flipBitsToZero, 0);\r\n}\r\n\r\nfunction getBroadCastAddress(ipm: IpAddressWithSubnetMask) : IpAddress {\r\n    return flipSubnetMaskBits(ipm, flipBitsToOne, 255);\r\n}\r\n\r\nfunction  getAddressSpaceSize(maskSize: number) {\r\n    const spaceLengthInBits = 32 - maskSize;\r\n    return Math.pow(2, spaceLengthInBits) - 2; // 0 - network address, 1 - multicast address\r\n}\r\n\r\nfunction flipSubnetMaskBits(ipm: IpAddressWithSubnetMask, flipper : FlipFunction, fullByte: number) {\r\n    // Cannot treat ip address as a single number operation because 244 << 24 results in a negative number in JS\r\n    const flip = (maskBits: number, byte: number) => flipper(byte, 8 - maskBits);\r\n\r\n    const ip = ipm.ipAddress;\r\n    const maskBits = ipm.maskBits;\r\n\r\n    if (maskBits <= 8) {\r\n        return new IpAddress(flip(maskBits, ip.firstByte), fullByte, fullByte, fullByte);\r\n    }\r\n    else if (maskBits <= 16) {\r\n        return new IpAddress(ip.firstByte, flip(maskBits - 8, ip.secondByte), fullByte, fullByte);\r\n    }\r\n    else if (maskBits <= 24) {\r\n        return new IpAddress(ip.firstByte, ip.secondByte, flip(maskBits - 16, ip.thirdByte), fullByte);\r\n    }\r\n\r\n    else\r\n        return new IpAddress(ip.firstByte, ip.secondByte, ip.thirdByte, flip(maskBits - 24, ip.fourthByte));\r\n}\r\n\r\nfunction getNetworkClass (ipAddress: IpAddress) : NetworkClass {\r\n    const byte = ipAddress.firstByte;\r\n\r\n    const firstBitOne = (byte & 128) === 128;\r\n    const firstBitZero = (byte & 128) === 0;\r\n    const secondBitOne = (byte & 64) === 64;\r\n\r\n    const thirdBitOne = (byte & 32) === 32;\r\n    const thirdBitZero = (byte & 32) === 0;\r\n\r\n    const forthBitZero = (byte & 16) === 0;\r\n    const forthBitOne = (byte & 16) === 16;\r\n\r\n    // e: 1111\r\n\r\n    if(firstBitOne && secondBitOne && thirdBitOne && forthBitOne)\r\n        return 'e';\r\n\r\n    if(firstBitOne && secondBitOne && thirdBitOne && forthBitZero) // Start bits: 1110;\r\n        return 'd';\r\n\r\n    if(firstBitOne && secondBitOne && thirdBitZero) // Start bits: 110;\r\n        return 'c';\r\n   \r\n    return firstBitOne ? 'b' : 'a';\r\n};\r\n\r\n\r\ntype FlipFunction = (byte: number, numberOfBits: number) => number; \r\n\r\nexport {createSubnetMaskIp, getBroadCastAddress, getNetworkAddress, getNetworkClass, getAddressSpaceSize};","import {emBin} from \"../core/formatter\";\r\nimport { getAddressSpaceSize } from \"./subnet-utils\";\r\n\r\nexport type OctetNumber = 1 | 2 | 3 | 4;\r\nexport type NetworkClass = 'a' | 'b' | 'c' | 'd' | 'e';\r\n\r\nexport class IpAddressWithSubnetMask {\r\n    maskBits: number;\r\n    ipAddress: IpAddress;\r\n\r\n    constructor(ipAddress: IpAddress, maskBits: number) {\r\n        this.ipAddress = ipAddress;\r\n        this.maskBits = maskBits;\r\n    }\r\n\r\n    getAdressSpaceSize(): number {\r\n        return getAddressSpaceSize(this.maskBits);\r\n    }\r\n\r\n    toString() {\r\n        return `${this.ipAddress.toString()}/${this.maskBits}`;\r\n    }\r\n}\r\n\r\nexport class IpAddress {\r\n\r\n    firstByte: number;\r\n    secondByte: number;\r\n    thirdByte: number;\r\n    fourthByte: number;\r\n\r\n    constructor(firstByte: number, secondByte: number, thirdByte: number, fourthByte: number) {\r\n        this.firstByte = firstByte;\r\n        this.secondByte = secondByte;\r\n        this.thirdByte = thirdByte;\r\n        this.fourthByte = fourthByte;\r\n    }\r\n\r\n    toString(): string {\r\n        return `${this.firstByte}.${this.secondByte}.${this.thirdByte}.${this.fourthByte}`;\r\n    }\r\n\r\n    toBinaryString(skipDots?: boolean) {\r\n        \r\n        if(!skipDots)\r\n            return `${emBin(this.firstByte)}.${emBin(this.secondByte)}.${emBin(this.thirdByte)}.${emBin(this.fourthByte)}`;\r\n        else \r\n            return `${emBin(this.firstByte)}${emBin(this.secondByte)}${emBin(this.thirdByte)}${emBin(this.fourthByte)}`;\r\n    }\r\n\r\n    clone(): IpAddress {\r\n        return new IpAddress(this.firstByte, this.secondByte, this.thirdByte, this.fourthByte);\r\n    }\r\n\r\n    setOctet(octet: OctetNumber, value: number) {\r\n        switch (octet) {\r\n            case 1:\r\n                this.firstByte = value;\r\n                break;\r\n            case 2:\r\n                this.secondByte = value;\r\n                break;\r\n            case 3:\r\n                this.thirdByte = value;\r\n                break;\r\n            case 4:\r\n                this.fourthByte = value;\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\nexport class SubnetCommand {\r\n    cidr: IpAddressWithSubnetMask; // TODO: rename to cidr\r\n    constructor(cidr: IpAddressWithSubnetMask) {\r\n        this.cidr = cidr;\r\n    }\r\n    \r\n    toString() {\r\n        return this.cidr.toString();\r\n    }\r\n}\r\n\r\nexport class VpcCommand {\r\n    cidr: IpAddressWithSubnetMask;\r\n    subnetBits: number;\r\n    constructor(cidr: IpAddressWithSubnetMask) {\r\n        this.cidr = cidr;\r\n        this.subnetBits = 3;\r\n    }\r\n\r\n    toString() {\r\n        return this.cidr.toString();\r\n    }\r\n}\r\n","import { IpAddress, IpAddressWithSubnetMask, SubnetCommand, VpcCommand } from './models';\r\n\r\nexport type ParsedIpObject = IpAddress | IpAddressWithSubnetMask;\r\n\r\nexport type ParsingResult = ParsedIpObject[] | \r\n                            SubnetCommand | \r\n                            ParsingError | \r\n                            VpcCommand |\r\n                            null;\r\n\r\nconst CMD_SUBNET = 'subnet';\r\nconst CMD_VPC = 'vpc';\r\n\r\nconst ipAddressParser = {\r\n    parse: function(input: string) : ParsingResult {\r\n\r\n        const result = this.parseCommand(input);\r\n\r\n        const matches = this.getMaches(result.nextInput);\r\n        const correctInputs = matches.filter(m => m.matches != null);\r\n        const incorrectInputs = matches.filter(m => m.matches == null);\r\n        \r\n        if(correctInputs.length == 0)\r\n            return null;\r\n\r\n        if(incorrectInputs.length > 0) {\r\n                return new ParsingError(`Value(s) ${incorrectInputs.map(v => v.input).join(',')} was not recognized as valid ip address or ip address with a subnet mask`);\r\n        }\r\n\r\n        const parsedObjects = matches.map(m => this.parseSingle(m.matches!, m.input));\r\n        const parsingErrors = parsedObjects.filter(p => p instanceof ParsingError);\r\n\r\n        if(parsingErrors.length > 0) {\r\n            return parsingErrors[0] as ParsingError;\r\n        }\r\n\r\n        if(result.command != null) {\r\n            const cmd = \r\n             result.command == CMD_SUBNET \r\n                ? this.createSubnetDefinition(parsedObjects as ParsedIpObject[])\r\n                : this.createVpcDefinition(parsedObjects as ParsedIpObject[]);\r\n            \r\n            return  cmd;\r\n        } \r\n\r\n        return parsedObjects as ParsedIpObject[];\r\n    },\r\n\r\n    parseCommand(input : string) : { command: null | string, nextInput: string } {\r\n\r\n        \r\n\r\n        if(input.startsWith(CMD_SUBNET)) \r\n            return { command: CMD_SUBNET, nextInput: input.substring(CMD_SUBNET.length)};\r\n\r\n        if(input.startsWith(CMD_VPC)) {\r\n            return {command: CMD_VPC, nextInput: input.substring(CMD_VPC.length)};\r\n        }\r\n\r\n        return { command: null, nextInput: input };\r\n    },\r\n\r\n    getMaches(input : string) : { matches: RegExpExecArray | null, input: string }[] {\r\n\r\n        return input.\r\n            replace(/[\\t\\s]+/g, ' ')\r\n                .split(' ')\r\n                .filter(s => s.length>0)\r\n                .map(s => {\r\n                    const ipV4Regex = /^([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})(\\/\\d+)?$/;\r\n                    const matches = ipV4Regex.exec(s);\r\n                    \r\n                    if(matches == null || matches.length === 0)\r\n                        return {matches: null, input: s};\r\n                    \r\n                    return {matches, input: s};\r\n                });\r\n    },\r\n\r\n    parseSingle(matches : RegExpExecArray, input: string) : ParsedIpObject | ParsingError {\r\n        const invalid = (n: number) => n < 0 || n > 255;\r\n    \r\n        const first = parseInt(matches[1]);\r\n        const second = parseInt(matches[2]);\r\n        const third = parseInt(matches[3]);\r\n        const fourth = parseInt(matches[4]);\r\n\r\n        if(invalid(first) || invalid(second) || invalid(third) || invalid(fourth))\r\n            return new ParsingError(`${input} doesn't represent a valid IP address space`);\r\n\r\n        const ipAddress = new IpAddress(first, second, third, fourth);\r\n\r\n        if(matches[5]) {\r\n            const maskPart = matches[5].substr(1);\r\n            const maskBits = parseInt(maskPart);\r\n\r\n            if(maskBits > 32) {\r\n                return new ParsingError(`Subnet mask value in ${input} is out of range`);\r\n            }\r\n\r\n            return new IpAddressWithSubnetMask(ipAddress, maskBits);\r\n        }\r\n\r\n        return ipAddress;\r\n    },\r\n\r\n    createSubnetDefinition(items: ParsedIpObject[]) : SubnetCommand | ParsingError {\r\n        if(items.length != 1)\r\n            return new ParsingError(\"Incorrect network definition\");\r\n        \r\n        const first = items[0];\r\n        if(first instanceof IpAddressWithSubnetMask) {\r\n            return new SubnetCommand(first);\r\n        }\r\n\r\n        return new ParsingError(\"Network definition requires subnet mask\");\r\n    },\r\n\r\n    createVpcDefinition(items: ParsedIpObject[]) : VpcCommand | ParsingError {\r\n\r\n        if(items.length != 1)\r\n            return new ParsingError(\"Incorrect VPC definition\");\r\n        \r\n        const first = items[0];\r\n        if(first instanceof IpAddressWithSubnetMask) {\r\n            return new VpcCommand(first);\r\n        }\r\n\r\n        return new ParsingError(\"VPC definition requires subnet mask\");\r\n    }\r\n}\r\n\r\nexport class ParsingError {\r\n    errorMessage: string;\r\n    constructor(message: string) {\r\n        this.errorMessage = message;\r\n    }\r\n}\r\n\r\nexport default ipAddressParser;","import React from 'react';\r\nimport BinaryStringView from '../../core/components/BinaryString';\r\nimport formatter from '../../core/formatter';\r\nimport { IpAddress } from '../models';\r\n\r\nfunction IpAddressBinaryString({ip}: {ip:IpAddress}) {\r\n\r\n   return <React.Fragment>\r\n        <BinaryStringView binaryString={formatter.emBin(ip.firstByte)} />\r\n                    <span className=\"soft\">.</span>\r\n                    <BinaryStringView binaryString={formatter.emBin(ip.secondByte)} />\r\n                    <span className=\"soft\">.</span>\r\n                    <BinaryStringView binaryString={formatter.emBin(ip.thirdByte)} />\r\n                    <span className=\"soft\">.</span>\r\n                    <BinaryStringView binaryString={formatter.emBin(ip.fourthByte)} />\r\n   </React.Fragment>;\r\n}\r\n\r\nexport default IpAddressBinaryString;","import React, { useState } from 'react';\r\nimport BinaryStringView from '../../core/components/BinaryString';\r\nimport './SubnetView.css';\r\nimport { getNetworkAddress, getBroadCastAddress, createSubnetMaskIp } from '../subnet-utils';\r\nimport { chunkifyString } from '../../core/utils';\r\nimport IpAddressBinaryString from './IpAddressBinaryString';\r\nimport { IpAddress, IpAddressWithSubnetMask, SubnetCommand } from '../models';\r\n\r\nfunction SubnetView(props : {subnet : SubnetCommand}) {\r\n\r\n    const [subnet, setSubnet] = useState(props.subnet);\r\n\r\n    const incrementMask = () => {\r\n        const newInput = new IpAddressWithSubnetMask(subnet.cidr.ipAddress, subnet.cidr.maskBits+1);\r\n        setSubnet(new SubnetCommand(newInput));\r\n    };\r\n\r\n    const decrementMask = () => {\r\n        const newInput = new IpAddressWithSubnetMask(subnet.cidr.ipAddress, subnet.cidr.maskBits-1);\r\n        setSubnet(new SubnetCommand(newInput));\r\n    }\r\n\r\n    return <React.Fragment>\r\n        <table className=\"expression subnet-view\">\r\n            <tbody>\r\n                    <SubnetRow ip={subnet.cidr.ipAddress} descr=\"Address\"/>\r\n                    <SubnetRow ip={getNetworkAddress(subnet.cidr)} descr=\"Network\"/>\r\n                    <SubnetRow ip={createSubnetMaskIp(subnet.cidr)} descr=\"Net Mask\"/>\r\n                    <SubnetRow ip={getBroadCastAddress(subnet.cidr)} descr=\"Broadcast\"/>                  \r\n                    <tr>\r\n                        <td data-test-name=\"label\" className=\"soft\">\r\n                            <span>Network Size</span>\r\n                        </td>\r\n                        <td data-test-name=\"decimal\">\r\n                            {subnet.cidr.getAdressSpaceSize()}\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td data-test-name=\"label\" className=\"soft\">\r\n                            Mask Size\r\n                        </td>\r\n                        <td data-test-name=\"decimal\">\r\n                           \r\n                            <button className=\"btn\" onClick={decrementMask} disabled={subnet.cidr.maskBits === 0} title=\"Decrease mask size\">-</button>\r\n                            <span>{subnet.cidr.maskBits}</span>\r\n                            <button className=\"btn\"onClick={incrementMask} disabled={subnet.cidr.maskBits === 32} title=\"Increase mask size\">+</button>\r\n                        </td>\r\n                    </tr>\r\n            </tbody>\r\n        </table>\r\n        <div>\r\n    </div>\r\n    </React.Fragment>;\r\n}\r\n\r\nfunction SubnetRow(props: { ip: IpAddress, descr: string}) {\r\n\r\n    const {ip, descr} = props;\r\n\r\n    return <tr>\r\n            <td className=\"soft\" data-test-name=\"label\">{descr}</td>\r\n                <td data-test-name=\"decimal\" className=\"ip-address-col\">\r\n                   {ip.toString()}\r\n                </td>\r\n                <td data-test-name=\"bin\">\r\n                    <IpAddressBinaryString ip={ip} />\r\n            </td>\r\n        </tr>;\r\n}\r\n\r\nexport default SubnetView;","import log from 'loglevel';\r\n\r\nexport type AnalyticsEvent = {\r\n    eventCategory: string,\r\n    eventAction: string,\r\n    eventLabel?: string\r\n};\r\n\r\nexport type AnalyticsHandler = (evt: AnalyticsEvent) => boolean;\r\n\r\nfunction sendAnalyticsEvent(evt : AnalyticsEvent) {\r\n    const handler = (window as any).bitwiseCmdAnalyticsHandler;\r\n    if(handler == null) {\r\n        log.debug('ERROR!!!: Analytics event was not sent. Handler not found');\r\n    }\r\n\r\n    const delivered = (handler as AnalyticsHandler)(evt);\r\n    log.debug('Analytics event sent. Delivery response: ' + delivered, evt)\r\n}\r\n\r\nexport {sendAnalyticsEvent};\r\n","import React, { useState } from 'react';\r\nimport BinaryStringView from '../../core/components/BinaryString';\r\nimport './VpcView.css';\r\nimport { getNetworkAddress, getAddressSpaceSize } from '../subnet-utils';\r\nimport IpAddressBinaryString from './IpAddressBinaryString';\r\nimport { IpAddress, IpAddressWithSubnetMask, VpcCommand } from '../models';\r\nimport formatter from '../../core/formatter';\r\nimport Toggle from '../../shell/components/Toggle';\r\nimport { faQuestionCircle } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\n\r\nconst MAX_NON_HOSTS_BITS = 30; // leave two bits for hosts min\r\n\r\nfunction SubnetView(props: { vpc: VpcCommand }) {\r\n\r\n    const [vpc, setVpc] = useState(VpcModel.create(props.vpc));\r\n\r\n    const subnetMaskSize = vpc.cidr.maskBits + vpc.subnetBits;\r\n    const maxSubnets = Math.pow(2, vpc.subnetBits);\r\n    const hostsPerSubnet = getAddressSpaceSize(subnetMaskSize);\r\n    const networkAddress = getNetworkAddress(vpc.cidr);\r\n\r\n    const decrSubnet = () => setVpc(vpc.changeSubnetBits(vpc.subnetBits - 1));\r\n    const incrSubnet = () => setVpc(vpc.changeSubnetBits(vpc.subnetBits + 1));\r\n    const incrVpc = () => setVpc(vpc.changeVpcCidr(new IpAddressWithSubnetMask(vpc.cidr.ipAddress, vpc.cidr.maskBits + 1)));\r\n    const decrVpc = () => setVpc(vpc.changeVpcCidr(new IpAddressWithSubnetMask(vpc.cidr.ipAddress, vpc.cidr.maskBits - 1)));\r\n\r\n    const split = formatter.splitByMasks(networkAddress.toBinaryString(), vpc.cidr.maskBits, subnetMaskSize);\r\n\r\n    return <React.Fragment>\r\n\r\n        <div className=\"expression vpc-view\">\r\n\r\n            <div className=\"address-container\">\r\n                <div>\r\n                    <span>VPC Network Address</span>\r\n                </div>\r\n                <div>\r\n                    <BinaryStringView binaryString={split.vpc} disableHighlight={true} className=\"address-space soft\" />\r\n                    <BinaryStringView binaryString={split.subnet} disableHighlight={true} className=\"address-space subnet-part\" />\r\n                    <BinaryStringView binaryString={split.hosts} disableHighlight={true} className=\"address-space host-part\" />\r\n                    <span className=\"address-space decimal-part\">{networkAddress.toString()}</span>\r\n                    <Toggle text=\"[i]\" isOn={vpc.showLegend} onClick={() => setVpc(vpc.toggleLegend())} title=\"Show/Hide Color Legend\">\r\n                        <FontAwesomeIcon className=\"icon\" icon={faQuestionCircle} size=\"sm\" />\r\n                    </Toggle>\r\n                </div>\r\n                <div style={{\"display\" : vpc.showLegend ? '' : 'none'}}>\r\n                    <p>\r\n                        Color Legend\r\n                    </p>\r\n                    <span className=\"address-space soft\">000</span> - VPC address bits <br/>\r\n                    <span className=\"address-space subnet-part\">000</span> - Bits dedicated for subnets address<br/>\r\n                    <span className=\"address-space host-part\">000</span> - Bits dedicated to host addresses inside each subnet\r\n                </div>\r\n            </div>\r\n\r\n            <table className=\"vpc-details\">\r\n                <tbody>\r\n                    <tr>\r\n                        <td className=\"soft\">\r\n                            VPC CIDR Mask:\r\n                    </td>\r\n                        <td>\r\n                            <button className=\"btn\" onClick={decrVpc} disabled={vpc.cidr.maskBits <= 1} title=\"Decrease vpc address bits\">-</button>\r\n                         /{vpc.cidr.maskBits}\r\n                            <button className=\"btn\" onClick={incrVpc} disabled={subnetMaskSize >= MAX_NON_HOSTS_BITS} title=\"Increse vpc address bits\">+</button>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td className=\"soft\">\r\n                            Subnet CIDR Mask:\r\n                    </td>\r\n                        <td>\r\n                            <button className=\"btn\" onClick={decrSubnet} disabled={vpc.subnetBits <= 1} title=\"Increase subnet bits\">-</button>\r\n                        /{subnetMaskSize}\r\n                            <button className=\"btn\" onClick={incrSubnet} disabled={vpc.cidr.maskBits + vpc.subnetBits >= MAX_NON_HOSTS_BITS} title=\"Increase subnet bits\">+</button>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td className=\"soft\">\r\n                            Max Subnets in VPC:\r\n                    </td>\r\n                        <td>\r\n                            <button className=\"btn\" onClick={decrSubnet} disabled={vpc.subnetBits <= 1} title=\"Decrease subnet bits\">-</button>\r\n                            {maxSubnets}\r\n                            <button className=\"btn\" onClick={incrSubnet} disabled={vpc.cidr.maskBits + vpc.subnetBits >= MAX_NON_HOSTS_BITS} title=\"Increase subnet bits\">+</button>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td className=\"soft\">\r\n                            Max Hosts in VPC:\r\n                    </td>\r\n                        <td>\r\n                            {maxSubnets * hostsPerSubnet}\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td className=\"soft\">\r\n                            Hosts Per Subnet:\r\n                    </td>\r\n                        <td>\r\n                            {hostsPerSubnet}\r\n                        </td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    </React.Fragment>;\r\n}\r\n\r\nfunction Indicator2(props: { ip: IpAddress, descr: string }) {\r\n\r\n    const { ip, descr } = props;\r\n\r\n    return <tr>\r\n        <td className=\"soft\" data-test-name=\"label\">{descr}</td>\r\n        <td data-test-name=\"decimal\" className=\"ip-address-col\">\r\n            {ip.toString()}\r\n        </td>\r\n        <td data-test-name=\"bin\">\r\n            <IpAddressBinaryString ip={ip} />\r\n        </td>\r\n    </tr>;\r\n}\r\n\r\nexport default SubnetView;\r\n\r\nclass VpcModel {\r\n    cidr: IpAddressWithSubnetMask;\r\n    subnetBits: number;\r\n    subnetNum: number;\r\n    showLegend: boolean;\r\n\r\n    constructor(cidr: IpAddressWithSubnetMask, subnetBits: number) {\r\n        this.cidr = cidr;\r\n        this.subnetBits = subnetBits;\r\n        this.subnetNum = 0;\r\n        this.showLegend = false;\r\n    }\r\n\r\n    static create(vpc: VpcCommand) {\r\n        return new VpcModel(vpc.cidr, vpc.subnetBits);\r\n    }\r\n\r\n    clone() : VpcModel {\r\n        return Object.assign(new VpcModel(this.cidr, this.subnetBits), this);\r\n    }\r\n\r\n    changeSubnetBits(n: number) {\r\n        return new VpcModel(this.cidr, n);\r\n    }\r\n\r\n    changeVpcCidr(newCidr: IpAddressWithSubnetMask) {\r\n        return new VpcModel(newCidr, this.subnetBits);\r\n    }\r\n\r\n    toggleLegend() {\r\n        var n = new VpcModel(this.cidr,  this.subnetBits);\r\n        n.showLegend = !this.showLegend;\r\n        return n;\r\n    }\r\n}\r\n","import React from 'react';\r\nimport AppState from '../shell/AppState';\r\nimport { CmdShell, CommandInput, CommandOptions } from '../shell/cmd';\r\nimport ErrorResultView from '../shell/components/ErrorResultView';\r\nimport IpAddressView from './components/IpAddressView';\r\nimport ipAddressParser, {ParsingError, ParsedIpObject} from './ip-parser';\r\nimport { IpAddress, IpAddressWithSubnetMask, SubnetCommand, VpcCommand } from \"./models\";\r\nimport log from 'loglevel';\r\nimport SubnetView from './components/SubnetView';\r\nimport { createSubnetMaskIp } from './subnet-utils';\r\nimport {sendAnalyticsEvent} from '../shell/analytics';\r\nimport TextResultView from '../shell/components/TextResultView';\r\nimport VpcView from './components/VpcView';\r\n\r\nconst networkingAppModule = {\r\n    setup: function(appState: AppState, cmd: CmdShell) {\r\n        \r\n        // Add Ip Address commands\r\n        cmd.command({\r\n            canHandle: (input:string) => ipAddressParser.parse(input) != null,\r\n            handle: function(c: CommandInput) {\r\n                var result = ipAddressParser.parse(c.input);\r\n\r\n                if(result == null)\r\n                    return;\r\n\r\n                if(result instanceof ParsingError) {\r\n                    appState.addCommandResult(c.input, <ErrorResultView errorMessage={result.errorMessage} />);\r\n                    return;\r\n                }\r\n\r\n                if(result instanceof SubnetCommand) {\r\n                    appState.addCommandResult(c.input, <SubnetView subnet={result} />);\r\n                    trackCommand('SubnetCommand', c.options);\r\n                    return;\r\n                }\r\n\r\n                if(result instanceof VpcCommand) {\r\n                    appState.addCommandResult(c.input, <VpcView vpc={result} />);\r\n                    trackCommand('VpcCommand', c.options);\r\n                    return;\r\n                }\r\n\r\n                const ipAddresses : IpAddress[] = [];\r\n                \r\n                (result as ParsedIpObject[]).forEach(r => {\r\n                    if(r instanceof IpAddressWithSubnetMask)\r\n                    {\r\n                        ipAddresses.push(r.ipAddress);\r\n                        ipAddresses.push(createSubnetMaskIp(r));\r\n                    }\r\n                    else if(r instanceof IpAddress) {\r\n                        ipAddresses.push(r);\r\n                    }                    \r\n                });\r\n\r\n                trackCommand(\"IpAddressesInput\", c.options);\r\n            \r\n                appState.addCommandResult(c.input, <IpAddressView ipAddresses={ipAddresses} />);\r\n            }\r\n        });\r\n\r\n        log.debug();\r\n    }\r\n}\r\n\r\nfunction trackCommand(action: string, ops: CommandOptions) {\r\n    if(ops.doNotTrack !== true) {\r\n        sendAnalyticsEvent({\r\n            eventCategory: \"NetworkingCommand\",\r\n            eventAction: action\r\n        });\r\n    }\r\n}\r\n\r\nexport default networkingAppModule;","import NumericOperand from \"./NumericOperand\";\r\nimport { ExpressionInput, ExpressionInputItem } from \"./expression-interfaces\";\r\n\r\nexport default class ListOfNumbersExpression implements ExpressionInput {\r\n    numbers: NumericOperand[];\r\n    expressionString: string;\r\n    maxBitsLength: number;\r\n\r\n    constructor(expressionString: string, numbers: NumericOperand[]) {\r\n        this.expressionString = expressionString;\r\n        this.numbers = numbers;\r\n        this.maxBitsLength = numbers.map(n => n.lengthInBits).reduce((n , c) => n >= c ? n : c, 0);\r\n    }\r\n\r\n    toString() {\r\n        return this.numbers.map(n => n.value.toString()).join(' ');\r\n    }\r\n}","import { ExpressionInput, ExpressionInputItem } from \"./expression-interfaces\";\r\n\r\nexport default class BitwiseOperationExpression implements ExpressionInput {\r\n    \r\n    expressionString: string;\r\n    expressionItems: ExpressionInputItem[];\r\n\r\n    constructor(expressionString: string, expressions: ExpressionInputItem[]) {\r\n        this.expressionString = expressionString;\r\n        this.expressionItems = expressions;\r\n    }\r\n}","import NumericOperand from './NumericOperand';\r\nimport ExpressionOperand from './ExpressionOperand'\r\nimport ListOfNumbersExpression from './ListOfNumbersExpression';\r\nimport BitwiseOperationExpression from './BitwiseOperationExpression';\r\nimport { ExpressionInput, ExpressionInputItem, NumberBase } from './expression-interfaces';\r\n\r\nexport { default as NumericOperand } from './NumericOperand';\r\nexport { default as ExpressionOperand } from './ExpressionOperand';\r\nexport { default as ListOfNumbersExpression } from './ListOfNumbersExpression';\r\nexport { default as BitwiseOperationExpression } from './BitwiseOperationExpression';\r\n\r\ninterface IExpressionParserFactory {\r\n    canCreate: (input: string) => boolean;\r\n    create: (input: string) => ExpressionInput;\r\n};\r\n\r\nclass ExpressionParser {\r\n    factories: IExpressionParserFactory[];\r\n    constructor() {\r\n        this.factories = [];\r\n    };\r\n\r\n    canParse (input: string) : boolean {\r\n        var trimmed = input.replace(/^\\s+|\\s+$/, '');\r\n        var i = this.factories.length-1;\r\n        for(;i>=0;i--) {\r\n            if(this.factories[i].canCreate(trimmed) === true){\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n\r\n    parse (input: string) : ExpressionInput | null {\r\n        var trimmed = input.replace(/^\\s+|\\s+$/, '');\r\n        var i = 0, l = this.factories.length, factory;\r\n\r\n        for(;i<l;i++) {\r\n            factory = this.factories[i];\r\n\r\n            if(factory.canCreate(trimmed) == true){\r\n                return factory.create(trimmed);\r\n            }\r\n        }\r\n\r\n        return null;\r\n    };\r\n    \r\n    parseOperand (input : string) : NumericOperand {\r\n        return NumericOperand.parse(input);\r\n    };\r\n\r\n    createOperand (number : number, base : NumberBase) : NumericOperand {\r\n        return NumericOperand.create(number, base);\r\n    };\r\n\r\n    addFactory (factory: IExpressionParserFactory) {\r\n      this.factories.push(factory);\r\n    }\r\n}\r\n\r\nclass ListOfNumbersExpressionFactory implements IExpressionParserFactory\r\n{\r\n    regex: RegExp;\r\n\r\n    constructor() {\r\n        this.regex = /^(-?(?:\\d+|0x[\\d,a-f]+|0b[0-1])\\s?)+$/;\r\n    }\r\n\r\n    canCreate (input: string): boolean {\r\n        return this.regex.test(input);\r\n    };\r\n\r\n    create (input : string) : ExpressionInput {\r\n        var matches = this.regex.exec(input) as RegExpExecArray;\r\n        var numbers = [] as NumericOperand[];\r\n        var input = matches.input;\r\n\r\n        input.split(' ').forEach((n: string) => {\r\n            if(n.trim().length > 0) {\r\n                numbers.push(NumericOperand.parse(n.trim()));\r\n            }\r\n        });\r\n\r\n        return new ListOfNumbersExpression(input, numbers);\r\n    }\r\n}\r\n\r\nclass BitwiseOperationExpressionFactory implements IExpressionParserFactory {\r\n    fullRegex: RegExp;\r\n    regex: RegExp;\r\n\r\n    constructor() {\r\n        this.fullRegex = /^((<<|>>|>>>|\\||\\&|\\^)?(~?-?([b,x,a-f,0-9]+)))+$/;\r\n        this.regex = /(<<|>>|>>>|\\||\\&|\\^)?(~?-?(?:[b,x,a-f,0-9]+))/g;\r\n    }\r\n\r\n    canCreate (input: string) : boolean {\r\n        this.fullRegex.lastIndex = 0;\r\n        return this.fullRegex.test(this.normalizeString(input));\r\n    };\r\n\r\n    create (input: string) : ExpressionInput {\r\n        var m, operands : ExpressionInputItem[] = [],\r\n            normalizedString = this.normalizeString(input);\r\n\r\n        while ((m = this.regex.exec(normalizedString)) != null) {\r\n            operands.push(this.parseMatch(m));\r\n        }\r\n\r\n        return new BitwiseOperationExpression(normalizedString, operands)\r\n    };\r\n\r\n    parseMatch (m:any): ExpressionInputItem {\r\n        var input = m[0],\r\n            sign = m[1],\r\n            num = m[2];\r\n\r\n        var parsed = null;\r\n        if(num.indexOf('~') == 0) {\r\n            parsed = new ExpressionOperand(num, NumericOperand.parse(num.substring(1)), '~');\r\n        }\r\n        else {\r\n            parsed = NumericOperand.parse(num);\r\n        }\r\n\r\n        if(sign == null) {\r\n            return parsed as ExpressionOperand;\r\n        } else {\r\n            return new ExpressionOperand(input, parsed as NumericOperand, sign);\r\n        }\r\n    };\r\n\r\n    normalizeString (input : string): string {\r\n        return input.replace(/\\s+/g,'');\r\n    };\r\n}\r\n\r\nvar parser = new ExpressionParser();\r\nparser.addFactory(new ListOfNumbersExpressionFactory());\r\nparser.addFactory(new BitwiseOperationExpressionFactory());\r\n\r\nexport {parser};\r\n","import { NumericOperand, ListOfNumbersExpression, BitwiseOperationExpression, ExpressionOperand } from '../expression';\r\nimport { ExpressionInputItem, ExpressionInput } from '../expression-interfaces';\r\n\r\ntype Config = {\r\n    emphasizeBytes: boolean;\r\n    allowFlipBits: boolean;\r\n}\r\n\r\ntype ExpressionItemModel = {\r\n    sign: string;\r\n    css: string;\r\n    expressionItem: ExpressionInputItem;\r\n    allowFlipBits: boolean;\r\n    label: string;\r\n}\r\n\r\nexport default class BitwiseExpressionViewModel {\r\n\r\n    emphasizeBytes: boolean;\r\n    items: ExpressionItemModel[];\r\n    maxNumberOfBits: number;\r\n    allowFlipBits: boolean;\r\n\r\n    constructor({ emphasizeBytes = false, allowFlipBits = false} : Config) {\r\n        this.emphasizeBytes = emphasizeBytes;\r\n        this.items = [];\r\n        this.maxNumberOfBits = 0;\r\n        this.allowFlipBits = allowFlipBits === true;\r\n    }\r\n\r\n    static buildListOfNumbers(expr : ListOfNumbersExpression, config : Config) {\r\n        var model = new BitwiseExpressionViewModel(config);\r\n        expr.numbers.forEach(op => model.addOperandRow(op));\r\n        model.maxNumberOfBits = BitwiseExpressionViewModel.getNumberOfBits(model.maxNumberOfBits, model.emphasizeBytes);\r\n        return model;\r\n    }\r\n\r\n    static buildMultiple (expr : BitwiseOperationExpression, config : Config) {\r\n\r\n        var op = expr.expressionItems[0],\r\n            i = 0, len = expr.expressionItems.length,\r\n            ex, m = new BitwiseExpressionViewModel(config);\r\n\r\n        var prev : NumericOperand | null = null;\r\n\r\n        for (;i<len;i++) {\r\n            ex = expr.expressionItems[i];\r\n            if(ex instanceof NumericOperand) {\r\n                m.addOperandRow(ex);\r\n                prev = ex;\r\n                continue;\r\n            }\r\n\r\n            var eo = ex as ExpressionOperand;\r\n\r\n            // If it a single NOT expression\r\n            if(eo.isNotExpression) {\r\n                m.addExpressionOperandRow(eo);\r\n                var notResult = eo.evaluate();\r\n                m.addExpressionResultRow(notResult);\r\n                prev = notResult;\r\n            }\r\n            else if(eo.isShiftExpression){\r\n                prev = eo.evaluate(prev as NumericOperand);\r\n                m.addShiftExpressionResultRow(eo, prev);\r\n            } else {\r\n\r\n                prev = eo.evaluate(prev as NumericOperand);\r\n                m.addExpressionOperandRow(eo);\r\n                m.addExpressionResultRow(prev);\r\n            }\r\n        }\r\n\r\n        m.maxNumberOfBits = BitwiseExpressionViewModel.getNumberOfBits(m.maxNumberOfBits, m.emphasizeBytes);\r\n        return m;\r\n    };\r\n\r\n    static buildNot (expression: ExpressionOperand, config : Config) {\r\n        \r\n        var m = new BitwiseExpressionViewModel(config);\r\n        m.addExpressionOperandRow(expression);\r\n        m.addExpressionResultRow(expression.evaluate());\r\n        m.maxNumberOfBits = BitwiseExpressionViewModel.getNumberOfBits(m.maxNumberOfBits, m.emphasizeBytes);\r\n        return m;\r\n    };\r\n\r\n    addOperandRow(operand: NumericOperand) {\r\n        this.maxNumberOfBits = Math.max(operand.getLengthInBits(), this.maxNumberOfBits);\r\n        this.items.push({ \r\n            sign:'', \r\n            css: '',\r\n            expressionItem: operand,\r\n            allowFlipBits: this.allowFlipBits,\r\n            label: ''\r\n        });\r\n    };\r\n\r\n    addExpressionOperandRow(expression: ExpressionOperand) {\r\n        const resultNumber = expression.isNotExpression ? expression.evaluate() : expression.getUnderlyingOperand();\r\n        this.maxNumberOfBits = Math.max(resultNumber.getLengthInBits(), this.maxNumberOfBits);\r\n        \r\n        this.items.push({ \r\n            sign: expression.sign, \r\n            css: '',\r\n            label: this.getLabel(resultNumber),\r\n            expressionItem: expression.operand,\r\n            allowFlipBits: this.allowFlipBits\r\n        });\r\n    };\r\n\r\n    addShiftExpressionResultRow(expression : ExpressionOperand, resultOperand : NumericOperand) {\r\n        this.maxNumberOfBits = Math.max(resultOperand.getLengthInBits(), this.maxNumberOfBits);\r\n        this.items.push({\r\n            sign: expression.sign + expression.operand.toString(),\r\n            css: 'expression-result',\r\n            expressionItem: resultOperand,\r\n            allowFlipBits: false,\r\n            label: ''\r\n        });\r\n    };\r\n\r\n    addExpressionResultRow(operand : NumericOperand) {\r\n        this.maxNumberOfBits = Math.max(operand.getLengthInBits(), this.maxNumberOfBits);\r\n        this.items.push({ \r\n            sign:'=', \r\n            css: 'expression-result',\r\n            expressionItem: operand, \r\n            allowFlipBits: false,\r\n            label: '',\r\n        });\r\n    };\r\n\r\n    getLabel (op: NumericOperand) : string {\r\n        \r\n        if(op.base == 'bin') {\r\n            return op.toString(\"dec\");\r\n        }\r\n\r\n        return op.toString();\r\n    }\r\n\r\n    // TODO: move this method elsewhere. It is also used in LisOfNumbersExpressionView.js\r\n    static getNumberOfBits = function (bits : number, emphasizeBytes : boolean) : number {\r\n        if(emphasizeBytes && bits % 8 != 0) {\r\n             if(bits < 8) {\r\n                 return 8;\r\n             }\r\n\r\n             var n = bits - (bits % 8);\r\n             return n + 8;\r\n        }\r\n\r\n        return bits;\r\n    };\r\n\r\n    static createModel(expr : ExpressionInput, emphasizeBytes: boolean) : BitwiseExpressionViewModel {\r\n        if(expr instanceof ListOfNumbersExpression) {\r\n            return BitwiseExpressionViewModel.buildListOfNumbers(expr, { \r\n                emphasizeBytes: emphasizeBytes, \r\n                allowFlipBits: true \r\n            });\r\n        }\r\n\r\n        if(expr instanceof BitwiseOperationExpression) {\r\n            return BitwiseExpressionViewModel.buildMultiple(expr, { \r\n                emphasizeBytes: emphasizeBytes,\r\n                allowFlipBits: false \r\n            });\r\n        }\r\n\r\n        throw new Error(\"Cannot build BitwiseExpressionViewModel out of expression \" + expr);\r\n    }\r\n}","import React from 'react';\r\nimport formatter from '../../core/formatter';\r\nimport BinaryStringView, { FlipBitEventArg } from '../../core/components/BinaryString';\r\nimport BitwiseExpressionViewModel from './BitwiseExpressionModel';\r\nimport { ExpressionInput, ExpressionInputItem } from '../expression-interfaces';\r\nimport { ExpressionOperand, NumericOperand } from '../expression';\r\n\r\ntype BitwiseOperationExpressionViewProps = {\r\n    expression: ExpressionInput;\r\n    emphasizeBytes: boolean;\r\n}\r\n\r\ntype BitwiseOperationExpressionViewState = {\r\n\r\n}\r\n\r\nexport default class BitwiseOperationExpressionView extends React.Component<BitwiseOperationExpressionViewProps, BitwiseOperationExpressionViewState>  {\r\n    constructor(props: BitwiseOperationExpressionViewProps) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n    render() {\r\n        var rows = this.getRows();\r\n        if(!rows) {\r\n            return null;\r\n        }\r\n\r\n        return <table className=\"expression\">\r\n                    <tbody>\r\n                            {rows}\r\n                    </tbody>\r\n                </table>\r\n    }\r\n\r\n    getRows() : JSX.Element[] | null {\r\n        var model = BitwiseExpressionViewModel.createModel(this.props.expression, this.props.emphasizeBytes);\r\n\r\n        return model.items.map((itm, i) => \r\n            <ExpressionRow \r\n                key={i} \r\n                sign={itm.sign}\r\n                css={itm.css}\r\n                allowFlipBits={itm.allowFlipBits}\r\n                expressionItem={itm.expressionItem}\r\n                emphasizeBytes={this.props.emphasizeBytes} \r\n                maxNumberOfBits={model.maxNumberOfBits} \r\n                onBitFlipped={() => this.onBitFlipped()} />);\r\n    }\r\n\r\n    onBitFlipped() {\r\n        this.forceUpdate();\r\n        //this.setState({d:new Date()});\r\n    }\r\n}\r\n\r\ntype ExpressionRowProps = {\r\n    sign: string, \r\n    css: string, \r\n    maxNumberOfBits: number, \r\n    emphasizeBytes: boolean, \r\n    allowFlipBits: boolean, \r\n    expressionItem: ExpressionInputItem,\r\n    onBitFlipped: any\r\n}\r\n\r\nclass ExpressionRow extends React.Component<ExpressionRowProps> {\r\n    constructor(props: ExpressionRowProps) {\r\n       super(props);\r\n       this.state = { operand: null };\r\n   }\r\n    render() {\r\n        const { sign, css, maxNumberOfBits, emphasizeBytes, allowFlipBits } = this.props;\r\n        \r\n        return <tr className={css}>\r\n                    <td className=\"sign\">{sign}</td>\r\n                    <td className=\"label\">{this.getLabel()}</td>\r\n                    <td className=\"bin\">\r\n                        <BinaryStringView\r\n                            emphasizeBytes={emphasizeBytes} \r\n                            binaryString={formatter.padLeft(this.getBinaryString(), maxNumberOfBits, '0')} \r\n                            allowFlipBits={allowFlipBits} \r\n                            onFlipBit={args => this.flipBit(args)}/>\r\n                    </td>\r\n                    <td className=\"other\">{this.getOther()}</td>\r\n                </tr>;;\r\n    }\r\n\r\n    getBinaryString() : string {            \r\n        return this.props.expressionItem.evaluate().toBinaryString();\r\n    }\r\n\r\n    getLabel(): string {\r\n\r\n        // For expressions like |~2 \r\n        // TODO: find a better way...\r\n        if(this.props.expressionItem.isExpression) {\r\n            const ex = this.props.expressionItem as ExpressionOperand;\r\n            return ex.sign + this.getLabelString(ex.getUnderlyingOperand());\r\n        }\r\n\r\n        return this.getLabelString(this.props.expressionItem.getUnderlyingOperand());         \r\n    }\r\n\r\n    getOther() {\r\n\r\n        if(this.props.expressionItem.isExpression) {\r\n            const ex = this.props.expressionItem as ExpressionOperand;\r\n            const op = ex.evaluate();\r\n\r\n            return op.toString();\r\n        }\r\n\r\n        return this.props.expressionItem.evaluate().toOtherKindString();\r\n    }\r\n\r\n    getLabelString (op: NumericOperand) : string {\r\n        return op.toString(op.base == 'bin' ? 'dec' : op.base);\r\n    }\r\n\r\n     flipBit(args: FlipBitEventArg) {    \r\n\r\n        const op  = this.props.expressionItem.getUnderlyingOperand();\r\n        const { index, binaryString } = args;\r\n\r\n        var arr = binaryString.split('');\r\n        arr[index] = arr[index] == '0' ? '1' : '0';\r\n        var bin = arr.join('');\r\n\r\n        var newValue = parseInt(bin, 2);\r\n        op.setValue(newValue);\r\n\r\n        this.props.onBitFlipped();\r\n    }\r\n}","import React from 'react';\r\nimport AppState from '../shell/AppState';\r\nimport { CmdShell, CommandInput } from '../shell/cmd';\r\nimport BitwiseOperationExpressionView from './components/BitwiseOperationExpressionView';\r\nimport {parser} from './expression';\r\n\r\nconst expressionAppModule = {\r\n    setup: function(appState: AppState, cmd: CmdShell) {\r\n        \r\n          // Bitwise Expressions\r\n          cmd.command({\r\n            canHandle: (input:string) => parser.canParse(input),\r\n            handle: function(c: CommandInput) {\r\n                var expr = parser.parse(c.input);\r\n                appState.addCommandResult(c.input, <BitwiseOperationExpressionView expression={expr!} emphasizeBytes={appState.emphasizeBytes} />);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport default expressionAppModule;","import React from 'react'\r\n\r\nfunction AboutResultView() {\r\n\r\n        return   <div className=\"aboutTpl\" data-result-type=\"help\">\r\n                        <p> Created by <a href=\"http://boryslevytskyi.github.io/\">Borys Levytskyi</a>. Please give it a like if BitwiseCmd has helped you in your work.</p>\r\n                        <p>If you have an idea, suggestion or you've spotted a bug here, please send it to <a href=\"mailto:&#098;&#105;&#116;&#119;&#105;&#115;&#101;&#099;&#109;&#100;&#064;&#103;&#109;&#097;&#105;&#108;&#046;&#099;&#111;&#109;?subject=Feedback\">&#098;&#105;&#116;&#119;&#105;&#115;&#101;&#099;&#109;&#100;&#064;&#103;&#109;&#097;&#105;&#108;&#046;&#099;&#111;&#109;</a> or tweet on <a href=\"http://twitter.com/BitwiseCmd\">@BitwiseCmd</a>. Your feedback is greatly appreciated.</p>\r\n                        <p><a href=\"https://github.com/BorisLevitskiy/BitwiseCmd\">Project on <strong>GitHub</strong></a></p>\r\n                    </div>;\r\n};\r\n\r\nexport default AboutResultView;","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { useState} from 'react';\r\nimport { faClipboard} from \"@fortawesome/free-solid-svg-icons\";\r\nimport \"./DonateResultView.css\";\r\nimport { sendAnalyticsEvent } from '../analytics';\r\n\r\nfunction DonateResultView() {\r\n\r\n    const copyCss = navigator.clipboard != null ? \"\" : \"hidden\";\r\n    const [state, setState] = useState('default');\r\n    const copiedCss = state == \"copied\" ? \"\" : \"hidden\";\r\n\r\n    const addr = \"1HR3PCeBsv5BFijqqfCh4AY9UturmjfmQA\";\r\n\r\n    return <div className=\"donate-result-view\">\r\n        <p>Thank you for your interest in donation. At this point BitwiseCmd can only accept Bitcoin donations.</p>\r\n        <p>\r\n            <span>BTC Address:</span> <strong>{addr}</strong> <button onClick={() => copy()} title=\"Copy this address into the Cliboard\" className={`copy-button ${copyCss}`}><FontAwesomeIcon icon={faClipboard} size=\"lg\" />Copy</button> <span className={`soft ${copiedCss}`}>copied</span>\r\n        </p>\r\n        <p className=\"qrcode-container\">\r\n            <svg shape-rendering=\"crispEdges\" height=\"200\" width=\"200\" viewBox=\"0 0 29 29\" className=\"qrcode\">\r\n                <path fill=\"#FFFFFF\" d=\"M0,0 h29v29H0z\"></path>\r\n                <path fill=\"#000000\" d=\"M0 0h7v1H0zM10 0h1v1H10zM12 0h2v1H12zM16 0h5v1H16zM22,0 h7v1H22zM0 1h1v1H0zM6 1h1v1H6zM8 1h1v1H8zM10 1h1v1H10zM14 1h2v1H14zM17 1h2v1H17zM20 1h1v1H20zM22 1h1v1H22zM28,1 h1v1H28zM0 2h1v1H0zM2 2h3v1H2zM6 2h1v1H6zM12 2h1v1H12zM14 2h1v1H14zM18 2h1v1H18zM22 2h1v1H22zM24 2h3v1H24zM28,2 h1v1H28zM0 3h1v1H0zM2 3h3v1H2zM6 3h1v1H6zM8 3h3v1H8zM12 3h6v1H12zM19 3h1v1H19zM22 3h1v1H22zM24 3h3v1H24zM28,3 h1v1H28zM0 4h1v1H0zM2 4h3v1H2zM6 4h1v1H6zM9 4h1v1H9zM13 4h1v1H13zM16 4h1v1H16zM19 4h2v1H19zM22 4h1v1H22zM24 4h3v1H24zM28,4 h1v1H28zM0 5h1v1H0zM6 5h1v1H6zM8 5h2v1H8zM11 5h3v1H11zM15 5h2v1H15zM18 5h1v1H18zM22 5h1v1H22zM28,5 h1v1H28zM0 6h7v1H0zM8 6h1v1H8zM10 6h1v1H10zM12 6h1v1H12zM14 6h1v1H14zM16 6h1v1H16zM18 6h1v1H18zM20 6h1v1H20zM22,6 h7v1H22zM9 7h3v1H9zM15 7h2v1H15zM19 7h2v1H19zM0 8h5v1H0zM6 8h4v1H6zM11 8h1v1H11zM13 8h5v1H13zM21 8h1v1H21zM23 8h1v1H23zM25 8h1v1H25zM27 8h1v1H27zM2 9h1v1H2zM5 9h1v1H5zM7 9h1v1H7zM10 9h1v1H10zM12 9h1v1H12zM16 9h1v1H16zM20 9h1v1H20zM23 9h2v1H23zM27,9 h2v1H27zM0 10h1v1H0zM4 10h1v1H4zM6 10h1v1H6zM8 10h1v1H8zM10 10h1v1H10zM13 10h3v1H13zM18 10h1v1H18zM21 10h1v1H21zM23 10h1v1H23zM25 10h2v1H25zM0 11h3v1H0zM5 11h1v1H5zM7 11h2v1H7zM12 11h1v1H12zM15 11h2v1H15zM19 11h1v1H19zM21 11h1v1H21zM24 11h2v1H24zM27 11h1v1H27zM3 12h1v1H3zM6 12h1v1H6zM9 12h2v1H9zM12 12h6v1H12zM23 12h1v1H23zM26 12h1v1H26zM0 13h1v1H0zM2 13h2v1H2zM5 13h1v1H5zM7 13h1v1H7zM13 13h1v1H13zM16 13h1v1H16zM18 13h1v1H18zM20 13h2v1H20zM24 13h3v1H24zM28,13 h1v1H28zM1 14h1v1H1zM3 14h2v1H3zM6 14h1v1H6zM9 14h4v1H9zM14 14h4v1H14zM20 14h2v1H20zM25 14h2v1H25zM0 15h3v1H0zM4 15h2v1H4zM7 15h1v1H7zM11 15h1v1H11zM14 15h3v1H14zM18 15h1v1H18zM20 15h1v1H20zM22 15h1v1H22zM24 15h2v1H24zM5 16h2v1H5zM8 16h1v1H8zM11 16h1v1H11zM14 16h3v1H14zM20 16h1v1H20zM23 16h2v1H23zM26,16 h3v1H26zM0 17h1v1H0zM3 17h1v1H3zM5 17h1v1H5zM7 17h1v1H7zM12 17h1v1H12zM14 17h3v1H14zM18 17h2v1H18zM21 17h4v1H21zM26,17 h3v1H26zM0 18h1v1H0zM6 18h3v1H6zM10 18h1v1H10zM15 18h4v1H15zM24 18h2v1H24zM0 19h1v1H0zM2 19h1v1H2zM4 19h1v1H4zM8 19h3v1H8zM12 19h1v1H12zM14 19h2v1H14zM19 19h2v1H19zM25 19h1v1H25zM27,19 h2v1H27zM0 20h1v1H0zM4 20h1v1H4zM6 20h5v1H6zM12 20h1v1H12zM14 20h1v1H14zM16 20h2v1H16zM20 20h5v1H20zM26 20h2v1H26zM8 21h3v1H8zM17 21h4v1H17zM24,21 h5v1H24zM0 22h7v1H0zM8 22h1v1H8zM10 22h3v1H10zM15 22h2v1H15zM18 22h3v1H18zM22 22h1v1H22zM24 22h1v1H24zM26 22h1v1H26zM0 23h1v1H0zM6 23h1v1H6zM9 23h3v1H9zM14 23h2v1H14zM18 23h3v1H18zM24 23h1v1H24zM27,23 h2v1H27zM0 24h1v1H0zM2 24h3v1H2zM6 24h1v1H6zM8 24h1v1H8zM11 24h1v1H11zM16 24h3v1H16zM20,24 h9v1H20zM0 25h1v1H0zM2 25h3v1H2zM6 25h1v1H6zM8 25h1v1H8zM12 25h2v1H12zM15 25h2v1H15zM19 25h2v1H19zM24 25h1v1H24zM26,25 h3v1H26zM0 26h1v1H0zM2 26h3v1H2zM6 26h1v1H6zM8 26h3v1H8zM13 26h4v1H13zM21 26h1v1H21zM23 26h2v1H23zM26 26h2v1H26zM0 27h1v1H0zM6 27h1v1H6zM8 27h2v1H8zM12 27h2v1H12zM15 27h1v1H15zM18 27h4v1H18zM23 27h2v1H23zM27 27h1v1H27zM0 28h7v1H0zM8 28h3v1H8zM12 28h1v1H12zM14 28h2v1H14zM19 28h1v1H19zM21 28h2v1H21zM24 28h3v1H24z\"></path>\r\n            </svg>\r\n        </p>\r\n    </div>\r\n\r\n    function copy() {\r\n        navigator.clipboard.writeText(addr);\r\n        setState('copied');\r\n        setTimeout(() => setState('default'), 3000);\r\n        sendAnalyticsEvent({eventCategory: \"Donation\", eventAction: \"CopyBTCAddressCopyClicked\"})\r\n    }\r\n}\r\n\r\nexport default DonateResultView;","import React from 'react';\r\nimport CommandLink from '../../core/components/CommandLink';\r\nimport './HelpResultView.css';\r\n\r\nfunction HelpResultView() {\r\n    \r\n        return <div className=\"help helpResultTpl\">\r\n                        <div className=\"panel-container\">\r\n                            <div className=\"left-panel\">\r\n                                <div className=\"section\">\r\n                                    <strong className=\"section-title soft\">Bitiwse Calculation Commands</strong>\r\n                                <ul>\r\n                                    <li><code><CommandLink text=\"23 | 34\" /></code> — type bitwise expression to see result in binary (only positive integers are supported now)</li>\r\n                                    <li><code><CommandLink text=\"23 34\" /></code> — type one or more numbers to see their binary representations</li>\r\n                                </ul>\r\n                                </div>\r\n                                <div className=\"section\">\r\n                                    <strong className=\"section-title  soft\">IP Address Commands</strong>\r\n                                <ul>\r\n                                    <li><code><CommandLink text=\"127.0.0.1\" /></code> — enter single or multiple ip addresses (separated by space) to see their binary represenation</li>\r\n                                    <li><code><CommandLink text=\"192.168.0.1/8\" /></code> — subnet mask notiations are support as well</li>\r\n                                    <li><code><CommandLink text=\"subnet 192.168.24.1/14\" /></code> — display information about subnet (network address, broadcast address, etc.)</li>\r\n                                    <li><code><CommandLink text=\"vpc 192.168.24.1/24\" /></code> — see how VPC network address bits are divided between VPC address, Subnets and Hosts</li>\r\n                                </ul>\r\n                                </div>\r\n                                <div className=\"section\">\r\n                                    <strong className=\"section-title  soft\">Color Theme Commands</strong>\r\n                                <ul>\r\n                                    <li><code><CommandLink text=\"light\" /></code> — set Light color theme</li>\r\n                                    <li><code><CommandLink text=\"dark\" /></code> — set Dark color theme</li>\r\n                                    <li><code><CommandLink text=\"midnight\" /></code> — set Midnight color theme</li>\r\n                                </ul>\r\n                                </div>\r\n                                <div className=\"section\">\r\n                                    <strong className=\"section-title  soft\">Other Commands</strong>\r\n                                <ul>\r\n                                    <li><code><CommandLink text=\"clear\" /></code> — clear output pane</li>\r\n                                    <li><code><CommandLink text=\"help\" /></code> — display this help</li>\r\n                                    <li><code><CommandLink text=\"whatsnew\" /></code> — display changelog</li>\r\n                                    <li><code><CommandLink text=\"em\" /></code> — turn On/Off Emphasize Bytes</li>\r\n                                    <li><code><CommandLink text=\"about\" /></code> — about the app</li>\r\n                                    <li><code><CommandLink text=\"guid\" /></code> — generate <a href=\"https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_.28random.29\">v4</a> GUID</li>\r\n                                </ul>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"right-panel\">\r\n                                <div className=\"section\">\r\n                                    <strong className=\"section-title soft\">Supported Bitwise Operations</strong><br/>\r\n                                    <small>\r\n                                        <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators\">\r\n                                            as implemented in JavaScript engine of your browser\r\n                                        </a>\r\n                                    </small>\r\n                                    <ul>\r\n                                        <li><code>&amp;</code> — bitwise AND</li>\r\n                                        <li><code>|</code> — bitwise inclusive OR</li>\r\n                                        <li><code>^</code> — bitwise exclusive XOR</li>\r\n                                        <li><code>~</code> — bitwise NOT</li>\r\n                                        <li><code>&lt;&lt;</code> — left shift</li>\r\n                                        <li><code>&gt;&gt;</code> — sign propagating right shift</li>\r\n                                        <li><code>&gt;&gt;&gt;</code> — zero-fill right shift</li>\r\n                                    </ul>\r\n                                </div>\r\n                                <div className=\"section\">\r\n                                    <strong className=\"section-title  soft\">Tip</strong>\r\n                                    <p>\r\n                                        You can click on bits to flip them in number inputs (e.g. <CommandLink text=\"2 4\" />) or IP addresses (e.g. <CommandLink text=\"192.168.0.0/8\"/>)\r\n                                    </p>\r\n                                </div>\r\n                          </div>\r\n                     </div>\r\n                 </div>;\r\n}\r\n\r\nexport default HelpResultView;\r\n","import React from 'react';\r\n\r\nfunction TextResultView(props : { text: string }) {\r\n    return <p>{props.text}</p>;\r\n}\r\n\r\nexport default TextResultView;","import React from 'react';\r\nimport CommandLink from '../../core/components/CommandLink';\r\nimport './WhatsNewResultView.css';\r\n\r\nfunction WhatsnewResultView() {\r\n    \r\n        return <div className=\"changelog\">\r\n                    <h3>Changelog</h3>\r\n                    <div className=\"item item-new\">\r\n                        <p><span className=\"soft date\">Jul 24th, 2021</span> <br/>\r\n                            <ul>\r\n                                <li>Added support of <code>vpc</code> command to see hpw VPC network address is divided bettwen VPC, Subnets and Hosts. Try it out: <CommandLink text=\"vpc 192.168.24.1/24\" /></li>\r\n                                <li>Added ability to remove individual results</li>\r\n                            </ul>\r\n                        </p>                       \r\n                    </div>\r\n                    <div className=\"item\">\r\n                        <p><span className=\"soft date\">Jun 16th, 2021</span> <br/>\r\n                            Added support of <code>subnet</code> command to display information about subnet ip adress such. Try it out: <CommandLink text=\"subnet 192.168.24.1/14\" />\r\n                        </p>                       \r\n                    </div>\r\n                    <div className=\"item\">\r\n                        <p><span className=\"soft date\">Jun 14th, 2021</span> <br/>\r\n                        Added support of ip addresses and subnet masks notatioans. Try them out: \r\n                        </p>\r\n                        <ul>\r\n                            <li>Single IP address <CommandLink text=\"127.0.0.1\" /></li>\r\n                            <li>Multiple IP addresses and subnet mask notations <CommandLink text=\"127.0.0.1 192.168.0.0/24\" /></li>\r\n                        </ul>\r\n                        \r\n                    </div>\r\n                    <div className=\"item\">\r\n                        <p><span className=\"soft date\">Jun 6th, 2017</span> <br/>\r\n                        Added <code><CommandLink text=\"guid\" /></code> command. Use it for generating v4 GUIDs </p>\r\n                    </div>\r\n                    <div className=\"item\">\r\n                        <p><span className=\"soft date\">May 27th, 2017</span> <br/>\r\n                        Added support of binary number notation (e.g. <code><CommandLink text=\"0b10101\" /></code>). </p>\r\n                    </div>  \r\n                    <div className=\"item\">\r\n                        <p><span className=\"soft\">May 20th, 2017</span> <br/>\r\n                        New <CommandLink text=\"Midnight\" /> theme added. </p>\r\n                    </div>  \r\n                    <div className=\"item\">\r\n                        <p><span className=\"soft\">May 16th, 2017</span> <br/>\r\n                        Complete rewrite using React. Old implementation is available at <a href=\"http://bitwisecmd.com/old\">http://bitwisecmd.com/old</a>. Please let me know if you have problems with this release by <a href=\"https://github.com/BorysLevytskyi/BitwiseCmd/issues\">creating issue</a> in Github Repo.</p>\r\n                    </div>  \r\n              </div>;\r\n}\r\n\r\nexport default WhatsnewResultView;","import log from 'loglevel';\r\n\r\nconst APP_VERSION = 7;\r\n\r\nexport type PersistedAppData = {\r\n    emphasizeBytes: boolean;\r\n    uiTheme: string;\r\n    version: number;\r\n    debugMode: boolean | null;\r\n    pageVisistsCount: number;\r\n    donationClicked: boolean\r\n}\r\n\r\nexport type CommandResultView = {\r\n    key: number,\r\n    input: string,\r\n    view: JSX.Element\r\n};\r\n\r\nexport type AppStateChangeHandler = (state: AppState) => void;\r\n\r\nexport default class AppState {\r\n    \r\n    version: number = APP_VERSION;\r\n    emphasizeBytes: boolean;\r\n    debugMode: boolean = false;\r\n    uiTheme: string;\r\n    changeHandlers: AppStateChangeHandler[];\r\n    commandResults: CommandResultView[];\r\n    persistedVersion: number;\r\n    wasOldVersion: boolean;\r\n    env: string;\r\n    pageVisitsCount: number;\r\n    donationClicked: boolean;\r\n\r\n    constructor(persistData : PersistedAppData, env: string) {\r\n        this.commandResults = [];\r\n        this.changeHandlers = [];\r\n        this.uiTheme = persistData.uiTheme || 'midnight';\r\n        this.env = env;\r\n\r\n        this.emphasizeBytes = persistData.emphasizeBytes || true;\r\n        this.persistedVersion = persistData.version || 0.1;\r\n        this.wasOldVersion = persistData.version != null && this.version > this.persistedVersion;\r\n        this.debugMode = env !== 'prod' || persistData.debugMode === true;\r\n        this.pageVisitsCount = persistData.pageVisistsCount || 0;\r\n        this.donationClicked = persistData.donationClicked;\r\n    }\r\n\r\n    addCommandResult(input : string, view : JSX.Element) {\r\n        const key = generateKey();\r\n        this.commandResults.unshift({key, input, view});\r\n        log.debug(`command result added: ${input}`);\r\n        this.triggerChanged();\r\n    }\r\n\r\n    clearCommandResults() {\r\n        this.commandResults = [];\r\n        this.triggerChanged();\r\n    }\r\n\r\n    removeResult(index: number) {\r\n        if(index < 0 || index >= this.commandResults.length)\r\n            return;\r\n\r\n        this.commandResults.splice(index, 1);\r\n        this.triggerChanged();\r\n    }\r\n\r\n    toggleEmphasizeBytes() {\r\n        this.emphasizeBytes = !this.emphasizeBytes;\r\n        this.triggerChanged();\r\n    }\r\n\r\n    onChange(handler : AppStateChangeHandler) {\r\n        this.changeHandlers.push(handler);\r\n    }\r\n\r\n    triggerChanged() {\r\n        this.changeHandlers.forEach(h => h(this));\r\n    }\r\n\r\n    setUiTheme(theme: string) {\r\n         this.uiTheme = theme;\r\n         this.triggerChanged();\r\n    }\r\n\r\n    toggleDebugMode() {\r\n        this.debugMode = !this.debugMode;\r\n        this.triggerChanged();\r\n    }\r\n\r\n    registerVisit() {\r\n        this.pageVisitsCount++;\r\n        this.triggerChanged();\r\n    }\r\n\r\n    onDonationClicked() : boolean{\r\n        if(this.donationClicked === true) return false;\r\n\r\n        this.donationClicked = true;\r\n        this.triggerChanged();\r\n        return true;\r\n    }\r\n\r\n    getPersistData() : PersistedAppData {\r\n        return {\r\n            emphasizeBytes: this.emphasizeBytes,\r\n            uiTheme: this.uiTheme,\r\n            version: this.version,\r\n            debugMode: this.debugMode,\r\n            pageVisistsCount: this.pageVisitsCount,\r\n            donationClicked: this.donationClicked\r\n        }\r\n    }\r\n};\r\n\r\nfunction generateKey() : number {\r\n    return Math.ceil(Math.random()*10000000) ^ Date.now(); // Because why the hell not...\r\n}","import AppState, { PersistedAppData } from \"./AppState\";\r\n\r\nconst storeKey = 'AppState';\r\n\r\nexport default {\r\n    getPersistedData() : PersistedAppData {\r\n        var json = window.localStorage.getItem(storeKey);\r\n        if(!json) {\r\n            return {} as PersistedAppData;\r\n        }\r\n\r\n        try {\r\n            return JSON.parse(json) as PersistedAppData;\r\n        }\r\n        catch(ex) {\r\n            console.error('Failed to parse AppState json. Json Value: \\n' + json, ex);\r\n            return {} as PersistedAppData;;\r\n        }\r\n    },\r\n\r\n    watch (appState: AppState) {\r\n        appState.onChange(() => this.persistData(appState));\r\n    },\r\n\r\n    persistData(appState: AppState) {\r\n        localStorage.setItem(storeKey, JSON.stringify(appState.getPersistData()));\r\n    }\r\n}","import log from 'loglevel';\r\nimport hash from '../core/hash';\r\nimport AppState from './AppState';\r\nimport { Env } from './interfaces';\r\nimport appStateStore from './appStateStore';\r\nimport CommandLink from '../core/components/CommandLink';\r\n\r\nexport type StartupAppData = {\r\n    appState: AppState,\r\n    startupCommands: string[]\r\n}\r\n\r\nconst STARTUP_COMMAND_KEY = 'StartupCommand';\r\nconst DEFAULT_COMMANDS = ['help', '127.0.0.1 192.168.0.0/8', '1|2&6','4 0b1000000 0x80'];\r\n\r\nfunction bootstrapAppData() : StartupAppData {\r\n    const env = window.location.host === \"bitwisecmd.com\" ? 'prod' : 'stage';\r\n\r\n    setupLogger(env);\r\n\r\n    const appState = createAppState(env);\r\n    const startupCommands = getStartupCommands(appState);\r\n\r\n    return {\r\n        appState,\r\n        startupCommands\r\n    }\r\n}\r\n\r\n\r\nfunction createAppState(env:string) {\r\n    var stateData = appStateStore.getPersistedData();\r\n    const appState = new AppState(stateData, env);\r\n    appStateStore.watch(appState);\r\n    log.debug(\"appState initialized\", appState);\r\n    return appState;\r\n}\r\n\r\nfunction getStartupCommands(appState : AppState) : string[] {\r\n    var hashArgs = hash.getArgs(window.location.hash);\r\n\r\n    var startupCommands = loadStoredCommands();\r\n\r\n    if(startupCommands.length == 0) \r\n        startupCommands = DEFAULT_COMMANDS;\r\n\r\n    if(appState.wasOldVersion) {\r\n        startupCommands = [\"whatsnew\"];\r\n    }\r\n\r\n    if(hashArgs.length > 0) {\r\n        startupCommands = hashArgs;\r\n    }\r\n\r\n    log.debug('Executing startup commands', startupCommands);\r\n\r\n    return startupCommands;\r\n}\r\n\r\nfunction loadStoredCommands() : string[] {\r\n    const json = localStorage.getItem(STARTUP_COMMAND_KEY);\r\n    return json != null ? [json] : []; \r\n}\r\n\r\nfunction setupLogger(env: Env) {\r\n    if(env != 'prod'){\r\n        log.setLevel(\"debug\");\r\n        log.debug(`Log level is set to debug. Env: ${env}`)\r\n    } else {\r\n        log.setLevel(\"warn\");\r\n    }\r\n}\r\n\r\nexport {STARTUP_COMMAND_KEY};\r\nexport default bootstrapAppData;","import React from 'react';\r\nimport uuid from 'uuid';\r\nimport { sendAnalyticsEvent } from './analytics';\r\nimport AppState from './AppState';\r\nimport { CmdShell, CommandInput } from './cmd';\r\nimport AboutResultView from './components/AboutResultView';\r\nimport DonateResultView from './components/DonateResultView';\r\nimport ErrorResultView from './components/ErrorResultView';\r\nimport HelpResultView from './components/HelpResultView';\r\nimport TextResultView from './components/TextResultView';\r\nimport WhatsnewResultView from './components/WhatsNewResultView';\r\nimport {STARTUP_COMMAND_KEY} from './startup';\r\n\r\nconst shellModule = {\r\n    setup: function(appState: AppState, cmd: CmdShell) {\r\n        \r\n        cmd.debugMode = appState.debugMode;\r\n        appState.onChange(() => cmd.debugMode = appState.debugMode);\r\n        \r\n        cmd.command(\"help\", (c: CommandInput) => appState.addCommandResult(c.input, <HelpResultView />));\r\n        cmd.command(\"clear\", () => appState.clearCommandResults());\r\n        cmd.command(\"em\", () => appState.toggleEmphasizeBytes());\r\n        cmd.command(\"dark\", () => appState.setUiTheme('dark'));\r\n        cmd.command(\"light\", () => appState.setUiTheme('light'));\r\n        cmd.command(\"midnight\", () => appState.setUiTheme('midnight'));\r\n        cmd.command(\"about\", (c: CommandInput) => appState.addCommandResult(c.input, <AboutResultView />));\r\n        cmd.command(\"whatsnew\", (c: CommandInput) => appState.addCommandResult(c.input, <WhatsnewResultView />));\r\n        cmd.command(\"guid\", (c: CommandInput) => appState.addCommandResult(c.input, <TextResultView text={uuid()} />));\r\n        cmd.command(\"-notrack\", () => {});\r\n        cmd.command(\"-debug\", (c: CommandInput) => {\r\n            appState.toggleDebugMode();\r\n            appState.addCommandResult(c.input, <TextResultView text={`Debug Mode: ${appState.debugMode}`}/>);\r\n        }); \r\n\r\n        cmd.command(\"donate\", (c:CommandInput) => {\r\n\r\n            if(appState.onDonationClicked()) {\r\n                sendAnalyticsEvent({eventCategory: \"Donation\", eventAction: \"DonateButtonClicked\"})\r\n            }\r\n            else {\r\n                sendAnalyticsEvent({eventCategory: \"Donation\", eventAction: \"DonateButtonClickedAgain\"})\r\n            }\r\n\r\n            appState.addCommandResult(c.input, <DonateResultView />);\r\n        });\r\n\r\n        cmd.command(\"track\", (c:CommandInput) => {\r\n            sendAnalyticsEvent({\r\n                eventCategory: 'General',\r\n                eventAction: 'AnalyticsTest'\r\n            });\r\n        });\r\n\r\n        if(appState.env !== 'prod') {\r\n            \r\n            // Default command for development purposes\r\n            cmd.command({\r\n                canHandle: (s: string) => s.indexOf('default') === 0,\r\n                handle: (s: CommandInput) => {\r\n\r\n                    const executeCommand = (c: string) => {\r\n                        console.log(c);\r\n\r\n                        if(c.length === 0) {\r\n                            return \"Default comand: \" + localStorage.getItem(STARTUP_COMMAND_KEY);\r\n                        }\r\n                        else if(c === 'clear') {\r\n                            localStorage.removeItem(STARTUP_COMMAND_KEY);\r\n                            return \"Default startup command cleared\";\r\n                        }\r\n                        \r\n                        localStorage.setItem(STARTUP_COMMAND_KEY, c);\r\n                        return `Default startup command saved: ${c}`;\r\n                    };\r\n\r\n                    const command = s.input.substring(7).trim();\r\n                    const result = executeCommand(command);\r\n                    appState.addCommandResult(s.input, <TextResultView text={result} />);\r\n                } \r\n            });\r\n        };\r\n\r\n        cmd.onError((input: string, err: Error) => appState.addCommandResult(input, <ErrorResultView errorMessage={err.toString()} />));\r\n    }\r\n}\r\n\r\nexport default shellModule;","import React from 'react';\r\n\r\nfunction UnknownInputResultView(props : {input:string}) {\r\n    \r\n    return <div className=\"result\">\r\n                        <div className=\"error\">¯\\_(ツ)_/¯ Sorry, i don&prime;t know what <strong>{props.input}</strong> is</div>\r\n                </div>;\r\n}\r\n\r\nexport default UnknownInputResultView;\r\n","import cmd, { CommandInput } from './shell/cmd';\r\nimport AppRoot from './shell/components/AppRoot';\r\nimport log from 'loglevel';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport networkingAppModule from './networking/module';\r\nimport expressionAppModule from './expression/module';\r\nimport shellModule from './shell/module';\r\nimport bootstrapAppData from './shell/startup';\r\nimport UnknownInputResultView from './shell/components/UnknownInputResultView';\r\n\r\nconst appData = bootstrapAppData();\r\n\r\ninitializeModules();\r\n\r\nvar root = <AppRoot appState={appData.appState} />;\r\nReactDOM.render(root, document.getElementById('root'));\r\n\r\nexecuteStartupCommands();\r\n\r\nappData.appState.registerVisit();\r\n\r\nlog.debug(\"started\");\r\n\r\nfunction executeStartupCommands() {\r\n    log.debug(\"Executing startup commands\", appData.startupCommands);\r\n    appData.startupCommands.forEach(c => cmd.execute(c, {doNotTrack: true}));\r\n}\r\n\r\nfunction  initializeModules() {\r\n    shellModule.setup(appData.appState, cmd);\r\n    networkingAppModule.setup(appData.appState, cmd);\r\n    expressionAppModule.setup(appData.appState, cmd);\r\n\r\n    // Last command handler reports that input is unknown\r\n    cmd.command({\r\n        canHandle: () => true,\r\n        handle: (c: CommandInput) => appData.appState.addCommandResult(c.input, <UnknownInputResultView input={c.input}/>)\r\n    });\r\n}\r\n\r\n\r\n\r\n"],"sourceRoot":""}