{"version":3,"sources":["expression/numberParser.ts","expression/NumericOperand.ts","expression/ExpressionOperand.ts","core/is.ts","shell/cmd.ts","shell/components/InputBox.tsx","shell/components/DisplayResultView.tsx","shell/components/DebugIndicators.tsx","core/hash.ts","shell/components/TopLinks.tsx","shell/components/Toggle.tsx","shell/components/AppRoot.tsx","shell/components/ErrorResultView.tsx","core/formatter.ts","core/components/BinaryString.tsx","networking/components/IpAddressView.tsx","core/byte.ts","networking/subnet-utils.tsx","networking/models.ts","networking/ip-parser.ts","networking/components/IpAddressBinaryString.tsx","networking/components/SubnetView.tsx","shell/analytics.ts","networking/components/VpcView.tsx","networking/module.tsx","expression/ListOfNumbersExpression.ts","expression/BitwiseOperationExpression.ts","expression/expression.ts","expression/components/BitwiseExpressionModel.ts","expression/components/BitwiseOperationExpressionView.tsx","expression/module.tsx","shell/components/AboutResultView.tsx","core/components/CommandLink.tsx","shell/components/HelpResultView.tsx","shell/components/TextResultView.tsx","shell/components/WhatsNewResultView.tsx","shell/AppState.ts","shell/appStateStore.ts","shell/startup.ts","shell/module.tsx","shell/components/UnknownInputResultView.tsx","index.tsx"],"names":["knownParsers","regex","radix","base","prefix","numberParser","NumberParser","parsers","Object","classCallCheck","this","input","_this","map","p","applyParser","reduce","c","n","m","match","length","parser","rawInput","test","value","parseInt","replace","globalId","NumericOperand","id","lengthInBits","isExpression","getBitLength","Math","floor","log","kind","Error","toBaseString","toString","getOtherBase","num","parsed","parse","hexVal","abs","hex","indexOf","substr","ExpressionOperand","expressionString","operand","sign","_Users_boryslevytskyi_git_BitwiseCmd_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","isShiftExpression","isNotExpression","evaluatedOperand","evaluate","str","create","eval","getUnderlyingOperand","is","obj","Array","DEFUALT_COMMAND_OPTIONS","doNotTrack","shell_cmd","CmdShell","debugMode","handlers","errorHandler","createClass","key","ops","debug","concat","assign","trim","toLowerCase","handler","findHandler","invokeHandler","e","handleError","h","cmd","createHandler","canHandle","handle","push","console","warn","JSON","stringify","arguments","filter","options","cmdResult","err","error","InputBox","props","possibleConstructorReturn","getPrototypeOf","call","history","historyIndex","nameInput","focus","_this2","react_default","a","createElement","type","ref","onKeyUp","onKeyDown","className","placeholder","autoComplete","target","keyCode","commandInput","unshift","onCommandEntered","args","newIndex","preventDefault","React","Component","DisplayResultView","resultKey","appState","title","href","window","location","pathname","inputHash","react_fontawesome_index_es","icon","faHashtag","size","onClick","removeResult","resultIndex","faTrashAlt","children","DebugIndicators","list","state","env","localStorage","getItem","i","substring","hash","encodeHash","encodeURIComponent","decodeHash","hashValue","decodeURIComponent","getArgs","decodedHash","split","s","forEach","onDonate","execute","TopLinks","faDonate","faGithub","faTwitter","faEnvelope","Toggle","elementId","isOn","text","AppRoot","refresh","onChange","setState","commandResults","r","components_DisplayResultView","view","toggleEmphasizeBytes","_this3","uiTheme","components_DebugIndicators","components_TopLinks","InputBox_InputBox","components_Toggle","emphasizeBytes","getResultViews","ErrorResultView","errorMessage","formatter","formatString","getBase","padLeft","symbol","sb","prototype","slice","join","bin","number","emBin","splitByMasks","ipAddrBin","mask1","mask2","res","tmp","mask","b","ch","vpc","subnet","hosts","bind","BinaryStringView","getChildren","index","allowFlipBits","onFlipBit","arr","binaryString","newBinaryString","$event","bits","createBits","splitIntoBytes","bitChars","css","disableHighlight","onBitClick","bytes","splice","IpAddressView","_React$Component","apply","inherits","ipAddresses","ip","firstByte","secondByte","thirdByte","fourthByte","octetNumber","BinaryString_BinaryStringView","onFlippedBit","setOctet","forceUpdate","flipBitsToZero","byte","numberOfBits","pow","flipBitsToOne","createSubnetMaskByte","createSubnetMaskIp","ipm","maskBits","IpAddress","getNetworkAddress","flipSubnetMaskBits","getAddressSpaceSize","maskSize","spaceLengthInBits","flipper","fullByte","flip","ipAddress","IpAddressWithSubnetMask","skipDots","octet","SubnetCommand","cidr","VpcCommand","subnetBits","ipAddressParser","result","parseCommand","matches","getMaches","nextInput","correctInputs","incorrectInputs","ParsingError","v","parsedObjects","parseSingle","parsingErrors","command","createSubnetDefinition","createVpcDefinition","startsWith","exec","invalid","first","second","third","fourth","maskPart","items","message","IpAddressBinaryString","_ref","Fragment","SubnetRow","descr","data-test-name","components_IpAddressBinaryString","SubnetView","_useState","useState","_useState2","slicedToArray","setSubnet","getAdressSpaceSize","newInput","disabled","sendAnalyticsEvent","evt","bitwiseCmdAnalyticsHandler","delivered","MAX_NON_HOSTS_BITS","VpcModel","setVpc","subnetMaskSize","maxSubnets","hostsPerSubnet","networkAddress","decrSubnet","changeSubnetBits","incrSubnet","toBinaryString","showLegend","toggleLegend","faQuestionCircle","style","display","changeVpcCidr","subnetNum","newCidr","trackCommand","action","eventCategory","eventAction","networkingAppModule","setup","addCommandResult","components_ErrorResultView","components_SubnetView","components_VpcView","networking_components_IpAddressView","ListOfNumbersExpression","numbers","maxBitsLength","BitwiseOperationExpression","expressions","expressionItems","ExpressionParser","factories","trimmed","canCreate","factory","l","ListOfNumbersExpressionFactory","BitwiseOperationExpressionFactory","fullRegex","lastIndex","normalizeString","operands","normalizedString","parseMatch","addFactory","BitwiseExpressionViewModel","_ref$emphasizeBytes","_ref$allowFlipBits","maxNumberOfBits","max","getLengthInBits","expressionItem","label","expression","resultNumber","getLabel","resultOperand","op","expr","config","model","addOperandRow","getNumberOfBits","ex","len","prev","eo","addExpressionOperandRow","notResult","addExpressionResultRow","addShiftExpressionResultRow","buildListOfNumbers","buildMultiple","BitwiseOperationExpressionView","rows","getRows","createModel","itm","BitwiseOperationExpressionView_ExpressionRow","onBitFlipped","ExpressionRow","_this4","_this$props","getBinaryString","flipBit","getOther","getLabelString","toOtherKindString","newValue","setValue","expressionAppModule","canParse","BitwiseOperationExpressionView_BitwiseOperationExpressionView","AboutResultView","data-result-type","CommandLink","textClassName","HelpResultView","components_CommandLink","TextResultView","WhatsnewResultView","APP_VERSION","AppState","persistData","version","changeHandlers","persistedVersion","wasOldVersion","pageVisitsCount","donationClicked","pageVisistsCount","ceil","random","Date","now","triggerChanged","theme","appStateStore","getPersistedData","json","watch","setItem","getPersistData","STARTUP_COMMAND_KEY","DEFAULT_COMMANDS","bootstrapAppData","shellModule","components_HelpResultView","clearCommandResults","setUiTheme","components_AboutResultView","components_WhatsNewResultView","components_TextResultView","uuid","toggleDebugMode","onDonationClicked","removeItem","onError","UnknownInputResultView","appData","host","setLevel","setupLogger","stateData","createAppState","startupCommands","hashArgs","loadStoredCommands","getStartupCommands","components_UnknownInputResultView","root","AppRoot_AppRoot","ReactDOM","render","document","getElementById","registerVisit"],"mappings":"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","file":"static/js/main.bfd34435.chunk.js","sourcesContent":["import { NumberBase } from \"./expression-interfaces\";\n\nconst decimalRegex = /^-?\\d+$/;\nconst hexRegex = /^-?0x[0-9,a-f]+$/i;\nconst binRegex = /^-?0b[0-1]+$/i;\nconst operatorRegex = /^<<|>>|<<<|\\&|\\|\\^|~$/;\n\ninterface ParserConfig {\n    regex: RegExp,\n    radix: number,\n    base: NumberBase,\n    prefix: string|RegExp\n}\n\nexport interface ParsedNumber {\n    value: number;\n    base: NumberBase;\n    input: string;\n}\n\nvar knownParsers : ParserConfig[] = [\n    { regex: decimalRegex, radix: 10, base: 'dec', prefix: '^$' },\n    { regex: hexRegex, radix: 16, base: 'hex', prefix:/0x/i },\n    { regex: binRegex, radix: 2, base: 'bin', prefix:/0b/i }];\n\n\nclass NumberParser {\n\n    parsers: ParserConfig[];\n\n    constructor(parsers: ParserConfig[])\n    {\n        this.parsers = parsers;\n    }\n\n    parse (input : string) : ParsedNumber | null {\n        return this.parsers.map(p => this.applyParser(p, input)).reduce((c, n) => c || n);\n    };\n\n    parseOperator (input: string) : string | null {\n        var m = input.match(input);\n        \n        if(m == null || m.length == 0) {\n            return null;\n        }\n\n        return m[0];\n    };\n\n    applyParser(parser : ParserConfig, rawInput: string) : ParsedNumber | null {\n    \n        if(!parser.regex.test(rawInput)) {\n            return null;\n        }\n            \n        var value = parseInt(rawInput.replace(parser.prefix, ''), parser.radix);\n    \n        return  {\n            value: value,\n            base: parser.base,\n            input: rawInput\n        }    \n    }\n}\n\nconst numberParser = new NumberParser(knownParsers);\n\nexport {numberParser};","import {numberParser} from './numberParser';\nimport { ExpressionInputItem, NumberBase } from './expression-interfaces';\n\nvar globalId : number = 1;\n\n// Represents numeric value\nexport default class NumericOperand implements ExpressionInputItem {\n    id: number;\n    value: number;\n    base: NumberBase;\n    lengthInBits: number;\n    isExpression: boolean;\n\n    constructor(value : number, base?: NumberBase) {\n        this.id = globalId++;\n        this.value = value;\n        this.base = base || \"dec\";\n        this.lengthInBits = NumericOperand.getBitLength(this.value);\n        this.isExpression = false;\n    }\n            \n    getLengthInBits() {\n        if(this.value < 0) {\n            return 32;\n        }\n        return Math.floor(Math.log(this.value) / Math.log(2)) + 1;\n    };\n\n    getOtherBase(kind?: NumberBase) : NumberBase {\n        switch(kind || this.base) {\n            case 'dec': \n            case 'bin':\n                return 'hex';\n            case 'hex': return 'dec';\n            default : throw new Error(kind + \" kind doesn't have opposite kind\")\n        }\n    };\n\n    toString(base?: NumberBase) : string {\n        return NumericOperand.toBaseString(this.value, base || this.base);\n    }\n\n    toOtherKindString() : string {\n        return this.toString(this.getOtherBase());\n    }\n\n    toDecimalString() {\n        return this.toString('dec');\n    }\n\n    toHexString() {\n        return this.toString('hex');\n    }\n\n    toBinaryString() : string {\n        return this.toString('bin');\n    }\n\n    setValue(value : number) {\n        this.value = value;\n        this.lengthInBits = NumericOperand.getBitLength(value);\n    }\n\n    evaluate() : NumericOperand {\n        return this;\n    }\n\n    getUnderlyingOperand() : NumericOperand  {\n        return this\n    }\n        \n    static getBitLength(num : number) {\n        return Math.floor(Math.log(num) / Math.log(2)) + 1;\n    }    \n    \n    static getBase(kind : string){\n        switch (kind){\n            case 'bin': return 2;\n            case 'hex': return 16;\n            case 'dec': return 10;\n        }\n    };\n\n    static create(value : number, base? : NumberBase) {\n        return new NumericOperand(value, base || \"dec\");\n    };\n\n    static parse(input: string) : NumericOperand {\n                    \n        var parsed = numberParser.parse(input);\n\n        if(!parsed) {\n            throw new Error(input + \" is not a valid number\");\n        }\n\n        return new NumericOperand(parsed.value, parsed.base);\n    }\n\n    static toBaseString(value : number, base : NumberBase) : string {\n        switch(base) {\n            case 'hex':\n                var hexVal = Math.abs(value).toString(16);\n                return value >= 0 ? '0x' + hexVal : '-0x' + hexVal;\n            case 'bin':\n                return (value>>>0).toString(2);\n            case 'dec':\n                return value.toString(10);\n            default:\n                throw new Error(\"Unexpected kind: \" + base)\n        }\n    };\n\n     static toHexString (hex : string) {\n            return hex.indexOf('-') === 0 ? '-0x' + hex.substr(1) : '0x' + hex;\n     };\n}","import NumericOperand from './NumericOperand';\nimport { ExpressionInputItem } from './expression-interfaces';\n\nexport default class ExpressionOperand implements ExpressionInputItem {\n    expressionString: string;\n    operand: ExpressionInputItem;\n    sign: string;\n    isExpression: boolean;\n    isShiftExpression: boolean;\n    isNotExpression: boolean;\n\n    constructor(expressionString : string, operand : ExpressionInputItem, sign : string) {\n        this.expressionString = expressionString;\n        this.operand = operand;\n        this.sign = sign;\n        this.isExpression = true;\n        this.isShiftExpression = this.sign.indexOf('<') >= 0 || this.sign.indexOf('>')>= 0;\n        this.isNotExpression = this.sign === '~';\n    }\n        \n    evaluate(operand?: NumericOperand) : NumericOperand {\n        if (operand instanceof ExpressionOperand) {\n            throw new Error('value shouldnt be expression'); \n        }\n\n        var evaluatedOperand = this.operand.evaluate();\n\n        var str = '';\n        if(this.sign == '~'){\n            str = '~' + evaluatedOperand.value;\n        } else {\n            if(operand == null)\n            throw new Error(\"Other is required for expression: \" + this.expressionString)\n\n            str = operand.value + this.sign + evaluatedOperand.value;\n        }\n\n        return NumericOperand.create(eval(str), evaluatedOperand.base);\n    }\n\n    getUnderlyingOperand() : NumericOperand {\n        return this.operand.getUnderlyingOperand();\n    }\n\n    toString(): string {\n        return this.sign + this.operand.toString();\n    }\n}","export default {\n    plainObject: function(obj : any) : boolean {\n        return typeof obj == \"object\" && !(obj instanceof Array) && obj instanceof Object;\n    },\n\n    aFunction: function(obj : any) : boolean {\n        return typeof obj == \"function\";\n    },\n\n    string: function(obj : any) : boolean {\n        return typeof obj == \"string\";\n    },\n\n    array: function(obj : any) : boolean  {\n        return obj instanceof Array;\n    },\n\n    number: function(obj : any) : boolean  {\n        return typeof obj == \"number\" && !isNaN(obj)\n    }\n}","import is from '../core/is';\nimport log from 'loglevel';\n\nexport type CommandInput = {\n    input: string;\n    options: CommandOptions\n}\n\nexport type CommandOptions = {\n    doNotTrack: boolean;\n}\n\ntype HandleFunction = (input: CommandInput) => void;\ntype InputErrorHandler = (input:string, error: Error) => void;\n\nconst DEFUALT_COMMAND_OPTIONS : CommandOptions = {\n    doNotTrack: false\n};\n\nexport interface ICommandHandler {\n    canHandle (input:string) : boolean;\n    handle: HandleFunction;\n}\n\nexport class CmdShell {\n    debugMode: boolean;\n    handlers: ICommandHandler[];\n    errorHandler: InputErrorHandler | null; \n    constructor() {\n        this.handlers = [];\n        this.debugMode = false;\n        this.errorHandler = null;\n    };\n\n    execute (rawInput: string, ops?: CommandOptions ) {\n\n        log.debug(`Executing command: ${rawInput}`);\n\n        ops = ops || Object.assign({}, DEFUALT_COMMAND_OPTIONS);\n\n        var input = rawInput.trim().toLowerCase();\n        var handler = this.findHandler(input);\n\n        if(handler != null) {\n            if(this.debugMode) {\n                this.invokeHandler(input, handler, ops);\n            } else {\n                try {\n                    this.invokeHandler(input, handler, ops);\n                } catch (e) {\n                     this.handleError(input, e);\n                }\n            }\n        }\n        else {\n            log.debug(`Handled is not found for command: ${rawInput}`)\n            this.handleError(input, new Error(\"Unsupported expression: \" + input.trim()));\n        }\n    };\n\n    onError(h: InputErrorHandler) {\n        this.errorHandler = h;\n    }\n   \n    command (cmd : string | object, handler? : any) {\n        var h = this.createHandler(cmd, handler);\n        if(h == null){\n            console.warn('unexpected set of arguments: ', JSON.stringify(arguments));\n            return;\n        }\n\n        if(!is.aFunction(h.canHandle)) {\n            console.warn('handler is missing \"canHandle\" function. registration denied.');\n            return;\n        }\n\n        if(!is.aFunction(h.handle)) {\n            console.warn('handler is missing \"handle\" function. registration denied.');\n            return;\n        }\n\n        this.handlers.push(h);\n    };\n\n    createHandler (cmd : string | object, handler : HandleFunction) : ICommandHandler | null {\n        if(is.plainObject(cmd)) {\n            return cmd as ICommandHandler;\n        }\n\n        if(is.string(cmd)) {\n            return { canHandle: function (input) { return input === cmd; }, handle: handler };\n        }\n\n        return null;\n    }\n\n    findHandler (input: string) : ICommandHandler | null {\n        return this.handlers.filter(h => h.canHandle(input))[0];\n    };\n\n    invokeHandler (input : string, handler : ICommandHandler, options: CommandOptions) {\n\n        var cmdResult = handler.handle({ input: input, options });\n        if(cmdResult != null) {\n            log.debug(cmdResult);\n        }\n    };\n\n    handleError (input: string, err: Error) {\n        if(this.debugMode)\n            console.error(input, err);\n\n        if(this.errorHandler != null)\n            this.errorHandler(input, err);\n    }\n}\n\nexport default new CmdShell();","import React from 'react';\nimport log from 'loglevel';\n\nexport interface IInputBoxProps\n{\n    onCommandEntered: (input :string) => void;\n}\n\nexport default class InputBox extends React.Component<IInputBoxProps> {\n    history: string[];\n    historyIndex: number;\n    nameInput:  HTMLInputElement | null;\n\n    constructor(props: IInputBoxProps) {\n        super(props);\n        this.nameInput = null;\n        this.history = [];\n        this.historyIndex = -1;\n    }\n\n    componentDidMount(){\n        if(this.nameInput != null)\n            this.nameInput.focus();\n    }\n\n    render() {\n        return <input id=\"in\" type=\"text\"\n                      ref={(input) => { this.nameInput = input; }} \n                      onKeyUp={e => this.onKeyUp(e)}\n                      onKeyDown={e => this.onKeyDown(e)}\n                      className=\"expressionInput mono\"\n                      placeholder=\"type expression like '1>>2' or 'help' \"\n                      autoComplete=\"off\"/>;\n    }\n\n    onKeyUp(e: any) {\n        var input = e.target;\n        if (e.keyCode != 13 || input.value.trim().length == 0) {\n            return;\n        }\n        \n        var commandInput = input.value;\n        this.history.unshift(commandInput);\n        this.historyIndex = -1;\n\n        input.value = '';        \n        this.props.onCommandEntered(commandInput);\n    }\n\n    onKeyDown(args: any) {\n\n        if(args.keyCode == 38) {\n            var newIndex = this.historyIndex+1;\n\n            if (this.history.length > newIndex) { // up\n                args.target.value = this.history[newIndex];\n                this.historyIndex = newIndex;\n            }\n\n            args.preventDefault();\n            return;\n        }\n\n        if(args.keyCode == 40) {\n            if(this.historyIndex > 0) { // down\n                args.target.value = this.history[--this.historyIndex];\n            }\n\n            args.preventDefault();\n        }\n    }\n}","import { faTrashAlt, faHashtag } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React from 'react';\nimport AppState from '../AppState';\n\n\ntype DisplayResultProps = {\n    appState: AppState,\n    inputHash: string,\n    input: string,\n    resultKey: number,\n    resultIndex: number,\n    onRemove?: (i: number) => void;\n}\n\nconst DisplayResultView: React.FunctionComponent<DisplayResultProps> = (props) => {\n\n        const resultKey : number = props.resultKey;\n        const appState = props.appState;\n\n        return <div className=\"result\">\n                        <div className=\"input mono\">\n                                <span className=\"cur\">\n                                    &gt;</span>{props.input}\n                                    <a className=\"hashLink\" title=\"Link for this expression\" href={window.location.pathname + '#' + props.inputHash}>\n                                        <FontAwesomeIcon className=\"icon\" icon={faHashtag} size=\"xs\" />\n                                    </a>\n                                    <button className=\"hashLink\" title=\"Remove this result\" onClick={() => appState.removeResult(props.resultIndex)}>\n                                        <FontAwesomeIcon className=\"icon\" icon={faTrashAlt} size=\"xs\" />\n                                    </button>\n                            </div>\n                        <div className=\"content\">\n                            {props.children}\n                        </div>\n                    </div>;\n}\n\nexport default DisplayResultView;\n\n","import AppState from \"../AppState\";\nimport React from \"react\";\nimport './DebugIndicators.css';\n\nfunction DebugIndicators(props:  {appState: AppState}) {\n\n    const list = [];\n    const state = props.appState;\n\n    if(props.appState.env != 'prod') {\n        list.push(state.env);\n    }\n\n    if(props.appState.debugMode) {\n        list.push(\"debug\");\n    }\n\n    if(localStorage.getItem('TrackAnalytics') === 'false') {\n        list.push(\"notrack\");\n    }\n\n    if(list.length == 0)\n        return null;\n\n    return <div className=\"debug-indicators\">\n            {list.map(i => <span title={i} key={i}>[{i.substring(0,1)}]&nbsp;</span>)}\n        </div>\n}\n\nexport default DebugIndicators;","export default {\n    encodeHash: function(input:string):string {\n        return encodeURIComponent(input.trim().replace(/\\s/g,','));\n    },\n    decodeHash: function(hashValue:string):string {\n        return decodeURIComponent(hashValue.replace(/^\\#/, '')).replace(/,/g,' ');\n    },\n    getArgs: function (hashValue:string) : string[] {\n\n        var decodedHash = this.decodeHash(hashValue);\n        var args : string[] = [];\n\n        splitHashList(decodedHash).forEach(function(value) {\n            args.push(value);\n        });\n\n        return args;\n    }\n};\n\nfunction splitHashList(str: string) : string[] {\n\n    return str.split('||').filter(s => s.length > 0);\n}","import React from 'react';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport { faEnvelope, faDonate } from \"@fortawesome/free-solid-svg-icons\";\nimport { faTwitter, faGithub} from \"@fortawesome/free-brands-svg-icons\";\nimport './TopLinks.css';\nimport cmd from '../cmd';\n\nfunction TopLinks() {\n\n    return <ul className=\"top-links\">                \n                <li>\n                    <a href='https://www.paypal.com/donate/?hosted_button_id=3GREJYC4T5AJ8' onClick={onDonate} target=\"_blank\">\n                        <FontAwesomeIcon className='icon' icon={faDonate} size=\"lg\" />donate\n                    </a>\n                </li>\n                <li>\n                    <a href=\"https://github.com/BorisLevitskiy/BitwiseCmd\"><FontAwesomeIcon className=\"icon\" icon={faGithub} size=\"lg\" /><span className=\"link-text\">github</span></a>\n                </li>\n                <li>\n                    <a href=\"https://twitter.com/BitwiseCmd\"><FontAwesomeIcon className=\"icon\" icon={faTwitter} size=\"lg\" /><span className=\"link-text\">twitter</span></a>\n                </li>\n                <li>\n                    <a href=\"mailto:&#098;&#105;&#116;&#119;&#105;&#115;&#101;&#099;&#109;&#100;&#064;&#103;&#109;&#097;&#105;&#108;&#046;&#099;&#111;&#109;?subject=Feedback\"><FontAwesomeIcon className=\"icon\" icon={faEnvelope} size=\"lg\" /><span className=\"link-text\">idea or feedback</span></a>\n                </li>\n    </ul>;\n}\n\nconst onDonate = () => {\n    cmd.execute('donate');\n    return true;\n}\n\nexport default TopLinks;","\nimport React from \"react\";\n\nexport type ToggleProps = {\n    text?: string,\n    isOn: boolean,\n    title: string,\n    elementId?: string\n    onClick: () => void\n};\n\nconst Toggle: React.FunctionComponent<ToggleProps> = (props) => {\n\n    return <span id={props.elementId} \n        className={\"indicator \" + getIndicator(props.isOn)} \n        title={props.title} \n        onClick={() => props.onClick()}>\n            { !props.children ? props.text : props.children }\n        </span>\n}\n\nfunction getIndicator(value : boolean) {\n    return value ? 'on' : 'off';\n}\n\nexport default Toggle;","import React from 'react';\nimport InputBox from './InputBox';\nimport DisplayResultView from './DisplayResultView';\nimport AppState, { CommandResultView } from '../AppState';\nimport cmd from '../cmd';\nimport log from 'loglevel';\nimport DebugIndicators from './DebugIndicators';\nimport hash from '../../core/hash';\nimport TopLinks from './TopLinks';\nimport Toggle from './Toggle';\n\n\ntype AppRootProps = {\n    appState: AppState,    \n};\n\ntype AppRootState = {\n    uiTheme: string,\n    emphasizeBytes: boolean,\n    commandResults: CommandResultView[]\n}\n\nexport default class AppRoot extends React.Component<AppRootProps, AppRootState> {\n    \n    componentWillMount() {\n        this.refresh();\n        this.props.appState.onChange(() => this.refresh());\n    }\n\n    refresh() {\n        this.setState(this.props.appState);\n    }\n    \n    getIndicator(value : boolean) {\n        return value ? 'on' : 'off';\n    }\n\n    getResultViews() : JSX.Element[] {\n\n        var results = this.state.commandResults.map((r, i) => \n            <DisplayResultView resultIndex={i} resultKey={r.key} key={r.key} input={r.input} inputHash={hash.encodeHash(r.input)} appState={this.props.appState}>\n                {r.view}\n            </DisplayResultView>);\n        return results;\n    }\n\n    toggleEmphasizeBytes() {\n        this.props.appState.toggleEmphasizeBytes();\n    }\n\n    render() {\n        return <div className={`app-root ${this.state.uiTheme}`}>\n                    <DebugIndicators appState={this.props.appState} />\n                    <div className=\"header\">\n                        <h1>Bitwise<span className=\"header-cmd\">Cmd</span>\n                        </h1>\n                       <TopLinks />\n                    </div>\n\n                    <div className=\"expressionInput-container\">\n                        <InputBox onCommandEntered={(input) => cmd.execute(input)} />\n\n                        <span className=\"configPnl\">\n                            <Toggle elementId=\"emphasizeBytes\" text=\"[em]\" isOn={this.state.emphasizeBytes} onClick={() => this.toggleEmphasizeBytes()} title=\"Toggle Emphasize Bytes\"  />                            \n                        </span>\n                    </div>\n\n                    <div id=\"output\">\n                    {this.getResultViews()}\n                    </div>\n                </div>;\n    }\n}","import React from 'react';\n\nfunction ErrorResultView(props : {errorMessage:string}) {\n    \n    return <div className=\"result\">\n                <div className=\"error\">{props.errorMessage}</div>\n        </div>;\n}\n\nexport default ErrorResultView;\n","const formatter = {\n    formatString: function(num: number, kind: string) : string {\n        return num.toString(getBase(kind || \"bin\"));\n    },\n    padLeft: function (str: string, length: number, symbol: string) : string {\n        var sb = Array.prototype.slice.call(str), symbol = symbol || \"0\";\n\n        if(length == null) {\n            return str;\n        }\n\n        while(length > sb.length) {\n            sb.unshift(symbol);\n        }\n\n        return sb.join('');\n    },\n    bin(number: number) {\n        return this.formatString(number, 'bin');\n    },\n    emBin(number: number) {\n        return this.padLeft(this.bin(number), 8, '0');\n    },\n    \n    splitByMasks(ipAddrBin: string, mask1: number, mask2: number) : {vpc: string, subnet: string, hosts:string} {\n\n        var res = [];\n        var tmp : string[] = [];\n        var mask = 0;\n        var b = mask1;\n\n        ipAddrBin.split('').forEach(ch => {\n            \n            tmp.push(ch);\n\n            if(ch === \".\") {\n                return;\n            }\n\n            mask++;\n\n            if(mask == b) {\n                b = mask2;\n                res.push(tmp.join(''));\n                tmp = [];\n            }\n        });\n\n        if(tmp.length > 0) res.push(tmp.join(''));\n\n        return { vpc: res[0], subnet: res[1], hosts: res[2]};\n    }\n};\n\nfunction getBase(kind:string) : number {\n    switch (kind){\n        case 'bin': return 2;\n        case 'hex': return 16;\n        case 'dec': return 10;\n    }\n\n    throw new Error(\"Unsupported kind: \" + kind);\n}\n\nconst emBin = formatter.emBin.bind(formatter);\nconst padLeft = formatter.padLeft.bind(formatter);\n\nexport {emBin, padLeft}\nexport default formatter;","import React from 'react';\n\nexport type BinaryStringViewProps = {\n    allowFlipBits?: boolean;\n    binaryString: string;\n    onFlipBit?: (input: FlipBitEventArg) => void;\n    emphasizeBytes?: boolean;\n    className?:string;\n    disableHighlight?:boolean\n};\n\nexport type FlipBitEventArg = {\n    index: number;\n    binaryString: string;\n    $event: any;\n    newBinaryString: string\n};\n\nexport default class BinaryStringView extends React.Component<BinaryStringViewProps> {\n    render() {\n        return <span className={this.props.className}>{this.getChildren()}</span>\n    }\n\n    onBitClick(index: number, e : any) {\n        if(!this.props.allowFlipBits || !this.props.onFlipBit) {\n            return;\n        }\n\n        if(!this.props.onFlipBit) {\n            \n        }\n\n        const arr = this.props.binaryString.split('');\n        arr[index] = arr[index] == '0' ? '1' : '0';\n        const newBinaryString = arr.join('');\n\n        this.props.onFlipBit({ index: index, binaryString: this.props.binaryString, $event: e, newBinaryString });        \n    }\n\n    getChildren() {\n        var bits = this.createBits(this.props.binaryString.split(''));\n        \n        if(this.props.emphasizeBytes) {\n            return this.splitIntoBytes(bits);\n        }\n\n        return bits;\n    }\n\n    createBits(bitChars:string[]) : JSX.Element[] {\n        const allowFlipBits = this.props.allowFlipBits || false;\n        const css = allowFlipBits ? ' flipable' : ''\n\n        const disableHighlight = this.props.disableHighlight || false;\n\n        return bitChars.map((c, i) => {\n\n            var className = c == '1' ? `one${css}` : `zero${css}`;\n\n            if(disableHighlight) \n                className = css;\n\n            return <span className={className} key={i} onClick={e => this.onBitClick(i, e)}>{c}</span>\n        });\n    }\n\n    splitIntoBytes(bits: JSX.Element[]) {\n        const bytes = [];\n\n        var key = 0;\n        while(bits.length > 0) {\n            bytes.push(<span key={key++} className=\"byte\">{bits.splice(0, 8)}</span>);\n        }\n        \n        return bytes;\n    }\n}","import React from 'react';\nimport formatter from '../../core/formatter'\nimport BinaryStringView from '../../core/components/BinaryString';\nimport './IpAddressView.css';\nimport { IpAddress, OctetNumber } from '../models';\n\ntype IpAddressViewProps = {\n    ipAddresses: IpAddress[]\n};\n\nexport class IpAddressView extends React.Component<IpAddressViewProps> \n{\n    \n    render() {        \n        return <table className=\"expression\">\n            <tbody>\n                {this.props.ipAddresses.map((ip, i) => <tr key={i}>\n                        <td className=\"label\"><strong>{ip.toString()}</strong></td>\n                        <td className=\"bin\">\n                            {this.bin(ip.firstByte, 1, ip)}<span className=\"soft\">.</span>\n                            {this.bin(ip.secondByte, 2, ip)}<span className=\"soft\">.</span>\n                            {this.bin(ip.thirdByte, 3, ip)}<span className=\"soft\">.</span>\n                            {this.bin(ip.fourthByte, 4, ip)}\n                        </td>\n                    </tr>)}\n            </tbody>\n        </table>;\n    }\n\n    bin(value: number, octetNumber: OctetNumber, ip: IpAddress) {\n        return <BinaryStringView \n            binaryString={fmt(value)} \n            key={octetNumber} \n            emphasizeBytes={false} \n            allowFlipBits={true}\n            className={`octet-${octetNumber}`}\n            onFlipBit={e => this.onFlippedBit(e.newBinaryString, octetNumber, ip)} />;\n    }\n    \n    onFlippedBit(binaryString: string, number: OctetNumber, ip : IpAddress) {\n        ip.setOctet(number, parseInt(binaryString, 2));\n        this.forceUpdate();\n    }\n};\n\nfunction fmt(num: number) : string {\n    return formatter.padLeft(formatter.formatString(num, 'bin'), 8, '0');\n}\n\nexport default IpAddressView;","function flipBitsToZero(byte: number, numberOfBits : number) : number {\n    if(numberOfBits == 0)\n        return byte;\n    \n    const zerouOutMask = Math.pow(2, 8-numberOfBits)-1<<numberOfBits; // E.g. 11111000 for flipping first three bits\n    const result = byte & zerouOutMask; \n\n    return result;\n}\n\n// TODO: continue here to implement getting broadcast address\n\nfunction flipBitsToOne(byte : number, numberOfBits : number) : number {\n    if(numberOfBits == 0) return byte;\n\n    const zerouOutMask = Math.pow(2, numberOfBits)-1; // E.g. 00000111 for flipping first three bits\n    const result = byte | zerouOutMask; \n\n    return result;\n}\n\nfunction createSubnetMaskByte(numberOfBits: number) {\n    return 255<<(8-numberOfBits)&255;;\n}\n\nexport {flipBitsToZero, createSubnetMaskByte, flipBitsToOne};","import { createSubnetMaskByte } from \"../core/byte\";\nimport { flipBitsToOne, flipBitsToZero } from '../core/byte';\nimport { IpAddress, IpAddressWithSubnetMask, NetworkClass } from \"./models\";\n\nfunction createSubnetMaskIp(ipm: IpAddressWithSubnetMask) : IpAddress {\n\n    const mask = createSubnetMaskByte;\n    const maskBits = ipm.maskBits;\n\n    if (maskBits <= 8) {\n        return new IpAddress(mask(maskBits), 0, 0, 0);\n    }\n    else if (maskBits <= 16) {\n        return new IpAddress(255, mask(maskBits - 8), 0, 0);\n    }\n    else if (maskBits <= 24) {\n        return new IpAddress(255, 255, mask(maskBits - 16), 0);\n    }\n    else {\n        return new IpAddress(255, 255, 255, mask(maskBits - 24));\n    }\n}\n\nfunction getNetworkAddress(ipm: IpAddressWithSubnetMask) : IpAddress {\n    return flipSubnetMaskBits(ipm, flipBitsToZero, 0);\n}\n\nfunction getBroadCastAddress(ipm: IpAddressWithSubnetMask) : IpAddress {\n    return flipSubnetMaskBits(ipm, flipBitsToOne, 255);\n}\n\nfunction  getAddressSpaceSize(maskSize: number) {\n    const spaceLengthInBits = 32 - maskSize;\n    return Math.pow(2, spaceLengthInBits) - 2; // 0 - network address, 1 - multicast address\n}\n\nfunction flipSubnetMaskBits(ipm: IpAddressWithSubnetMask, flipper : FlipFunction, fullByte: number) {\n    // Cannot treat ip address as a single number operation because 244 << 24 results in a negative number in JS\n    const flip = (maskBits: number, byte: number) => flipper(byte, 8 - maskBits);\n\n    const ip = ipm.ipAddress;\n    const maskBits = ipm.maskBits;\n\n    if (maskBits <= 8) {\n        return new IpAddress(flip(maskBits, ip.firstByte), fullByte, fullByte, fullByte);\n    }\n    else if (maskBits <= 16) {\n        return new IpAddress(ip.firstByte, flip(maskBits - 8, ip.secondByte), fullByte, fullByte);\n    }\n    else if (maskBits <= 24) {\n        return new IpAddress(ip.firstByte, ip.secondByte, flip(maskBits - 16, ip.thirdByte), fullByte);\n    }\n\n    else\n        return new IpAddress(ip.firstByte, ip.secondByte, ip.thirdByte, flip(maskBits - 24, ip.fourthByte));\n}\n\nfunction getNetworkClass (ipAddress: IpAddress) : NetworkClass {\n    const byte = ipAddress.firstByte;\n\n    const firstBitOne = (byte & 128) === 128;\n    const firstBitZero = (byte & 128) === 0;\n    const secondBitOne = (byte & 64) === 64;\n\n    const thirdBitOne = (byte & 32) === 32;\n    const thirdBitZero = (byte & 32) === 0;\n\n    const forthBitZero = (byte & 16) === 0;\n    const forthBitOne = (byte & 16) === 16;\n\n    // e: 1111\n\n    if(firstBitOne && secondBitOne && thirdBitOne && forthBitOne)\n        return 'e';\n\n    if(firstBitOne && secondBitOne && thirdBitOne && forthBitZero) // Start bits: 1110;\n        return 'd';\n\n    if(firstBitOne && secondBitOne && thirdBitZero) // Start bits: 110;\n        return 'c';\n   \n    return firstBitOne ? 'b' : 'a';\n};\n\n\ntype FlipFunction = (byte: number, numberOfBits: number) => number; \n\nexport {createSubnetMaskIp, getBroadCastAddress, getNetworkAddress, getNetworkClass, getAddressSpaceSize};","import {emBin} from \"../core/formatter\";\nimport { getAddressSpaceSize } from \"./subnet-utils\";\n\nexport type OctetNumber = 1 | 2 | 3 | 4;\nexport type NetworkClass = 'a' | 'b' | 'c' | 'd' | 'e';\n\nexport class IpAddressWithSubnetMask {\n    maskBits: number;\n    ipAddress: IpAddress;\n\n    constructor(ipAddress: IpAddress, maskBits: number) {\n        this.ipAddress = ipAddress;\n        this.maskBits = maskBits;\n    }\n\n    getAdressSpaceSize(): number {\n        return getAddressSpaceSize(this.maskBits);\n    }\n\n    toString() {\n        return `${this.ipAddress.toString()}/${this.maskBits}`;\n    }\n}\n\nexport class IpAddress {\n\n    firstByte: number;\n    secondByte: number;\n    thirdByte: number;\n    fourthByte: number;\n\n    constructor(firstByte: number, secondByte: number, thirdByte: number, fourthByte: number) {\n        this.firstByte = firstByte;\n        this.secondByte = secondByte;\n        this.thirdByte = thirdByte;\n        this.fourthByte = fourthByte;\n    }\n\n    toString(): string {\n        return `${this.firstByte}.${this.secondByte}.${this.thirdByte}.${this.fourthByte}`;\n    }\n\n    toBinaryString(skipDots?: boolean) {\n        \n        if(!skipDots)\n            return `${emBin(this.firstByte)}.${emBin(this.secondByte)}.${emBin(this.thirdByte)}.${emBin(this.fourthByte)}`;\n        else \n            return `${emBin(this.firstByte)}${emBin(this.secondByte)}${emBin(this.thirdByte)}${emBin(this.fourthByte)}`;\n    }\n\n    clone(): IpAddress {\n        return new IpAddress(this.firstByte, this.secondByte, this.thirdByte, this.fourthByte);\n    }\n\n    setOctet(octet: OctetNumber, value: number) {\n        switch (octet) {\n            case 1:\n                this.firstByte = value;\n                break;\n            case 2:\n                this.secondByte = value;\n                break;\n            case 3:\n                this.thirdByte = value;\n                break;\n            case 4:\n                this.fourthByte = value;\n                break;\n        }\n    }\n}\n\nexport class SubnetCommand {\n    cidr: IpAddressWithSubnetMask; // TODO: rename to cidr\n    constructor(cidr: IpAddressWithSubnetMask) {\n        this.cidr = cidr;\n    }\n    \n    toString() {\n        return this.cidr.toString();\n    }\n}\n\nexport class VpcCommand {\n    cidr: IpAddressWithSubnetMask;\n    subnetBits: number;\n    constructor(cidr: IpAddressWithSubnetMask) {\n        this.cidr = cidr;\n        this.subnetBits = 3;\n    }\n\n    toString() {\n        return this.cidr.toString();\n    }\n}\n","import { IpAddress, IpAddressWithSubnetMask, SubnetCommand, VpcCommand } from './models';\n\nexport type ParsedIpObject = IpAddress | IpAddressWithSubnetMask;\n\nexport type ParsingResult = ParsedIpObject[] | \n                            SubnetCommand | \n                            ParsingError | \n                            VpcCommand |\n                            null;\n\nconst CMD_SUBNET = 'subnet';\nconst CMD_VPC = 'vpc';\n\nconst ipAddressParser = {\n    parse: function(input: string) : ParsingResult {\n\n        const result = this.parseCommand(input);\n\n        const matches = this.getMaches(result.nextInput);\n        const correctInputs = matches.filter(m => m.matches != null);\n        const incorrectInputs = matches.filter(m => m.matches == null);\n        \n        if(correctInputs.length == 0)\n            return null;\n\n        if(incorrectInputs.length > 0) {\n                return new ParsingError(`Value(s) ${incorrectInputs.map(v => v.input).join(',')} was not recognized as valid ip address or ip address with a subnet mask`);\n        }\n\n        const parsedObjects = matches.map(m => this.parseSingle(m.matches!, m.input));\n        const parsingErrors = parsedObjects.filter(p => p instanceof ParsingError);\n\n        if(parsingErrors.length > 0) {\n            return parsingErrors[0] as ParsingError;\n        }\n\n        if(result.command != null) {\n            const cmd = \n             result.command == CMD_SUBNET \n                ? this.createSubnetDefinition(parsedObjects as ParsedIpObject[])\n                : this.createVpcDefinition(parsedObjects as ParsedIpObject[]);\n            \n            return  cmd;\n        } \n\n        return parsedObjects as ParsedIpObject[];\n    },\n\n    parseCommand(input : string) : { command: null | string, nextInput: string } {\n\n        \n\n        if(input.startsWith(CMD_SUBNET)) \n            return { command: CMD_SUBNET, nextInput: input.substring(CMD_SUBNET.length)};\n\n        if(input.startsWith(CMD_VPC)) {\n            return {command: CMD_VPC, nextInput: input.substring(CMD_VPC.length)};\n        }\n\n        return { command: null, nextInput: input };\n    },\n\n    getMaches(input : string) : { matches: RegExpExecArray | null, input: string }[] {\n\n        return input.\n            replace(/[\\t\\s]+/g, ' ')\n                .split(' ')\n                .filter(s => s.length>0)\n                .map(s => {\n                    const ipV4Regex = /^([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})(\\/\\d+)?$/;\n                    const matches = ipV4Regex.exec(s);\n                    \n                    if(matches == null || matches.length === 0)\n                        return {matches: null, input: s};\n                    \n                    return {matches, input: s};\n                });\n    },\n\n    parseSingle(matches : RegExpExecArray, input: string) : ParsedIpObject | ParsingError {\n        const invalid = (n: number) => n < 0 || n > 255;\n    \n        const first = parseInt(matches[1]);\n        const second = parseInt(matches[2]);\n        const third = parseInt(matches[3]);\n        const fourth = parseInt(matches[4]);\n\n        if(invalid(first) || invalid(second) || invalid(third) || invalid(fourth))\n            return new ParsingError(`${input} doesn't represent a valid IP address space`);\n\n        const ipAddress = new IpAddress(first, second, third, fourth);\n\n        if(matches[5]) {\n            const maskPart = matches[5].substr(1);\n            const maskBits = parseInt(maskPart);\n\n            if(maskBits > 32) {\n                return new ParsingError(`Subnet mask value in ${input} is out of range`);\n            }\n\n            return new IpAddressWithSubnetMask(ipAddress, maskBits);\n        }\n\n        return ipAddress;\n    },\n\n    createSubnetDefinition(items: ParsedIpObject[]) : SubnetCommand | ParsingError {\n        if(items.length != 1)\n            return new ParsingError(\"Incorrect network definition\");\n        \n        const first = items[0];\n        if(first instanceof IpAddressWithSubnetMask) {\n            return new SubnetCommand(first);\n        }\n\n        return new ParsingError(\"Network definition requires subnet mask\");\n    },\n\n    createVpcDefinition(items: ParsedIpObject[]) : VpcCommand | ParsingError {\n\n        if(items.length != 1)\n            return new ParsingError(\"Incorrect VPC definition\");\n        \n        const first = items[0];\n        if(first instanceof IpAddressWithSubnetMask) {\n            return new VpcCommand(first);\n        }\n\n        return new ParsingError(\"VPC definition requires subnet mask\");\n    }\n}\n\nexport class ParsingError {\n    errorMessage: string;\n    constructor(message: string) {\n        this.errorMessage = message;\n    }\n}\n\nexport default ipAddressParser;","import React from 'react';\nimport BinaryStringView from '../../core/components/BinaryString';\nimport formatter from '../../core/formatter';\nimport { IpAddress } from '../models';\n\nfunction IpAddressBinaryString({ip}: {ip:IpAddress}) {\n\n   return <React.Fragment>\n        <BinaryStringView binaryString={formatter.emBin(ip.firstByte)} />\n                    <span className=\"soft\">.</span>\n                    <BinaryStringView binaryString={formatter.emBin(ip.secondByte)} />\n                    <span className=\"soft\">.</span>\n                    <BinaryStringView binaryString={formatter.emBin(ip.thirdByte)} />\n                    <span className=\"soft\">.</span>\n                    <BinaryStringView binaryString={formatter.emBin(ip.fourthByte)} />\n   </React.Fragment>;\n}\n\nexport default IpAddressBinaryString;","import React, { useState } from 'react';\nimport BinaryStringView from '../../core/components/BinaryString';\nimport './SubnetView.css';\nimport { getNetworkAddress, getBroadCastAddress, createSubnetMaskIp } from '../subnet-utils';\nimport { chunkifyString } from '../../core/utils';\nimport IpAddressBinaryString from './IpAddressBinaryString';\nimport { IpAddress, IpAddressWithSubnetMask, SubnetCommand } from '../models';\n\nfunction SubnetView(props : {subnet : SubnetCommand}) {\n\n    const [subnet, setSubnet] = useState(props.subnet);\n\n    const incrementMask = () => {\n        const newInput = new IpAddressWithSubnetMask(subnet.cidr.ipAddress, subnet.cidr.maskBits+1);\n        setSubnet(new SubnetCommand(newInput));\n    };\n\n    const decrementMask = () => {\n        const newInput = new IpAddressWithSubnetMask(subnet.cidr.ipAddress, subnet.cidr.maskBits-1);\n        setSubnet(new SubnetCommand(newInput));\n    }\n\n    return <React.Fragment>\n        <table className=\"expression subnet-view\">\n            <tbody>\n                    <SubnetRow ip={subnet.cidr.ipAddress} descr=\"Address\"/>\n                    <SubnetRow ip={getNetworkAddress(subnet.cidr)} descr=\"Network\"/>\n                    <SubnetRow ip={createSubnetMaskIp(subnet.cidr)} descr=\"Net Mask\"/>\n                    <SubnetRow ip={getBroadCastAddress(subnet.cidr)} descr=\"Broadcast\"/>                  \n                    <tr>\n                        <td data-test-name=\"label\" className=\"soft\">\n                            <span>Network Size</span>\n                        </td>\n                        <td data-test-name=\"decimal\">\n                            {subnet.cidr.getAdressSpaceSize()}\n                        </td>\n                    </tr>\n                    <tr>\n                        <td data-test-name=\"label\" className=\"soft\">\n                            Mask Size\n                        </td>\n                        <td data-test-name=\"decimal\">\n                           \n                            <button className=\"btn\" onClick={decrementMask} disabled={subnet.cidr.maskBits === 0} title=\"Decrease mask size\">-</button>\n                            <span>{subnet.cidr.maskBits}</span>\n                            <button className=\"btn\"onClick={incrementMask} disabled={subnet.cidr.maskBits === 32} title=\"Increase mask size\">+</button>\n                        </td>\n                    </tr>\n            </tbody>\n        </table>\n        <div>\n    </div>\n    </React.Fragment>;\n}\n\nfunction SubnetRow(props: { ip: IpAddress, descr: string}) {\n\n    const {ip, descr} = props;\n\n    return <tr>\n            <td className=\"soft\" data-test-name=\"label\">{descr}</td>\n                <td data-test-name=\"decimal\" className=\"ip-address-col\">\n                   {ip.toString()}\n                </td>\n                <td data-test-name=\"bin\">\n                    <IpAddressBinaryString ip={ip} />\n            </td>\n        </tr>;\n}\n\nexport default SubnetView;","import log from 'loglevel';\n\nexport type AnalyticsEvent = {\n    eventCategory: string,\n    eventAction: string,\n    eventLabel?: string\n};\n\nexport type AnalyticsHandler = (evt: AnalyticsEvent) => boolean;\n\nfunction sendAnalyticsEvent(evt : AnalyticsEvent) {\n    const handler = (window as any).bitwiseCmdAnalyticsHandler;\n    if(handler == null) {\n        log.debug('ERROR!!!: Analytics event was not sent. Handler not found');\n    }\n\n    const delivered = (handler as AnalyticsHandler)(evt);\n    log.debug('Analytics event sent. Delivery response: ' + delivered, evt)\n}\n\nexport {sendAnalyticsEvent};\n","import React, { useState } from 'react';\nimport BinaryStringView from '../../core/components/BinaryString';\nimport './VpcView.css';\nimport { getNetworkAddress, getAddressSpaceSize } from '../subnet-utils';\nimport IpAddressBinaryString from './IpAddressBinaryString';\nimport { IpAddress, IpAddressWithSubnetMask, VpcCommand } from '../models';\nimport formatter from '../../core/formatter';\nimport Toggle from '../../shell/components/Toggle';\nimport { faQuestionCircle } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\n\nconst MAX_NON_HOSTS_BITS = 30; // leave two bits for hosts min\n\nfunction SubnetView(props: { vpc: VpcCommand }) {\n\n    const [vpc, setVpc] = useState(VpcModel.create(props.vpc));\n\n    const subnetMaskSize = vpc.cidr.maskBits + vpc.subnetBits;\n    const maxSubnets = Math.pow(2, vpc.subnetBits);\n    const hostsPerSubnet = getAddressSpaceSize(subnetMaskSize);\n    const networkAddress = getNetworkAddress(vpc.cidr);\n\n    const decrSubnet = () => setVpc(vpc.changeSubnetBits(vpc.subnetBits - 1));\n    const incrSubnet = () => setVpc(vpc.changeSubnetBits(vpc.subnetBits + 1));\n    const incrVpc = () => setVpc(vpc.changeVpcCidr(new IpAddressWithSubnetMask(vpc.cidr.ipAddress, vpc.cidr.maskBits + 1)));\n    const decrVpc = () => setVpc(vpc.changeVpcCidr(new IpAddressWithSubnetMask(vpc.cidr.ipAddress, vpc.cidr.maskBits - 1)));\n\n    const split = formatter.splitByMasks(networkAddress.toBinaryString(), vpc.cidr.maskBits, subnetMaskSize);\n\n    return <React.Fragment>\n\n        <div className=\"expression vpc-view\">\n\n            <div className=\"address-container\">\n                <div>\n                    <span>VPC Network Address</span>\n                </div>\n                <div>\n                    <BinaryStringView binaryString={split.vpc} disableHighlight={true} className=\"address-space soft\" />\n                    <BinaryStringView binaryString={split.subnet} disableHighlight={true} className=\"address-space subnet-part\" />\n                    <BinaryStringView binaryString={split.hosts} disableHighlight={true} className=\"address-space host-part\" />\n                    <span className=\"address-space decimal-part\">{networkAddress.toString()}</span>\n                    <Toggle text=\"[i]\" isOn={vpc.showLegend} onClick={() => setVpc(vpc.toggleLegend())} title=\"Show/Hide Color Legend\">\n                        <FontAwesomeIcon className=\"icon\" icon={faQuestionCircle} size=\"sm\" />\n                    </Toggle>\n                </div>\n                <div style={{\"display\" : vpc.showLegend ? '' : 'none'}}>\n                    <p>\n                        Color Legend\n                    </p>\n                    <span className=\"address-space soft\">000</span> - VPC address bits <br/>\n                    <span className=\"address-space subnet-part\">000</span> - Bits dedicated for subnets address<br/>\n                    <span className=\"address-space host-part\">000</span> - Bits dedicated to host addresses inside each subnet\n                </div>\n            </div>\n\n            <table className=\"vpc-details\">\n                <tbody>\n                    <tr>\n                        <td className=\"soft\">\n                            VPC CIDR Mask:\n                    </td>\n                        <td>\n                            <button className=\"btn\" onClick={decrVpc} disabled={vpc.cidr.maskBits <= 1} title=\"Decrease vpc address bits\">-</button>\n                         /{vpc.cidr.maskBits}\n                            <button className=\"btn\" onClick={incrVpc} disabled={subnetMaskSize >= MAX_NON_HOSTS_BITS} title=\"Increse vpc address bits\">+</button>\n                        </td>\n                    </tr>\n                    <tr>\n                        <td className=\"soft\">\n                            Subnet CIDR Mask:\n                    </td>\n                        <td>\n                            <button className=\"btn\" onClick={decrSubnet} disabled={vpc.subnetBits <= 1} title=\"Increase subnet bits\">-</button>\n                        /{subnetMaskSize}\n                            <button className=\"btn\" onClick={incrSubnet} disabled={vpc.cidr.maskBits + vpc.subnetBits >= MAX_NON_HOSTS_BITS} title=\"Increase subnet bits\">+</button>\n                        </td>\n                    </tr>\n                    <tr>\n                        <td className=\"soft\">\n                            Max Subnets in VPC:\n                    </td>\n                        <td>\n                            <button className=\"btn\" onClick={decrSubnet} disabled={vpc.subnetBits <= 1} title=\"Decrease subnet bits\">-</button>\n                            {maxSubnets}\n                            <button className=\"btn\" onClick={incrSubnet} disabled={vpc.cidr.maskBits + vpc.subnetBits >= MAX_NON_HOSTS_BITS} title=\"Increase subnet bits\">+</button>\n                        </td>\n                    </tr>\n                    <tr>\n                        <td className=\"soft\">\n                            Max Hosts in VPC:\n                    </td>\n                        <td>\n                            {maxSubnets * hostsPerSubnet}\n                        </td>\n                    </tr>\n                    <tr>\n                        <td className=\"soft\">\n                            Hosts Per Subnet:\n                    </td>\n                        <td>\n                            {hostsPerSubnet}\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    </React.Fragment>;\n}\n\nfunction Indicator2(props: { ip: IpAddress, descr: string }) {\n\n    const { ip, descr } = props;\n\n    return <tr>\n        <td className=\"soft\" data-test-name=\"label\">{descr}</td>\n        <td data-test-name=\"decimal\" className=\"ip-address-col\">\n            {ip.toString()}\n        </td>\n        <td data-test-name=\"bin\">\n            <IpAddressBinaryString ip={ip} />\n        </td>\n    </tr>;\n}\n\nexport default SubnetView;\n\nclass VpcModel {\n    cidr: IpAddressWithSubnetMask;\n    subnetBits: number;\n    subnetNum: number;\n    showLegend: boolean;\n\n    constructor(cidr: IpAddressWithSubnetMask, subnetBits: number) {\n        this.cidr = cidr;\n        this.subnetBits = subnetBits;\n        this.subnetNum = 0;\n        this.showLegend = false;\n    }\n\n    static create(vpc: VpcCommand) {\n        return new VpcModel(vpc.cidr, vpc.subnetBits);\n    }\n\n    clone() : VpcModel {\n        return Object.assign(new VpcModel(this.cidr, this.subnetBits), this);\n    }\n\n    changeSubnetBits(n: number) {\n        return new VpcModel(this.cidr, n);\n    }\n\n    changeVpcCidr(newCidr: IpAddressWithSubnetMask) {\n        return new VpcModel(newCidr, this.subnetBits);\n    }\n\n    toggleLegend() {\n        var n = new VpcModel(this.cidr,  this.subnetBits);\n        n.showLegend = !this.showLegend;\n        return n;\n    }\n}\n","import React from 'react';\nimport AppState from '../shell/AppState';\nimport { CmdShell, CommandInput, CommandOptions } from '../shell/cmd';\nimport ErrorResultView from '../shell/components/ErrorResultView';\nimport IpAddressView from './components/IpAddressView';\nimport ipAddressParser, {ParsingError, ParsedIpObject} from './ip-parser';\nimport { IpAddress, IpAddressWithSubnetMask, SubnetCommand, VpcCommand } from \"./models\";\nimport log from 'loglevel';\nimport SubnetView from './components/SubnetView';\nimport { createSubnetMaskIp } from './subnet-utils';\nimport {sendAnalyticsEvent} from '../shell/analytics';\nimport TextResultView from '../shell/components/TextResultView';\nimport VpcView from './components/VpcView';\n\nconst networkingAppModule = {\n    setup: function(appState: AppState, cmd: CmdShell) {\n        \n        // Add Ip Address commands\n        cmd.command({\n            canHandle: (input:string) => ipAddressParser.parse(input) != null,\n            handle: function(c: CommandInput) {\n                var result = ipAddressParser.parse(c.input);\n\n                if(result == null)\n                    return;\n\n                if(result instanceof ParsingError) {\n                    appState.addCommandResult(c.input, <ErrorResultView errorMessage={result.errorMessage} />);\n                    return;\n                }\n\n                if(result instanceof SubnetCommand) {\n                    appState.addCommandResult(c.input, <SubnetView subnet={result} />);\n                    trackCommand('SubnetCommand', c.options);\n                    return;\n                }\n\n                if(result instanceof VpcCommand) {\n                    appState.addCommandResult(c.input, <VpcView vpc={result} />);\n                    trackCommand('VpcCommand', c.options);\n                    return;\n                }\n\n                const ipAddresses : IpAddress[] = [];\n                \n                (result as ParsedIpObject[]).forEach(r => {\n                    if(r instanceof IpAddressWithSubnetMask)\n                    {\n                        ipAddresses.push(r.ipAddress);\n                        ipAddresses.push(createSubnetMaskIp(r));\n                    }\n                    else if(r instanceof IpAddress) {\n                        ipAddresses.push(r);\n                    }                    \n                });\n\n                trackCommand(\"IpAddressesInput\", c.options);\n            \n                appState.addCommandResult(c.input, <IpAddressView ipAddresses={ipAddresses} />);\n            }\n        });\n\n        log.debug();\n    }\n}\n\nfunction trackCommand(action: string, ops: CommandOptions) {\n    if(ops.doNotTrack !== true) {\n        sendAnalyticsEvent({\n            eventCategory: \"NetworkingCommand\",\n            eventAction: action\n        });\n    }\n}\n\nexport default networkingAppModule;","import NumericOperand from \"./NumericOperand\";\nimport { ExpressionInput, ExpressionInputItem } from \"./expression-interfaces\";\n\nexport default class ListOfNumbersExpression implements ExpressionInput {\n    numbers: NumericOperand[];\n    expressionString: string;\n    maxBitsLength: number;\n\n    constructor(expressionString: string, numbers: NumericOperand[]) {\n        this.expressionString = expressionString;\n        this.numbers = numbers;\n        this.maxBitsLength = numbers.map(n => n.lengthInBits).reduce((n , c) => n >= c ? n : c, 0);\n    }\n\n    toString() {\n        return this.numbers.map(n => n.value.toString()).join(' ');\n    }\n}","import { ExpressionInput, ExpressionInputItem } from \"./expression-interfaces\";\n\nexport default class BitwiseOperationExpression implements ExpressionInput {\n    \n    expressionString: string;\n    expressionItems: ExpressionInputItem[];\n\n    constructor(expressionString: string, expressions: ExpressionInputItem[]) {\n        this.expressionString = expressionString;\n        this.expressionItems = expressions;\n    }\n}","import NumericOperand from './NumericOperand';\nimport ExpressionOperand from './ExpressionOperand'\nimport ListOfNumbersExpression from './ListOfNumbersExpression';\nimport BitwiseOperationExpression from './BitwiseOperationExpression';\nimport { ExpressionInput, ExpressionInputItem, NumberBase } from './expression-interfaces';\n\nexport { default as NumericOperand } from './NumericOperand';\nexport { default as ExpressionOperand } from './ExpressionOperand';\nexport { default as ListOfNumbersExpression } from './ListOfNumbersExpression';\nexport { default as BitwiseOperationExpression } from './BitwiseOperationExpression';\n\ninterface IExpressionParserFactory {\n    canCreate: (input: string) => boolean;\n    create: (input: string) => ExpressionInput;\n};\n\nclass ExpressionParser {\n    factories: IExpressionParserFactory[];\n    constructor() {\n        this.factories = [];\n    };\n\n    canParse (input: string) : boolean {\n        var trimmed = input.replace(/^\\s+|\\s+$/, '');\n        var i = this.factories.length-1;\n        for(;i>=0;i--) {\n            if(this.factories[i].canCreate(trimmed) === true){\n                return true;\n            }\n        }\n        return false;\n    };\n\n    parse (input: string) : ExpressionInput | null {\n        var trimmed = input.replace(/^\\s+|\\s+$/, '');\n        var i = 0, l = this.factories.length, factory;\n\n        for(;i<l;i++) {\n            factory = this.factories[i];\n\n            if(factory.canCreate(trimmed) == true){\n                return factory.create(trimmed);\n            }\n        }\n\n        return null;\n    };\n    \n    parseOperand (input : string) : NumericOperand {\n        return NumericOperand.parse(input);\n    };\n\n    createOperand (number : number, base : NumberBase) : NumericOperand {\n        return NumericOperand.create(number, base);\n    };\n\n    addFactory (factory: IExpressionParserFactory) {\n      this.factories.push(factory);\n    }\n}\n\nclass ListOfNumbersExpressionFactory implements IExpressionParserFactory\n{\n    regex: RegExp;\n\n    constructor() {\n        this.regex = /^(-?(?:\\d+|0x[\\d,a-f]+|0b[0-1])\\s?)+$/;\n    }\n\n    canCreate (input: string): boolean {\n        return this.regex.test(input);\n    };\n\n    create (input : string) : ExpressionInput {\n        var matches = this.regex.exec(input) as RegExpExecArray;\n        var numbers = [] as NumericOperand[];\n        var input = matches.input;\n\n        input.split(' ').forEach((n: string) => {\n            if(n.trim().length > 0) {\n                numbers.push(NumericOperand.parse(n.trim()));\n            }\n        });\n\n        return new ListOfNumbersExpression(input, numbers);\n    }\n}\n\nclass BitwiseOperationExpressionFactory implements IExpressionParserFactory {\n    fullRegex: RegExp;\n    regex: RegExp;\n\n    constructor() {\n        this.fullRegex = /^((<<|>>|>>>|\\||\\&|\\^)?(~?-?([b,x,a-f,0-9]+)))+$/;\n        this.regex = /(<<|>>|>>>|\\||\\&|\\^)?(~?-?(?:[b,x,a-f,0-9]+))/g;\n    }\n\n    canCreate (input: string) : boolean {\n        this.fullRegex.lastIndex = 0;\n        return this.fullRegex.test(this.normalizeString(input));\n    };\n\n    create (input: string) : ExpressionInput {\n        var m, operands : ExpressionInputItem[] = [],\n            normalizedString = this.normalizeString(input);\n\n        while ((m = this.regex.exec(normalizedString)) != null) {\n            operands.push(this.parseMatch(m));\n        }\n\n        return new BitwiseOperationExpression(normalizedString, operands)\n    };\n\n    parseMatch (m:any): ExpressionInputItem {\n        var input = m[0],\n            sign = m[1],\n            num = m[2];\n\n        var parsed = null;\n        if(num.indexOf('~') == 0) {\n            parsed = new ExpressionOperand(num, NumericOperand.parse(num.substring(1)), '~');\n        }\n        else {\n            parsed = NumericOperand.parse(num);\n        }\n\n        if(sign == null) {\n            return parsed as ExpressionOperand;\n        } else {\n            return new ExpressionOperand(input, parsed as NumericOperand, sign);\n        }\n    };\n\n    normalizeString (input : string): string {\n        return input.replace(/\\s+/g,'');\n    };\n}\n\nvar parser = new ExpressionParser();\nparser.addFactory(new ListOfNumbersExpressionFactory());\nparser.addFactory(new BitwiseOperationExpressionFactory());\n\nexport {parser};\n","import { NumericOperand, ListOfNumbersExpression, BitwiseOperationExpression, ExpressionOperand } from '../expression';\nimport { ExpressionInputItem, ExpressionInput } from '../expression-interfaces';\n\ntype Config = {\n    emphasizeBytes: boolean;\n    allowFlipBits: boolean;\n}\n\ntype ExpressionItemModel = {\n    sign: string;\n    css: string;\n    expressionItem: ExpressionInputItem;\n    allowFlipBits: boolean;\n    label: string;\n}\n\nexport default class BitwiseExpressionViewModel {\n\n    emphasizeBytes: boolean;\n    items: ExpressionItemModel[];\n    maxNumberOfBits: number;\n    allowFlipBits: boolean;\n\n    constructor({ emphasizeBytes = false, allowFlipBits = false} : Config) {\n        this.emphasizeBytes = emphasizeBytes;\n        this.items = [];\n        this.maxNumberOfBits = 0;\n        this.allowFlipBits = allowFlipBits === true;\n    }\n\n    static buildListOfNumbers(expr : ListOfNumbersExpression, config : Config) {\n        var model = new BitwiseExpressionViewModel(config);\n        expr.numbers.forEach(op => model.addOperandRow(op));\n        model.maxNumberOfBits = BitwiseExpressionViewModel.getNumberOfBits(model.maxNumberOfBits, model.emphasizeBytes);\n        return model;\n    }\n\n    static buildMultiple (expr : BitwiseOperationExpression, config : Config) {\n\n        var op = expr.expressionItems[0],\n            i = 0, len = expr.expressionItems.length,\n            ex, m = new BitwiseExpressionViewModel(config);\n\n        var prev : NumericOperand | null = null;\n\n        for (;i<len;i++) {\n            ex = expr.expressionItems[i];\n            if(ex instanceof NumericOperand) {\n                m.addOperandRow(ex);\n                prev = ex;\n                continue;\n            }\n\n            var eo = ex as ExpressionOperand;\n\n            // If it a single NOT expression\n            if(eo.isNotExpression) {\n                m.addExpressionOperandRow(eo);\n                var notResult = eo.evaluate();\n                m.addExpressionResultRow(notResult);\n                prev = notResult;\n            }\n            else if(eo.isShiftExpression){\n                prev = eo.evaluate(prev as NumericOperand);\n                m.addShiftExpressionResultRow(eo, prev);\n            } else {\n\n                prev = eo.evaluate(prev as NumericOperand);\n                m.addExpressionOperandRow(eo);\n                m.addExpressionResultRow(prev);\n            }\n        }\n\n        m.maxNumberOfBits = BitwiseExpressionViewModel.getNumberOfBits(m.maxNumberOfBits, m.emphasizeBytes);\n        return m;\n    };\n\n    static buildNot (expression: ExpressionOperand, config : Config) {\n        \n        var m = new BitwiseExpressionViewModel(config);\n        m.addExpressionOperandRow(expression);\n        m.addExpressionResultRow(expression.evaluate());\n        m.maxNumberOfBits = BitwiseExpressionViewModel.getNumberOfBits(m.maxNumberOfBits, m.emphasizeBytes);\n        return m;\n    };\n\n    addOperandRow(operand: NumericOperand) {\n        this.maxNumberOfBits = Math.max(operand.getLengthInBits(), this.maxNumberOfBits);\n        this.items.push({ \n            sign:'', \n            css: '',\n            expressionItem: operand,\n            allowFlipBits: this.allowFlipBits,\n            label: ''\n        });\n    };\n\n    addExpressionOperandRow(expression: ExpressionOperand) {\n        const resultNumber = expression.isNotExpression ? expression.evaluate() : expression.getUnderlyingOperand();\n        this.maxNumberOfBits = Math.max(resultNumber.getLengthInBits(), this.maxNumberOfBits);\n        \n        this.items.push({ \n            sign: expression.sign, \n            css: '',\n            label: this.getLabel(resultNumber),\n            expressionItem: expression.operand,\n            allowFlipBits: this.allowFlipBits\n        });\n    };\n\n    addShiftExpressionResultRow(expression : ExpressionOperand, resultOperand : NumericOperand) {\n        this.maxNumberOfBits = Math.max(resultOperand.getLengthInBits(), this.maxNumberOfBits);\n        this.items.push({\n            sign: expression.sign + expression.operand.toString(),\n            css: 'expression-result',\n            expressionItem: resultOperand,\n            allowFlipBits: false,\n            label: ''\n        });\n    };\n\n    addExpressionResultRow(operand : NumericOperand) {\n        this.maxNumberOfBits = Math.max(operand.getLengthInBits(), this.maxNumberOfBits);\n        this.items.push({ \n            sign:'=', \n            css: 'expression-result',\n            expressionItem: operand, \n            allowFlipBits: false,\n            label: '',\n        });\n    };\n\n    getLabel (op: NumericOperand) : string {\n        \n        if(op.base == 'bin') {\n            return op.toString(\"dec\");\n        }\n\n        return op.toString();\n    }\n\n    // TODO: move this method elsewhere. It is also used in LisOfNumbersExpressionView.js\n    static getNumberOfBits = function (bits : number, emphasizeBytes : boolean) : number {\n        if(emphasizeBytes && bits % 8 != 0) {\n             if(bits < 8) {\n                 return 8;\n             }\n\n             var n = bits - (bits % 8);\n             return n + 8;\n        }\n\n        return bits;\n    };\n\n    static createModel(expr : ExpressionInput, emphasizeBytes: boolean) : BitwiseExpressionViewModel {\n        if(expr instanceof ListOfNumbersExpression) {\n            return BitwiseExpressionViewModel.buildListOfNumbers(expr, { \n                emphasizeBytes: emphasizeBytes, \n                allowFlipBits: true \n            });\n        }\n\n        if(expr instanceof BitwiseOperationExpression) {\n            return BitwiseExpressionViewModel.buildMultiple(expr, { \n                emphasizeBytes: emphasizeBytes,\n                allowFlipBits: false \n            });\n        }\n\n        throw new Error(\"Cannot build BitwiseExpressionViewModel out of expression \" + expr);\n    }\n}","import React from 'react';\nimport formatter from '../../core/formatter';\nimport BinaryStringView, { FlipBitEventArg } from '../../core/components/BinaryString';\nimport BitwiseExpressionViewModel from './BitwiseExpressionModel';\nimport { ExpressionInput, ExpressionInputItem } from '../expression-interfaces';\nimport { ExpressionOperand, NumericOperand } from '../expression';\n\ntype BitwiseOperationExpressionViewProps = {\n    expression: ExpressionInput;\n    emphasizeBytes: boolean;\n}\n\ntype BitwiseOperationExpressionViewState = {\n\n}\n\nexport default class BitwiseOperationExpressionView extends React.Component<BitwiseOperationExpressionViewProps, BitwiseOperationExpressionViewState>  {\n    constructor(props: BitwiseOperationExpressionViewProps) {\n        super(props);\n        this.state = {};\n    }\n    render() {\n        var rows = this.getRows();\n        if(!rows) {\n            return null;\n        }\n\n        return <table className=\"expression\">\n                    <tbody>\n                            {rows}\n                    </tbody>\n                </table>\n    }\n\n    getRows() : JSX.Element[] | null {\n        var model = BitwiseExpressionViewModel.createModel(this.props.expression, this.props.emphasizeBytes);\n\n        return model.items.map((itm, i) => \n            <ExpressionRow \n                key={i} \n                sign={itm.sign}\n                css={itm.css}\n                allowFlipBits={itm.allowFlipBits}\n                expressionItem={itm.expressionItem}\n                emphasizeBytes={this.props.emphasizeBytes} \n                maxNumberOfBits={model.maxNumberOfBits} \n                onBitFlipped={() => this.onBitFlipped()} />);\n    }\n\n    onBitFlipped() {\n        this.forceUpdate();\n        //this.setState({d:new Date()});\n    }\n}\n\ntype ExpressionRowProps = {\n    sign: string, \n    css: string, \n    maxNumberOfBits: number, \n    emphasizeBytes: boolean, \n    allowFlipBits: boolean, \n    expressionItem: ExpressionInputItem,\n    onBitFlipped: any\n}\n\nclass ExpressionRow extends React.Component<ExpressionRowProps> {\n    constructor(props: ExpressionRowProps) {\n       super(props);\n       this.state = { operand: null };\n   }\n    render() {\n        const { sign, css, maxNumberOfBits, emphasizeBytes, allowFlipBits } = this.props;\n        \n        return <tr className={css}>\n                    <td className=\"sign\">{sign}</td>\n                    <td className=\"label\">{this.getLabel()}</td>\n                    <td className=\"bin\">\n                        <BinaryStringView\n                            emphasizeBytes={emphasizeBytes} \n                            binaryString={formatter.padLeft(this.getBinaryString(), maxNumberOfBits, '0')} \n                            allowFlipBits={allowFlipBits} \n                            onFlipBit={args => this.flipBit(args)}/>\n                    </td>\n                    <td className=\"other\">{this.getOther()}</td>\n                </tr>;;\n    }\n\n    getBinaryString() : string {            \n        return this.props.expressionItem.evaluate().toBinaryString();\n    }\n\n    getLabel(): string {\n\n        // For expressions like |~2 \n        // TODO: find a better way...\n        if(this.props.expressionItem.isExpression) {\n            const ex = this.props.expressionItem as ExpressionOperand;\n            return ex.sign + this.getLabelString(ex.getUnderlyingOperand());\n        }\n\n        return this.getLabelString(this.props.expressionItem.getUnderlyingOperand());         \n    }\n\n    getOther() {\n\n        if(this.props.expressionItem.isExpression) {\n            const ex = this.props.expressionItem as ExpressionOperand;\n            const op = ex.evaluate();\n\n            return op.toString();\n        }\n\n        return this.props.expressionItem.evaluate().toOtherKindString();\n    }\n\n    getLabelString (op: NumericOperand) : string {\n        return op.toString(op.base == 'bin' ? 'dec' : op.base);\n    }\n\n     flipBit(args: FlipBitEventArg) {    \n\n        const op  = this.props.expressionItem.getUnderlyingOperand();\n        const { index, binaryString } = args;\n\n        var arr = binaryString.split('');\n        arr[index] = arr[index] == '0' ? '1' : '0';\n        var bin = arr.join('');\n\n        var newValue = parseInt(bin, 2);\n        op.setValue(newValue);\n\n        this.props.onBitFlipped();\n    }\n}","import React from 'react';\nimport AppState from '../shell/AppState';\nimport { CmdShell, CommandInput } from '../shell/cmd';\nimport BitwiseOperationExpressionView from './components/BitwiseOperationExpressionView';\nimport {parser} from './expression';\n\nconst expressionAppModule = {\n    setup: function(appState: AppState, cmd: CmdShell) {\n        \n          // Bitwise Expressions\n          cmd.command({\n            canHandle: (input:string) => parser.canParse(input),\n            handle: function(c: CommandInput) {\n                var expr = parser.parse(c.input);\n                appState.addCommandResult(c.input, <BitwiseOperationExpressionView expression={expr!} emphasizeBytes={appState.emphasizeBytes} />);\n            }\n        });\n    }\n}\n\nexport default expressionAppModule;","import React from 'react'\n\nfunction AboutResultView() {\n\n        return   <div className=\"aboutTpl\" data-result-type=\"help\">\n                        <p> Created by <a href=\"http://boryslevytskyi.github.io/\">Borys Levytskyi</a>. Please give it a like if BitwiseCmd has helped you in your work.</p>\n                        <p>If you have an idea, suggestion or you've spotted a bug here, please send it to <a href=\"mailto:&#098;&#105;&#116;&#119;&#105;&#115;&#101;&#099;&#109;&#100;&#064;&#103;&#109;&#097;&#105;&#108;&#046;&#099;&#111;&#109;?subject=Feedback\">&#098;&#105;&#116;&#119;&#105;&#115;&#101;&#099;&#109;&#100;&#064;&#103;&#109;&#097;&#105;&#108;&#046;&#099;&#111;&#109;</a> or tweet on <a href=\"http://twitter.com/BitwiseCmd\">@BitwiseCmd</a>. Your feedback is greatly appreciated.</p>\n                        <p><a href=\"https://github.com/BorisLevitskiy/BitwiseCmd\">Project on <strong>GitHub</strong></a></p>\n                    </div>;\n};\n\nexport default AboutResultView;","import { IconDefinition } from '@fortawesome/fontawesome-svg-core';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React from 'react';\nimport cmd from '../../shell/cmd';\n\ntype CommandLinkProps = {\n    command?:string;\n    text:string;\n    textClassName?: string\n    icon?: IconDefinition\n}\n\nfunction CommandLink({icon, command, text, textClassName}: CommandLinkProps) {\n    \n    const onClick = () => cmd.execute(command || text);\n\n    if(icon != null)\n        return <a href=\"javascript:void(0)\" onClick={onClick}><FontAwesomeIcon icon={icon} className=\"icon\" /><span className={textClassName}>{text}</span></a>;\n\n    return <a href=\"javascript:void(0)\" onClick={onClick}><span className={textClassName}>{text}</span></a>;\n}\n\nexport default CommandLink;","import React from 'react';\nimport CommandLink from '../../core/components/CommandLink';\nimport './HelpResultView.css';\n\nfunction HelpResultView() {\n    \n        return <div className=\"help helpResultTpl\">\n                        <div className=\"panel-container\">\n                            <div className=\"left-panel\">\n                                <div className=\"section\">\n                                    <strong className=\"section-title soft\">Bitiwse Calculation Commands</strong>\n                                <ul>\n                                    <li><code><CommandLink text=\"23 | 34\" /></code> — type bitwise expression to see result in binary (only positive integers are supported now)</li>\n                                    <li><code><CommandLink text=\"23 34\" /></code> — type one or more numbers to see their binary representations</li>\n                                </ul>\n                                </div>\n                                <div className=\"section\">\n                                    <strong className=\"section-title  soft\">IP Address Commands</strong>\n                                <ul>\n                                    <li><code><CommandLink text=\"127.0.0.1\" /></code> — enter single or multiple ip addresses (separated by space) to see their binary represenation</li>\n                                    <li><code><CommandLink text=\"192.168.0.1/8\" /></code> — subnet mask notiations are support as well</li>\n                                    <li><code><CommandLink text=\"subnet 192.168.24.1/14\" /></code> — display information about subnet (network address, broadcast address, etc.)</li>\n                                    <li><code><CommandLink text=\"vpc 192.168.24.1/24\" /></code> — see how VPC network address bits are divided between VPC address, Subnets and Hosts</li>\n                                </ul>\n                                </div>\n                                <div className=\"section\">\n                                    <strong className=\"section-title  soft\">Color Theme Commands</strong>\n                                <ul>\n                                    <li><code><CommandLink text=\"light\" /></code> — set Light color theme</li>\n                                    <li><code><CommandLink text=\"dark\" /></code> — set Dark color theme</li>\n                                    <li><code><CommandLink text=\"midnight\" /></code> — set Midnight color theme</li>\n                                </ul>\n                                </div>\n                                <div className=\"section\">\n                                    <strong className=\"section-title  soft\">Other Commands</strong>\n                                <ul>\n                                    <li><code><CommandLink text=\"clear\" /></code> — clear output pane</li>\n                                    <li><code><CommandLink text=\"help\" /></code> — display this help</li>\n                                    <li><code><CommandLink text=\"whatsnew\" /></code> — display changelog</li>\n                                    <li><code><CommandLink text=\"em\" /></code> — turn On/Off Emphasize Bytes</li>\n                                    <li><code><CommandLink text=\"about\" /></code> — about the app</li>\n                                    <li><code><CommandLink text=\"guid\" /></code> — generate <a href=\"https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_.28random.29\">v4</a> GUID</li>\n                                </ul>\n                                </div>\n                            </div>\n                            <div className=\"right-panel\">\n                                <div className=\"section\">\n                                    <strong className=\"section-title soft\">Supported Bitwise Operations</strong><br/>\n                                    <small>\n                                        <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators\">\n                                            as implemented in JavaScript engine of your browser\n                                        </a>\n                                    </small>\n                                    <ul>\n                                        <li><code>&amp;</code> — bitwise AND</li>\n                                        <li><code>|</code> — bitwise inclusive OR</li>\n                                        <li><code>^</code> — bitwise exclusive XOR</li>\n                                        <li><code>~</code> — bitwise NOT</li>\n                                        <li><code>&lt;&lt;</code> — left shift</li>\n                                        <li><code>&gt;&gt;</code> — sign propagating right shift</li>\n                                        <li><code>&gt;&gt;&gt;</code> — zero-fill right shift</li>\n                                    </ul>\n                                </div>\n                                <div className=\"section\">\n                                    <strong className=\"section-title  soft\">Tip</strong>\n                                    <p>\n                                        You can click on bits to flip them in number inputs (e.g. <CommandLink text=\"2 4\" />) or IP addresses (e.g. <CommandLink text=\"192.168.0.0/8\"/>)\n                                    </p>\n                                </div>\n                          </div>\n                     </div>\n                 </div>;\n}\n\nexport default HelpResultView;\n","import React from 'react';\n\nfunction TextResultView(props : { text: string }) {\n    return <p>{props.text}</p>;\n}\n\nexport default TextResultView;","import React from 'react';\nimport CommandLink from '../../core/components/CommandLink';\nimport './WhatsNewResultView.css';\n\nfunction WhatsnewResultView() {\n    \n        return <div className=\"changelog\">\n                    <h3>Changelog</h3>\n                    <div className=\"item item-new\">\n                        <p><span className=\"soft date\">Jul 24th, 2021</span> <br/>\n                            <ul>\n                                <li>Added support of <code>vpc</code> command to see hpw VPC network address is divided bettwen VPC, Subnets and Hosts. Try it out: <CommandLink text=\"vpc 192.168.24.1/24\" /></li>\n                                <li>Added ability to remove individual results</li>\n                            </ul>\n                        </p>                       \n                    </div>\n                    <div className=\"item\">\n                        <p><span className=\"soft date\">Jun 16th, 2021</span> <br/>\n                            Added support of <code>subnet</code> command to display information about subnet ip adress such. Try it out: <CommandLink text=\"subnet 192.168.24.1/14\" />\n                        </p>                       \n                    </div>\n                    <div className=\"item\">\n                        <p><span className=\"soft date\">Jun 14th, 2021</span> <br/>\n                        Added support of ip addresses and subnet masks notatioans. Try them out: \n                        </p>\n                        <ul>\n                            <li>Single IP address <CommandLink text=\"127.0.0.1\" /></li>\n                            <li>Multiple IP addresses and subnet mask notations <CommandLink text=\"127.0.0.1 192.168.0.0/24\" /></li>\n                        </ul>\n                        \n                    </div>\n                    <div className=\"item\">\n                        <p><span className=\"soft date\">Jun 6th, 2017</span> <br/>\n                        Added <code><CommandLink text=\"guid\" /></code> command. Use it for generating v4 GUIDs </p>\n                    </div>\n                    <div className=\"item\">\n                        <p><span className=\"soft date\">May 27th, 2017</span> <br/>\n                        Added support of binary number notation (e.g. <code><CommandLink text=\"0b10101\" /></code>). </p>\n                    </div>  \n                    <div className=\"item\">\n                        <p><span className=\"soft\">May 20th, 2017</span> <br/>\n                        New <CommandLink text=\"Midnight\" /> theme added. </p>\n                    </div>  \n                    <div className=\"item\">\n                        <p><span className=\"soft\">May 16th, 2017</span> <br/>\n                        Complete rewrite using React. Old implementation is available at <a href=\"http://bitwisecmd.com/old\">http://bitwisecmd.com/old</a>. Please let me know if you have problems with this release by <a href=\"https://github.com/BorysLevytskyi/BitwiseCmd/issues\">creating issue</a> in Github Repo.</p>\n                    </div>  \n              </div>;\n}\n\nexport default WhatsnewResultView;","import log from 'loglevel';\n\nconst APP_VERSION = 7;\n\nexport type PersistedAppData = {\n    emphasizeBytes: boolean;\n    uiTheme: string;\n    version: number;\n    debugMode: boolean | null;\n    pageVisistsCount: number;\n    donationClicked: boolean\n}\n\nexport type CommandResultView = {\n    key: number,\n    input: string,\n    view: JSX.Element\n};\n\nexport type AppStateChangeHandler = (state: AppState) => void;\n\nexport default class AppState {\n    \n    version: number = APP_VERSION;\n    emphasizeBytes: boolean;\n    debugMode: boolean = false;\n    uiTheme: string;\n    changeHandlers: AppStateChangeHandler[];\n    commandResults: CommandResultView[];\n    persistedVersion: number;\n    wasOldVersion: boolean;\n    env: string;\n    pageVisitsCount: number;\n    donationClicked: boolean;\n\n    constructor(persistData : PersistedAppData, env: string) {\n        this.commandResults = [];\n        this.changeHandlers = [];\n        this.uiTheme = persistData.uiTheme || 'midnight';\n        this.env = env;\n\n        this.emphasizeBytes = persistData.emphasizeBytes || true;\n        this.persistedVersion = persistData.version || 0.1;\n        this.wasOldVersion = persistData.version != null && this.version > this.persistedVersion;\n        this.debugMode = env !== 'prod' || persistData.debugMode === true;\n        this.pageVisitsCount = persistData.pageVisistsCount || 0;\n        this.donationClicked = persistData.donationClicked;\n    }\n\n    addCommandResult(input : string, view : JSX.Element) {\n        const key = generateKey();\n        this.commandResults.unshift({key, input, view});\n        log.debug(`command result added: ${input}`);\n        this.triggerChanged();\n    }\n\n    clearCommandResults() {\n        this.commandResults = [];\n        this.triggerChanged();\n    }\n\n    removeResult(index: number) {\n        if(index < 0 || index >= this.commandResults.length)\n            return;\n\n        this.commandResults.splice(index, 1);\n        this.triggerChanged();\n    }\n\n    toggleEmphasizeBytes() {\n        this.emphasizeBytes = !this.emphasizeBytes;\n        this.triggerChanged();\n    }\n\n    onChange(handler : AppStateChangeHandler) {\n        this.changeHandlers.push(handler);\n    }\n\n    triggerChanged() {\n        this.changeHandlers.forEach(h => h(this));\n    }\n\n    setUiTheme(theme: string) {\n         this.uiTheme = theme;\n         this.triggerChanged();\n    }\n\n    toggleDebugMode() {\n        this.debugMode = !this.debugMode;\n        this.triggerChanged();\n    }\n\n    registerVisit() {\n        this.pageVisitsCount++;\n        this.triggerChanged();\n    }\n\n    onDonationClicked() : boolean{\n        if(this.donationClicked === true) return false;\n\n        this.donationClicked = true;\n        this.triggerChanged();\n        return true;\n    }\n\n    getPersistData() : PersistedAppData {\n        return {\n            emphasizeBytes: this.emphasizeBytes,\n            uiTheme: this.uiTheme,\n            version: this.version,\n            debugMode: this.debugMode,\n            pageVisistsCount: this.pageVisitsCount,\n            donationClicked: this.donationClicked\n        }\n    }\n};\n\nfunction generateKey() : number {\n    return Math.ceil(Math.random()*10000000) ^ Date.now(); // Because why the hell not...\n}","import AppState, { PersistedAppData } from \"./AppState\";\n\nconst storeKey = 'AppState';\n\nexport default {\n    getPersistedData() : PersistedAppData {\n        var json = window.localStorage.getItem(storeKey);\n        if(!json) {\n            return {} as PersistedAppData;\n        }\n\n        try {\n            return JSON.parse(json) as PersistedAppData;\n        }\n        catch(ex) {\n            console.error('Failed to parse AppState json. Json Value: \\n' + json, ex);\n            return {} as PersistedAppData;;\n        }\n    },\n\n    watch (appState: AppState) {\n        appState.onChange(() => this.persistData(appState));\n    },\n\n    persistData(appState: AppState) {\n        localStorage.setItem(storeKey, JSON.stringify(appState.getPersistData()));\n    }\n}","import log from 'loglevel';\nimport hash from '../core/hash';\nimport AppState from './AppState';\nimport { Env } from './interfaces';\nimport appStateStore from './appStateStore';\nimport CommandLink from '../core/components/CommandLink';\n\nexport type StartupAppData = {\n    appState: AppState,\n    startupCommands: string[]\n}\n\nconst STARTUP_COMMAND_KEY = 'StartupCommand';\nconst DEFAULT_COMMANDS = ['help', '127.0.0.1 192.168.0.0/8', '1|2&6','4 0b1000000 0x80'];\n\nfunction bootstrapAppData() : StartupAppData {\n    const env = window.location.host === \"bitwisecmd.com\" ? 'prod' : 'stage';\n\n    setupLogger(env);\n\n    const appState = createAppState(env);\n    const startupCommands = getStartupCommands(appState);\n\n    return {\n        appState,\n        startupCommands\n    }\n}\n\n\nfunction createAppState(env:string) {\n    var stateData = appStateStore.getPersistedData();\n    const appState = new AppState(stateData, env);\n    appStateStore.watch(appState);\n    log.debug(\"appState initialized\", appState);\n    return appState;\n}\n\nfunction getStartupCommands(appState : AppState) : string[] {\n    var hashArgs = hash.getArgs(window.location.hash);\n\n    var startupCommands = loadStoredCommands();\n\n    if(startupCommands.length == 0) \n        startupCommands = DEFAULT_COMMANDS;\n\n    if(appState.wasOldVersion) {\n        startupCommands = [\"whatsnew\"];\n    }\n\n    if(hashArgs.length > 0) {\n        startupCommands = hashArgs;\n    }\n\n    log.debug('Executing startup commands', startupCommands);\n\n    return startupCommands;\n}\n\nfunction loadStoredCommands() : string[] {\n    const json = localStorage.getItem(STARTUP_COMMAND_KEY);\n    return json != null ? [json] : []; \n}\n\nfunction setupLogger(env: Env) {\n    if(env != 'prod'){\n        log.setLevel(\"debug\");\n        log.debug(`Log level is set to debug. Env: ${env}`)\n    } else {\n        log.setLevel(\"warn\");\n    }\n}\n\nexport {STARTUP_COMMAND_KEY};\nexport default bootstrapAppData;","import React from 'react';\nimport uuid from 'uuid';\nimport { sendAnalyticsEvent } from './analytics';\nimport AppState from './AppState';\nimport { CmdShell, CommandInput } from './cmd';\nimport AboutResultView from './components/AboutResultView';\nimport DonateResultView from './components/DonateResultView';\nimport ErrorResultView from './components/ErrorResultView';\nimport HelpResultView from './components/HelpResultView';\nimport TextResultView from './components/TextResultView';\nimport WhatsnewResultView from './components/WhatsNewResultView';\nimport {STARTUP_COMMAND_KEY} from './startup';\n\nconst shellModule = {\n    setup: function(appState: AppState, cmd: CmdShell) {\n        \n        cmd.debugMode = appState.debugMode;\n        appState.onChange(() => cmd.debugMode = appState.debugMode);\n        \n        cmd.command(\"help\", (c: CommandInput) => appState.addCommandResult(c.input, <HelpResultView />));\n        cmd.command(\"clear\", () => appState.clearCommandResults());\n        cmd.command(\"em\", () => appState.toggleEmphasizeBytes());\n        cmd.command(\"dark\", () => appState.setUiTheme('dark'));\n        cmd.command(\"light\", () => appState.setUiTheme('light'));\n        cmd.command(\"midnight\", () => appState.setUiTheme('midnight'));\n        cmd.command(\"about\", (c: CommandInput) => appState.addCommandResult(c.input, <AboutResultView />));\n        cmd.command(\"whatsnew\", (c: CommandInput) => appState.addCommandResult(c.input, <WhatsnewResultView />));\n        cmd.command(\"guid\", (c: CommandInput) => appState.addCommandResult(c.input, <TextResultView text={uuid()} />));\n        cmd.command(\"-notrack\", () => {});\n        cmd.command(\"-debug\", (c: CommandInput) => {\n            appState.toggleDebugMode();\n            appState.addCommandResult(c.input, <TextResultView text={`Debug Mode: ${appState.debugMode}`}/>);\n        }); \n\n        cmd.command(\"donate\", (c:CommandInput) => {\n\n            if(appState.onDonationClicked()) {\n                sendAnalyticsEvent({eventCategory: \"Donation\", eventAction: \"DonateButtonClicked\"})\n            }\n            else {\n                sendAnalyticsEvent({eventCategory: \"Donation\", eventAction: \"DonateButtonClickedAgain\"})\n            }\n        });\n\n        cmd.command(\"track\", (c:CommandInput) => {\n            sendAnalyticsEvent({\n                eventCategory: 'General',\n                eventAction: 'AnalyticsTest'\n            });\n        });\n\n        if(appState.env !== 'prod') {\n            \n            // Default command for development purposes\n            cmd.command({\n                canHandle: (s: string) => s.indexOf('default') === 0,\n                handle: (s: CommandInput) => {\n\n                    const executeCommand = (c: string) => {\n                        console.log(c);\n\n                        if(c.length === 0) {\n                            return \"Default comand: \" + localStorage.getItem(STARTUP_COMMAND_KEY);\n                        }\n                        else if(c === 'clear') {\n                            localStorage.removeItem(STARTUP_COMMAND_KEY);\n                            return \"Default startup command cleared\";\n                        }\n                        \n                        localStorage.setItem(STARTUP_COMMAND_KEY, c);\n                        return `Default startup command saved: ${c}`;\n                    };\n\n                    const command = s.input.substring(7).trim();\n                    const result = executeCommand(command);\n                    appState.addCommandResult(s.input, <TextResultView text={result} />);\n                } \n            });\n        };\n\n        cmd.onError((input: string, err: Error) => appState.addCommandResult(input, <ErrorResultView errorMessage={err.toString()} />));\n    }\n}\n\nexport default shellModule;","import React from 'react';\n\nfunction UnknownInputResultView(props : {input:string}) {\n    \n    return <div className=\"result\">\n                        <div className=\"error\">¯\\_(ツ)_/¯ Sorry, i don&prime;t know what <strong>{props.input}</strong> is</div>\n                </div>;\n}\n\nexport default UnknownInputResultView;\n","import cmd, { CommandInput } from './shell/cmd';\nimport AppRoot from './shell/components/AppRoot';\nimport log from 'loglevel';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport networkingAppModule from './networking/module';\nimport expressionAppModule from './expression/module';\nimport shellModule from './shell/module';\nimport bootstrapAppData from './shell/startup';\nimport UnknownInputResultView from './shell/components/UnknownInputResultView';\n\nconst appData = bootstrapAppData();\n\ninitializeModules();\n\nvar root = <AppRoot appState={appData.appState} />;\nReactDOM.render(root, document.getElementById('root'));\n\nexecuteStartupCommands();\n\nappData.appState.registerVisit();\n\nlog.debug(\"started\");\n\nfunction executeStartupCommands() {\n    log.debug(\"Executing startup commands\", appData.startupCommands);\n    appData.startupCommands.forEach(c => cmd.execute(c, {doNotTrack: true}));\n}\n\nfunction  initializeModules() {\n    shellModule.setup(appData.appState, cmd);\n    networkingAppModule.setup(appData.appState, cmd);\n    expressionAppModule.setup(appData.appState, cmd);\n\n    // Last command handler reports that input is unknown\n    cmd.command({\n        canHandle: () => true,\n        handle: (c: CommandInput) => appData.appState.addCommandResult(c.input, <UnknownInputResultView input={c.input}/>)\n    });\n}\n\n\n\n"],"sourceRoot":""}